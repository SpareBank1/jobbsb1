{"version":3,"sources":["webpack:///./src/components/employee.js","webpack:///./src/pages/ansatte.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js"],"names":["employee","react_default","a","createElement","gatsby_browser_entry","query","render","data","allMarkdownRemark","edges","map","post","key","node","id","className","frontmatter","title","rolle","to","path","_1687665919","EmployeesPage","layout","seo","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","Layout","_ref","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","Fragment","_public_static_d_755544856_json__WEBPACK_IMPORTED_MODULE_0__","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","description","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf"],"mappings":"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","file":"component---src-pages-ansatte-js-0e07e94266e6e79c3706.js","sourcesContent":["\nimport React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport { Link } from 'gatsby'\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query employeeQuery{\n        allMarkdownRemark(\n          limit: 5,\n          filter: { fileAbsolutePath: {regex : \"\\/employees/\"} },\n          sort: {fields: [frontmatter___date], order: DESC},\n        ){\n          edges{\n            node{\n              frontmatter{\n                path\n                title\n                date\n                rolle\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      data.allMarkdownRemark.edges.map(post => (\n        <div key={post.node.id}>\n          <h3 className=\"ffe-h3\">{post.node.frontmatter.title}</h3>\n          <small>\n            Stilling: {post.node.frontmatter.rolle}\n          </small>\n          <br />    \n          <Link to={post.node.frontmatter.path} className=\"ffe-link-text\">Les om {post.node.frontmatter.title}  </Link>\n          <hr/>\n        </div>\n        \n      ))\n    )}\n  />\n)\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Employee from '../components/employee'\n\nconst EmployeesPage = () => (\n  <Layout>\n    <SEO title=\"Utviklere og designere\" />\n    <h1>Utviklere og designere</h1>\n    <p>Litt om v√•re ansatte</p>\n    <Employee />\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default EmployeesPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport './layout.less'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <div>\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `no`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}