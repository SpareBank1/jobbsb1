{"version":3,"sources":["webpack:///./src/templates/pageTemplate.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Template","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_ref","markdownRemark","data","frontmatter","html","a","createElement","title","keywords","className","date","dangerouslySetInnerHTML","__html","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","detailsQuery","render","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,8BAAAG,IAAA,IAAAC,EAAAN,EAAA,GAAAO,EAAAP,EAAAQ,EAAAF,GAAAG,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAKe,SAASI,EAATO,GAEZ,IACOC,EADPD,EADDE,KAEQD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACrB,OACER,EAAAS,EAAAC,cAACR,EAAA,EAAD,KACIF,EAAAS,EAAAC,cAACP,EAAA,EAAD,CAAKQ,MAAOJ,EAAYI,MAAOC,SAAU,6DACzCZ,EAAAS,EAAAC,cAAA,OAAKG,UAAU,aACfb,EAAAS,EAAAC,cAAA,OAAKG,UAAU,QACXb,EAAAS,EAAAC,cAAA,UAAKH,EAAYI,OACjBX,EAAAS,EAAAC,cAAA,UAAKH,EAAYO,MACjBd,EAAAS,EAAAC,cAAA,OACAG,UAAU,UACVE,wBAAyB,CAAEC,OAAQR,QAQxC,IAAMV,EAAS,uHCtBtB,SAASmB,EAATb,GAA2D,IAA5Cc,EAA4Cd,EAA5Cc,YAAaC,EAA+Bf,EAA/Be,KAAMC,EAAyBhB,EAAzBgB,KAAMR,EAAmBR,EAAnBQ,SAAUD,EAASP,EAATO,MAChD,OACEU,EAAAZ,EAAAC,cAACY,EAAA,YAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAnB,GACN,IAAMoB,EACJR,GAAeZ,EAAKqB,KAAKC,aAAaV,YACxC,OACEG,EAAAZ,EAAAC,cAACmB,EAAApB,EAAD,CACEqB,eAAgB,CACdX,QAEFR,MAAOA,EACPoB,cAAa,QAAUzB,EAAKqB,KAAKC,aAAajB,MAC9CS,KAAM,CACJ,CACEY,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAAStB,GAEX,CACEuB,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAAS3B,EAAKqB,KAAKC,aAAaO,QAElC,CACEH,KAAI,gBACJC,QAAStB,GAEX,CACEqB,KAAI,sBACJC,QAASP,IAGVU,OACCxB,EAASyB,OAAS,EACd,CACEL,KAAI,WACJC,QAASrB,EAAS0B,KAAT,OAEX,IAELF,OAAOhB,MAtDlBd,KAAAiC,IA8DJtB,EAAIuB,aAAe,CACjBrB,KAAI,KACJC,KAAM,GACNR,SAAU,IAGZK,EAAIwB,UAAY,CACdvB,YAAawB,IAAUC,OACvBxB,KAAMuB,IAAUC,OAChBvB,KAAMsB,IAAUE,MAChBhC,SAAU8B,IAAUG,QAAQH,IAAUC,QACtChC,MAAO+B,IAAUC,OAAOG,YAGX7B,MAEf,IAAMO,EAAY","file":"component---src-templates-page-template-js-d3421a387281b22e0b61.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <Layout>\n        <SEO title={frontmatter.title} keywords={[`sparebank 1`, `karriere`, `stilling`, `utvikling`, `design`]} />\n        <div className=\"container\">\n        <div className=\"post\">\n            <h1>{frontmatter.title}</h1>\n            <h2>{frontmatter.date}</h2>\n            <div\n            className=\"content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n            />\n        </div>\n        </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n      }\n    }\n  }\n`","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `no`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}