{"data":{"allFeedsb1Digital":{"edges":[{"node":{"title":"Azure Landing Zone Vending — Part 2","link":"https://medium.com/sparebank1-digital/azure-landing-zone-vending-part-2-ba60d29984ec?source=rss----e3c741b0efee---4","content":{"encoded":"<h3>Azure Landing Zone Vending — Part 2</h3><h3>Introduction</h3><p>In part 2 of this 3-part series, we will provide a comprehensive guide on how we harnessed the power of the Power Platform to automate the creation of Azure Landing Zones. Our primary goal is to streamline and automate the whole process and eliminate the need for manual configuration.</p><p>As mentioned in part 1, Microsoft have done a very good job in documenting all that needs to be considered when setting up a vending machine. This is now included in the Cloud Adoption Framework. In this blog post we will focus primarily on the following areas highlighted here:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*lpVRT18DlKJGxawYZN26sA.png\" /></figure><h3>Business Logic</h3><p>The MVP solution we first implemented was a Form which then populated a SPO List. We knew we wanted a better solution eventually but had to prioritize this work earlier than expected because there were so many issues with a simple order form. One of the biggest issues was that we had no input validation, which meant that some other flows failed (email notification and budgets containing decimal points for example!). We also experienced that Forms in a multi-tenant environment had a number of limitations as well, specifically around security. We decided then to go all in and pursue the subscription vending concept.</p><p>We knew then that we needed input validation and support for users from multiple tenants. As well as this, because of the distributed support model we currently have in the alliance, there is currently no shared ITSM tool we could use as a portal. For these reasons we soon came to the conclusion that a dedicated Power App was the way to go, together with Power Automate for supporting functions.</p><h3>Approval process</h3><p>We have thought about this but considering the complex structure we have, including the differing banks and their own processes, we decided that we would not include much in the way of an approval process. There are two ways in which this can be limited though. There is a Entra ID group per bank (the bank decides who can have access) that gives the necessary permissions to use the Power App and order a landing zone, and we have a basic check that hinders sending in a request that we deem to be unreasonable (public landing zone containing customer data without a completed risk analysis for example). Obviously, it is easy to get around this, but it is designed to increase awareness for what is being requested and the potential implications of that.</p><h3>Make a Subscription Request</h3><p>Sounds easy, right… just a portal for ordering Landing Zones… well, not so much actually, there is lots to consider!</p><p>The vending concept is more than just an order form, because we need to harvest information that can then be directly used as a source for provisioning a Landing Zone.</p><p>In a nutshell, what we do with this information is convert it to a JSON file that can then be picked up by the pipelines that provision the landing zone. This means that we must ensure that the data we harvest is correct, both in value, but also in form.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/641/1*J0o_zJd4gjKkCHVo4bYI5w.png\" /></figure><h3>Building the Power App</h3><p>Our solution encompasses various components, fully native Microsoft technology, ensuring a cohesive integration. The front-end of our application will be developed using Microsoft Power Apps, a low-code tool that combines a user-friendly interface with robust logic and workflow capabilities. Power Automate, another low-code tool, will handle the back-end logic of our application. The synergy between Power Apps and Power Automate is the cornerstone of our approach.</p><p>Our application structure may differ from yours, as our guide might include configurations specific to our needs. Notably, our multi-tenant solution for Azure influences certain aspects of our implementation. However, these configurations may not be necessary for your application. We have made trade-offs to maintain our multi-tenant solution, such as sacrificing standardized emails from drop-downs and MS Teams integration.</p><h3>Step 1: Data Harvesting</h3><p>The data we decided to gather from users include organizational, technical, financial and compliance information. During runtime, the Power App will run two Power Automate flows. First, a flow “getCompanies” will run to get information on what Bank or Company the active user has access to. This data is used to display the available choices in a drop-down view. A second flow “getInvoiceSections” will run to display the invoice sections available for the user.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/706/1*U3m8GUZNsQjPvySKUuxDfA.png\" /><figcaption>Organizational information</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kFWWxZddKjUqcOD7oeRTfQ.png\" /><figcaption>Technical information (part 1)</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_VqaJNVRC75N7L16lehgYQ.png\" /><figcaption>Technical information (Part 2)</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*B11LNXohepRptCrJMXYXkg.png\" /><figcaption>Financial information</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oI32UCb5gCdsLsa7Lk7rng.png\" /><figcaption>Compliance information</figcaption></figure><p><strong>Validation</strong></p><p>Validation is integral to ensuring the reliability of user input. We have explored various validation methods, including standardized choices, regex validation for email addresses, and other error-handling techniques. This is to make sure that when a user submits the form, we can run the provisioning pipeline automatically without human intervention.</p><p>After filling out the form, users will navigate to the review screen, where they can submit their order. Successful submission takes users to a confirmation screen, and the form is reset to prepare for the next order.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MsGoNOCk-Uno8RDpCoeSDA.png\" /><figcaption>Review Screen</figcaption></figure><h3>Step 2: On form submission</h3><p>Submitting a form triggers updates in the associated SharePoint list, setting in motion the “main” Power Automate flow. This flow orchestrates various tasks, from API calls to updating files in Azure DevOps and running pipelines. We will dive deeper into the Power Automate flows in this next section.</p><h4><strong>onFormSubmit</strong></h4><p>The “onFormSubmit” flow is the central flow in this automation process, serving as the main orchestrator. Its primary responsibility is to collect information from a SharePoint list, create and manage variables, and trigger other Power Automate flows by passing these variables as arguments. Additionally, this flow plays a crucial role in constructing the JSON object for­ each Landing Zone, relying on output data from other connected flows. The key variables generated within this flow include the Landing Zone name, Landing Zone JSON object, and Repository ID.</p><h4>getBillingInfo</h4><p>The “getBillingInfo” flow plays a vital role in acquiring essential information regarding billing profiles and invoice sections, which are essential for successful Landing Zone provisioning. This flow accepts two input arguments: Company Name and Invoice Section Name, both of which are supplied through user input in the Power App. The output of this flow comprises the Invoice Section ID, Billing Profile ID, and Billing Profile Name. To retrieve this information, the flow interfaces with the Microsoft API and retrieves data on all invoice sections associated with a given Company name. You can refer to the Microsoft API documentation for further details: <a href=\"https://learn.microsoft.com/en-us/rest/api/billing/invoice-sections?view=rest-billing-2020-05-01\">Microsoft API for Invoice Sections.</a></p><h4><strong>updateJSON</strong></h4><p>The “updateJSON” flow is responsible for the task of updating the JSON file for each Landing Zone within Azure DevOps. This flow requires three input arguments: the Landing Zone JSON object, Repository ID, and Landing Zone name. To achieve this, it utilizes a two-step process. First, a “GET” request is made to retrieve information about the target repository using the provided Repository ID. Then, a “POST” request is executed to append the new Landing Zone JSON object to the designated folder within the repository.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/437/1*IbWMcLs29uOX38JAcH7IZA.png\" /><figcaption>JSON object sent to Azure DevOps Repository</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/620/1*rWk86VPyo8egiroh3gDL0Q.png\" /><figcaption>The Complete Landing Zone JSON object</figcaption></figure><h4><strong>runPipelines</strong></h4><p>The “runPipelines” flow serves as the final stage in the process, responsible for initiating the execution of two critical pipelines essential for provisioning a Landing Zone. These pipelines need to know which Landing Zone they should set up. So, the only argument we need to pass is the name of the Landing Zone.</p><p>The operation starts with the initiation of a “POST” request to trigger the first pipeline. The target subscription for this pipeline is set as the Landing Zone name. Then, the flow is paused, and it awaits the completion of the pipeline run. To monitor and control this waiting period, a “do until” loop is implemented. Within this loop, the flow periodically makes “GET” requests to Azure DevOps to fetch information about the ongoing pipeline run. This continuous loop persists until the pipeline run has successfully completed.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/571/1*QgVoTUZFWkcG30M8s8Eeaw.png\" /><figcaption>POST Request to trigger the Pipeline</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/556/1*tuf0zXia2w8pobH19eJRgw.png\" /><figcaption>Monitor the running Pipeline</figcaption></figure><h4>Stages of Landing Zone Creation</h4><p>Once the first pipeline run has finished, the flow proceeds to replicate this process for the second pipeline, ensuring the sequential execution of both pipelines. This ensures a step-by-step provisioning of the Landing Zone, with precise control over the progress and completion of each stage.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/945/1*HUaO7j3EiwnyF7OuPyQLbA.png\" /><figcaption>Power Automate flows</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/945/1*4OTpoROIhBjxf00SzvCEcw.png\" /><figcaption>Application Architecture</figcaption></figure><p>Throughout the entire Landing Zone creation process, both the requester and the platform team is notified with updates. As illustrated in the image below the requester, the Landing Zone owner and team azure are notified when the order is submitted through the Power App. When the Landing Zone is ready for use, the requester and owner will receive a final email.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/259/1*yWHVEB4khOH0Ww3TYw9Vsw.png\" /><figcaption>Landing Zone Creation Flow</figcaption></figure><h4>Requirements</h4><p>Licenses are necessary for Azure DevOps, Power Automate, PowerApps, SharePoint, and Azure Active Directory.</p><p>Keep in mind that not all users may have premium Power Platform access, which could impact the functionality available to them.</p><h3>In Summary</h3><p>By harnessing the strengths of Microsoft’s low-code tools, specifically Power Apps and Power Automate, we’ve seamlessly integrated front-end development with robust back-end logic. This guide offers a clear roadmap for automating Azure Landing Zone creation through the Power Platform.</p><p>While we provide implementation specifics tailored to our requirements, it’s crucial to recognize the potential necessity for customization in diverse application scenarios.</p><h4>Thanks to <a href=\"https://medium.com/u/612879bd62ad\">Matthew Greenham</a> for editing</h4><h3>Further Reading:</h3><p>In the third and final post in this series we will delve deeper on our Landing Zone pipelines, and how we provision across all tenants in an effective way.</p><p>Part-1: <a href=\"https://medium.com/sparebank1-digital/azure-landing-zone-vending-part-1-4a9333dc4569\">https://medium.com/sparebank1-digital/azure-landing-zone-vending-part-1-4a9333dc4569</a></p><p><a href=\"https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/landing-zone/design-area/subscription-vending\">https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/landing-zone/design-area/subscription-vending</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ba60d29984ec\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/azure-landing-zone-vending-part-2-ba60d29984ec\">Azure Landing Zone Vending — Part 2</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Salam Haider Hassan"}},{"node":{"title":"Azure Landing Zone Vending — Part 1","link":"https://medium.com/sparebank1-digital/azure-landing-zone-vending-part-1-4a9333dc4569?source=rss----e3c741b0efee---4","content":{"encoded":"<h3>Azure Landing Zone Vending — Part 1</h3><h3>Introduction</h3><p>This blog post is the first of a 3-part series where we explain the concept of Azure Landing Zone vending, and how we have implemented this in SpareBank 1.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jASFYjyEsqhTEo7jd-7IKg.jpeg\" /></figure><h3>Part 1: The Holy Grail?</h3><p>If you have been working with Azure as long as I have (Classic portal, anyone!?), then you will remember that for a long time, Microsoft’s recommended architecture was an all-encompassing Azure Subscription per environment (dev, test, prod and so on). The logical workload boundary and unit of scale was at the resource group level. This was do-able but did mean a number of inherent problems that traditionally had to be fixed by the platform team. Access control being maybe the most obvious. However, in 2020 Microsoft launched the first full Cloud Adoption Framework guidelines, and this together with <em>Azure Landing Zones</em> (originally called <em>Enterprise Scale Landing Zones</em>) reference architecture that came out in it’s current version in 2021 completely changed all this. The best practice became to use the actual Azure subscription as workload boundary and unit of scale. At this time, an Azure Subscription was renamed to a Landing Zone in the context of this model.</p><p>This brings numerous advantages and simplifies things, certainly in small environments…. but for larger organizations, it potentially increases the dangers of subscription sprawl, and an inability to keep control and oversight. Like most things with the cloud, the only way to control this over time is to do everything in code, automate and standardize as much as possible. These things are great of course, but if you’re really going to push adoption, lower the barriers to entry and open up Azure for everyone, then you need to take things up a level.</p><h4>The Vending Machine</h4><p>The Vending machine concept is the next level (and holy grail?) for Azure platform teams because it means that the creation of Landing Zones becomes fully automated, just like a vending machine, and as such adheres to the inherent characteristics of one: Self-service, automated, quick, convenient and always available. The first known reference to a vending machine is nearly 2000 years old, so this is not a new concept, but it is new in the world of Azure Landing Zones. Microsoft have only quite recently included this in the Cloud Adoption Framework under platform automation and DevOps (march 2023):</p><p><a href=\"https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/landing-zone/design-area/subscription-vending\">https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/landing-zone/design-area/subscription-vending</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HswsVKBLzD5663IW7UsUnQ.png\" /></figure><h4>Why do this?</h4><p>As cool as this concept is, it’s not straightforward and needs a lot of engineering in order to create and not least to keep updated over time. However, there are some key and very sizable benefits to this approach:</p><p><em>Improved speed, and time to market</em></p><p>20 minutes from ordering a Landing Zone to availability in the portal. Fully built in code, fully automated, and ready to use. That’s always been our goal. It’s an ambitious target, but we are edging ever closer. We believe that this will drive innovation and time to market. We had a meeting with a large multinational company a while ago and they had somehow created such a complex manual structure that it took many weeks before a Landing Zone was provisioned!! Not exactly Agile.</p><p><em>Streamlined process</em></p><p>With such a quick and simple process, it’s easy to sell in this as a first step for any team that needs to start innovating and creating in Azure. A single place to order Landing Zones, thet are then provisioned automatically means reduced friction and on-boarding problems. We also have a specific requirement to deliver to different banks in their own tenants. These banks can also have their own processes and routines. As such a complete solution, from frond end to Lanzing Zone delivery simplifies the experience for everyone.</p><p><em>Full automation is efficient</em></p><p>Once automation is in place this process then becomes extremely efficient. Everyone benefits from this; The cloud platform team, the developers as well as security and compliance teams. This then frees up time that can be used on more value added tasks.</p><p><em>Quality and control</em></p><p>Automation is a no-brainer when it comes to improved quality. People make mistakes, whilst an automated process is correct everytime (assuming it is engineered correctly!) By using an automated process governance and compliance needs are easier to meet too. No settings or steps are forgotten in the provisioning process and all configuration is pre-defined and approved in advance.</p><h4>The Negatives</h4><p>There is, of course, a question of whether this unfettered democratization of landing Zone creation is a good idea in an enterprise setting. You can hear the CFO now: “<em>What!? Anyone can just get a landing zone and start creating resources and spending money!?</em>”</p><p>Well of course there should be controls in place (FinOps and people processes) to handle this problem. And it’s very possible to build in guard rails or approval processes if required. But the point is that you don’t want the provisioning of a landing zone to slow down innovation… the cloud team shouldn’t be the weakest link in the chain.</p><p>There is also the question of cost and complexity in creating such a system. If you’re only creating a few landing zones per year, the the effort to establish a vending solution probably won’t be worth the investment.</p><h4>In Summary</h4><p>We have developed our own vending solution based on the needs we have in the SpareBank1 Alliance. Our solution is more complex than a standard vending solution would typically need to be, not least because the SpareBank 1 Alliance is multi-tenant, and we have a distributed ownership and operations model. We need to deliver Landing Zones across the whole environment (It’s easiest to think of us as a Cloud service provider, providing shared services and economies of scale), which means that all elements of the vending solution need to take this into account.</p><p>The complexity is huge, and we a have used a good amount of time and energy on this. However, like most organisations at the moment, there is a ramping up of a migration and modernising to the cloud, and we expect Landing Zones to be provisioned regularly and often. With this in mind, and together with the demanding technical landscape, we feel that this was not a solution that was nice to have, but one that is absolutely necessary for SpareBank 1.</p><h4>Further Reading</h4><p>In the next two blog posts you will see how we have achieved the vending machine using Microsoft native tooling. The first post will go into the no code / low code front end, which data we need to collect, how we do that and which tools we have used to achieve this. The final post will lift the lid on our Landing Zone pipelines, and how we provision accross all tenants in an effective way.</p><p>Watch this space…</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4a9333dc4569\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/azure-landing-zone-vending-part-1-4a9333dc4569\">Azure Landing Zone Vending — Part 1</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Matthew Greenham"}},{"node":{"title":"300 applications upgraded to Java 17 in one commit. The day before vacation. The power of monorepo!","link":"https://medium.com/sparebank1-digital/300-applications-upgraded-to-java-17-in-one-commit-the-day-before-vacation-the-power-of-monorepo-1ba0c86d0e50?source=rss----e3c741b0efee---4","content":{"encoded":"<p>It’s been six years since we decided to try a monorepo aproach for our microservices. Today we have over 300 applications in this monorepo. The applications are generated using templates. We refer to these applications as our “golden path” applications. All applications use Spring Boot and React and live in the same Git repository.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/515/1*2dGXL19tnhcFctsTcg-Brg.png\" /></figure><p>Friday afternoon, the day before Easter holiday, we upgraded all monorepo applications from Java 11 to Java 17. This was done in one commit and at rest. The next day I was off to the Canary Islands, and the rest of the team to the mountains. In this article I will share why this major change to more than 300 applications did not turn out to be a project in itself.</p><h3>15000 tests to the rescue</h3><p>But why not wait to after the holiday? The short answer is; why wait when you can do it today. All our applications have unit and integration tests. In the monorepo as a whole we have more than 15000 tests. When all of these run green, we are pretty sure that the change meets the required quality level. It is also important to note that we do not automatically deploy the applications to production. When we start doing this, it might be that we will not do such a change the day before vacation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/560/1*bJ6T_ejiY0WSKP8-CetIDw.png\" /></figure><p>Sharing code is sharing knowledge. Local improvments in one team become global improvements for the whole company if this is done right. This is also one of the main benefits with using a monorepo.</p><h3>One team to boost productivity</h3><p>But let us travel to the Canary Islands. The island is lovely, especially because of the climate. The temperature in Easter is perfect for us Norwegians after a dark and long cold winter. One thing you dont’t want to do, is ruin the long awaited trip because of stress at work. Upgrading 300 applications from Java 11 to Java 17 can cause such stress. To optimize the developer efficiency at SpareBank 1, we have established a Developer Experience (DevEx) team. I am a part of this team, and we took on this upgrade task. The challenges with such an upgrade are much the same for all of our 300 applications. The DevEx team can gain expert knowledge when it comes to such an upgrade. An alternative approach would be to let every team do the upgrade themselves. That would certainly work too, but time spent on this task could have been used on building new features (opportunity cost). As teams have different goals, this upgrade might not be prioritized, and therefore it would have taken longer time to finish.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/514/1*k-vQQvp_1TOhiVQivR6SBA.png\" /></figure><p>Handling different technologies have a cost. This cost is often invisible. Having a standardized way of making applications makes it easy to switch teams, share code and knowlegde, and to make tooling. Tooling includes local build scripts and shared build pipeline. Not having to handle different Java version is just one benefit of marching in step.</p><h3>Dependencies can cause frustrations</h3><p>Our applications share code at compile time. This code is what we refer to as our libraries. The library code is not versioned. All application is “on head” (using the latest library/shared code). This is an important principle for us, and a common technique when working with monorepos. This means that all changes in the library code must be compatible with all application in the monorepo. It is not allways obvious why this is a good thing. For a developer that wants his/her feature in production as fast as possible, it may seem daunting to have to change code in other teams’ applications. But one thing we have learned over the last 15 years is that this is for the best for SpareBank 1 as a whole. When using mulitrepo with versioned shared dependencies we ended up with what is often refered to as “version hell”. Application 1 depends on Library A. Library A depends on Library B. If you needed to do a change in Library B, and you needed to get it in to production fast, you had to build Library B. Then you would bump the version in Library B, build that library, and you probably understand, do the same thing for Library A. It did not stop there. All application that used Library A had to be bumped and built. But wait, some of the applications are on an old version of Library A. Nobody remembers how to refactor these appliactions to make them work with Library A. If that is not enough, you have to make sure your third party dependencies are in sync. What happens then? The world don’t stop spinning. The trip to the Canary Islands is tomorrow. And here you are, in a middle of a “<a href=\"https://en.wikipedia.org/wiki/Dependency_hell\">dependency hell</a>”.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wJWZCI4Q5-riZ4f_iXXf8Q.png\" /><figcaption>Versioning in a multirepo with a wait period for each pull request</figcaption></figure><p>In a monorepo a pull request will show all changes needed for your feature. Also if you need to do library changes in shared code. This makes it easier to do a review because you avoid the need to also review the library change in a separate repository.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*11b5WmdbLuwe0p47qNIHvA.jpeg\" /></figure><h3><strong>Local</strong> discoveries are converted into g<strong>lobal improvements</strong></h3><p>All code in the monorepo is easily accesible to all developers. They have quick access to the code from their IDE. The can copy it, be inspired or refactor it as library code. This is knowledge sharing. One good example is when one team switched from Webpack to Vite, it did not take many weeks before several other teams did the same. Another example is me coding a new feature. The probability is high that somebody else have coded something quite similar.</p><h3>Deleting code increases your velocity</h3><p>Developers are problem solvers and coding is one tool used to solve problems. Maintaing code has a cost. Often this cost is higher than writing the code. To save money we need to be able to delete code. In a monorepo where all code is on head, your IDE can show you all dependencies. Should you miss a dependency, the build will break for the applications affected by the change. Deleting code is also important, as reducing mass will improve the speed in the development teams. When doing multi-repo we rearly deleted code. We just deprecated it. Today we actually delete it. Over time this is likely to have a significant impact on the mass of code we need to take care of.</p><h3>Peace of mind and happiness</h3><p>So, how can we go on vacation with no stress when doing a big refactoring the same day the vacation starts? My answer is the confidence you get when all applications has been built and all tests have passed. Our pipeline also deploys all applications to our Kubernetes test-enviroment. This gives us confidence that the images has been built ok, and that the configuration seems ok. I say “seems ok” beacuse as we don’t automaticly deploy to production (yet) we can not be 100% sure. But sure enough that we can travel with our minds at the right place.</p><h3>Want to try monorepo?</h3><p>Monorepos are not for everyone. You need a mature development organization that is able to build the necessary tools and understand the value of a monorepo. It is not obvious to everyone that it is more efficient for the company as a whole if a platform team makes changes to other teams’ applications. Most people understand the value of having all applications always use the latest shared code, but not everyone sees why it often does not work to let teams themselves take care of this. Teams may have other priorities than updating to the latest version of the shared code. And the cognitive load that teams are exposed to, increases as they must understand all changes in infrastructure and shared code.</p><p>If you still want to try the monorepo way, I wish you good luck! Feel free to contact me if you need someone to talk to before or during your monorepo journey.</p><h4>References</h4><p>Velocity defeats itself. Get acceleration instead <a href=\"https://jessitron.com/2022/12/22/velocity-defeats-itself-get-acceleration-instead/\">https://jessitron.com/2022/12/22/velocity-defeats-itself-get-acceleration-instead/</a></p><p>Monorepo med Git og Maven — hvordan lære gamle hunder nye triks (in Norwegian) <a href=\"https://2019.javazone.no/program/eb8bc683-ceaf-4baf-82ee-d7b72960a955\">https://2019.javazone.no/program/eb8bc683-ceaf-4baf-82ee-d7b72960a955</a></p><p>What is a Monorepo, Really? <a href=\"https://www.codesimplicity.com/post/what-is-a-monorepo-really/\">https://www.codesimplicity.com/post/what-is-a-monorepo-really/</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1ba0c86d0e50\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/300-applications-upgraded-to-java-17-in-one-commit-the-day-before-vacation-the-power-of-monorepo-1ba0c86d0e50\">300 applications upgraded to Java 17 in one commit. The day before vacation. The power of monorepo!</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Stian Conradsen"}},{"node":{"title":"Gir verdier verdi?","link":"https://medium.com/sparebank1-digital/gir-verdier-verdi-e06c26f00ac5?source=rss----e3c741b0efee---4","content":{"encoded":"<p>Høsten 2018 fikk vi egen Utvikleravdeling i SpareBank 1 Utvikling.</p><p>Da vi fikk muligheten til å lage vår egen avdeling, var det viktig for oss å være åpne om lønnsfastsettelse. I SpareBank 1 Utvikling er det regulerte rammer for lønn. Innenfor disse rammene er det også rom for personlige tillegg. Men hva skal en gjøre for å få disse tilleggene? Dette ville vi gjøre åpent og synlig for alle.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lxSz3nlg3tv6DfpTNoSZww.jpeg\" /><figcaption>God stemning på kontoret.</figcaption></figure><p>Hos oss har vi i mange år kjørt en modell hvor utviklere har personalansvar for utviklere. Dermed visste vi allerede hvordan vi i praksis gjør lønnsvurderingene og hva vi vektlegger. Det handlet om å få det synlig og lett å forstå.</p><p>Vi lagde et forslag hvor vi satte opp verdiene, egenskapene og aktivitetene vi setter pris på. Deretter hadde vi arbeidsmøter med hele avdelingen, for å tilpasse innholdet til noe vi alle var enige om, og la det ut på internnettet. Nå var det endelig tydelig for alle hva som påvirket de personlige lønnstilleggene.</p><h3>Korona</h3><p>Fire måneder etter at vi hadde fått på plass verdiene våre, kom Korona. Det gjorde at kulturbyggingen vår ble vanskeliggjort, både av at vi måtte lære oss å jobbe på hjemmekontor, og det at vi faktisk var på hjemmekontor. Samtidig fortsatte vi å ansette, slik at vi ble flere. Verdiene våre var viktige, og ble brukt aktivt ifm lønnvurderingene. Vi tok dem også fram når det var hensiktsmessig å vise til dem, men vi gjorde ikke en god nok jobb med å tydeliggjøre dem i hverdagen på hjemmekontoret.</p><h3>Bedre sammen</h3><p>I løpet av Korona definerte SpareBank 1 Utvikling verdiene som gjelder for alle som jobber hos oss. De ble mer generelle enn utviklerverdiene vi hadde tatt fram, men handlet om det samme. De var, og er fortsatt</p><ul><li>Vi vil hverandre vel</li><li>Vi griper nye muligheter</li><li>Vi dyrker og deler kompetanse</li><li>Vi leverer best når alle føler seg verdifulle</li></ul><p>og går under samlebetegnelsen Bedre Sammen.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*-BIQSEvc29QF-2bQWZQUgg.png\" /><figcaption>Bedre Sammen plakaten vår.</figcaption></figure><h3>Henger verdiene fortsatt på greip?</h3><p>Da vi endelig var ute av koronapandemien i fjor høst, følte vi at vi trengte en oppfrisking av utviklerkultur- og verdiarbeidet vårt. Mange nye hadde startet hos oss i perioden, og vi visste at vi ikke hadde jobbet nok med å synligjøre verdiene våre da vi var på hjemmekontor.</p><p>Vi fikk med oss fem av utviklerne som hadde startet i koronaperioden, og lot dem også få jobbe fram endringer og forslag til forbedringer i verdioppsettet. Resultatet av dette arbeidet ble en vesentlig forenkling. Vi så at vi kunne bruke materialet vi hadde tatt fram til å svare på to spørsmål for hver verdi eller egenskap:</p><ul><li>Hvorfor det? (*)</li><li>Hvordan gjør jeg det? (**)</li></ul><p>Her er verdiene og egenskapene våre:</p><ul><li>Vær åpen og forståelsesfull</li><li>Jobb sammen</li><li>Del kunnskapen din og tiden din med andre</li><li>Vær nysjerrig</li><li>Gjør ting bedre hele tiden</li><li>Tenk helhetlig</li><li>Vis initiativ</li></ul><p>Vi tar fram en eller flere av disse verdiene jevnlig på avdelingsmøtene våre. Vi forteller om hvorfor de er viktige for oss, og ikke minst hvordan vi gjennom konkrete aktiviteter kan oppleve kraften i verdiene selv.</p><p><a href=\"https://sparebank1.dev/utviklerverdier/\">Verdiene våre</a> er med og skaper den utviklerkulturen vi vil ha.</p><p>(*) Boka <a href=\"https://www.amazon.co.uk/Start-Why-Leaders-Inspire-Everyone/dp/0241958229/ref=sr_1_1?keywords=start+with+why+simon+sinek&amp;qid=1680174475&amp;sprefix=start+with+wy\">Start With Why</a> for hvorfor det er viktig å starte med hvorfor.</p><p>(**) Boka <a href=\"https://www.amazon.co.uk/Switch-change-things-when-hard/dp/1847940323/ref=sr_1_6?crid=3P940C3LG60E1&amp;keywords=switch+heath+book\">Switch</a> for hvorfor det er viktig å være konkret på hvordan.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e06c26f00ac5\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/gir-verdier-verdi-e06c26f00ac5\">Gir verdier verdi?</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Vidar Moe"}},{"node":{"title":"Skal teknologi brukes av alle, må den utvikles av alle","link":"https://medium.com/sparebank1-digital/skal-teknologi-brukes-av-alle-m%C3%A5-den-utvikles-av-alle-49582c5a39e0?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jdOTq_2fhNt4W1A5b_uEPw.jpeg\" /></figure><p>I SpareBank 1 Utvikling er vi vårt ansvar bevisst: oppdraget vårt er å lage de beste løsningene for alle våre én million kunder. Én million mennesker med ulik bakgrunn og kompetanse — og dermed svært ulike behov.</p><p>En vrien oppgave, tenker kanskje noen. Men jeg mener at SpareBank 1 er på god vei og at en av nøklene ligger i mangfold. Et utviklingsmiljø bestående av et bredt mangfold, belønner oss med innovasjon og løsninger som treffer bedre og mer relevant. I anledning kvinnedagen vil jeg særlig belyse behovet for flere kvinnelige utviklere.</p><p><strong>Alle relevante perspektiver<br></strong>I dag er det stor overvekt av mannlige utviklere i Norge. En utpreget homogen gruppe er lite bærekraftig for å utvikle de beste teknologiske løsningene. Det er derfor vi i SpareBank 1 Utvikling sier: <em>Skal teknologi brukes av alle, må den utvikles av alle</em>.</p><p>Utvikling av systemer og løsninger skal bidra til at samfunnet og hverdagen vår blir mer effektiv, lønnsom, bærekraftig, innovativ, enklere, smartere og mer rettferdig for alle. For å løse dette, trenger vi alle relevante perspektiver.</p><p>SpareBank 1 Utvikling er et likestilt selskap. Vi har selvsagt likelønn, mange kvinnelige ansatte og andelen kvinnelige ledere i selskapet gjenspeiler den generelle fordelingen mellom kjønnene. Men vi har virkelig et ønske om å også få tak i flere kvinnelige utviklere.</p><p><strong>Strategisk og langsiktig satsing<br></strong>Vi er altså ikke helt i mål med våre ambisjoner, og vi kommer ikke til å slå oss på brystet riktig ennå. Vi må rett og slett ta noen aktive grep for å øke rekrutteringen av kvinnelige utviklere. Dette jobber vi strategisk og langsiktig med. Målet er å tiltrekke oss en samling mennesker som sammen har best mulige forutsetninger for å lage gode løsninger for alle.</p><p>For å nå målet har vi blant annet mangfoldsforum i SpareBank 1 Utvikling og vi er med på å arrangere Girl Tech Fest, en teknologifest for jenter i 5. klasse. Dette tror vi er noen gode steg på veien til å utvikle enda bedre teknologi fremover. Vi er også alltid på jakt etter innspill til hvordan vi kan få et enda mer mangfoldig utviklingsmiljø.</p><p><strong>En oppfordring til alle<br></strong>Så vil jeg gjerne komme med en oppfordring på selveste kvinnedagen. La oss fremsnakke teknologiske fag i samtalen med unge jenter, ungdom på vei inn i studier og andre som har perspektiver vi trenger — nettopp for å kunne lage de aller beste løsningene, for absolutt alle.</p><p>Gratulerer med kvinnedagen!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=49582c5a39e0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/skal-teknologi-brukes-av-alle-m%C3%A5-den-utvikles-av-alle-49582c5a39e0\">Skal teknologi brukes av alle, må den utvikles av alle</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Espen Kjølberg"}},{"node":{"title":"Multi-tenant and hybrid DNS with Azure Private DNS","link":"https://medium.com/sparebank1-digital/multi-tenant-and-hybrid-dns-with-azure-private-dns-6ace8a67b6de?source=rss----e3c741b0efee---4","content":{"encoded":"<p>This article covers how The Azure platform team handles registering and resolving of Azure Private Endpoints in a multi-tenant and hybrid DNS setup.</p><p>If you find yourself in a situation where you need to handle multi-tenant Domain Name System (DNS) together with an on-premises environment, look no further. In this article I’m writing how we did multi-tenant and hybrid DNS at SpareBank 1, one of Norway’s largest financial institutions.</p><p>This article is one of several articles we are writing about our brand new Azure platform we’re calling Eunomia at SpareBank 1. In simple terms we’re creating a multi-tenant platform to fit the needs of the alliance.</p><p>We did a presentation at Ignite 2022, watch it here: <a href=\"https://www.youtube.com/watch?v=I6cUcewYD3A\">Spotlight on Norway | CLC08 — YouTube</a></p><h4>Short background introduction</h4><p>SpareBank 1 is an alliance of 13 banks and over 40 product companies. As individual legal entities, they choose themselves whether to collaborate in key areas such as IT operations and sytem development.</p><p>A large number of these banks and companies share an on-premises Active Directory environment. On-premises AD uses AD Connect to syncronise users and groups to their own Azure AD tenant.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fVgvad_RRPoZ8mR_35cazQ.png\" /></figure><h3>The challenge</h3><p>I’m not going into why there are 13 tenants and workloads running in each tenant, which means we have this requirement for cross-tenant and hybrid dns resolve.</p><p>The challenge is to support DNS across the whole architecture. DNS resolution needs to work in each tenant, from on-premises to Azure workloads (Key Vault, Storage, Web apps etc.) running in each tenant as well as internal applications on-premises.</p><p>This wouldn’t be a challenge if we could leverage public DNS for everything, but we need to keep everything on a private network. Where applicable, developers must use Azure Private Link on Azure PaaS services that support it. This is a big challenge!</p><p>Requirements:</p><ul><li>Resolve private endpoints FQDN’s in any tenant from any tenant and on-premises</li><li>Automate registering of Private Endpoint FQDN’s to a an Azure Private DNS Zones</li></ul><p>Take a look at this figure to understand the challenge a bit more.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OZt8EpZWUDAfNhrr6abvLw.png\" /></figure><h3>Single tenant DNS</h3><p>As you may understand from the figure above, DNS in this setting is a bit challenging. But let’s look at how we would do DNS in a single tenant.</p><p>Azure has a PaaS service called <em>Azure Private DNS Zones</em>. That is perfect for our use case. We can create the DNS zones we need and add records that resolves to the ip’s of the workloads we have.</p><p>Using Azure Policy we could do automatic registration of Private Endpoints Fully Qualified Domain Names (FQDN). This means that developers would create their private endpoints and after a couple of minutes the FQDN’s would be automatically registered in it’s associated private dns zone.</p><p>The figure below shows a simple architecture on how to do DNS in single tenant.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WexQYEdYiKlyJEix7UCUTg.png\" /><figcaption>Single tenant automatic registration of Private Endpoint FQDN’s</figcaption></figure><ol><li>Custom DNS in vnet’s would point to the central dns-servers hosted in the HUB vnet.</li><li>The dns-servers(in HUB-vnet) would forward all DNS request to Azure’s own DNS service in it’s vnet. Azure Recursive resolver will take the DNS request and try to resolve it.</li><li>Since the Azure Private DNS Zones are linked to the HUB vnet the resolver can look up records in those zones.</li><li>The magic sauce here is actually the Azure Recursive Resolver which will look up in all available sources for the record.</li></ol><p>The automatic registration of a private endpoint FQDN is accomplished by using Azure Policy. The Azure Policy would target all resources of type <em>Microsoft.Network/privateEndpoints </em>and deploy a resource of type <em>Microsoft.Network/privateEndpoints/privateDnsZoneGroups </em>on the private endpoint.</p><p>Microsoft has several resources available to create a deployment like this. See sources here:</p><p><a href=\"https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/private-link-and-dns-integration-at-scale\">Private Link and DNS integration at scale — Cloud Adoption Framework | Microsoft Learn</a></p><p>In the next section this architecture is expanded to work across multiple tenants together with an on-premises environment.</p><h3>Multi-tenant and hybrid DNS</h3><p>In this section I will explain in detail how we did multi-tenant and hybrid DNS at SpareBank 1.</p><h4>HUB and spoke tenants</h4><p>You have probably heard of hub and spoke topology related to Azure networking. We’re expanding on that where we introduce the concept of hub-tenant and spoke-tenants.</p><p>In the maze of all our tenants there is only one HUB-tenant and all other tenants are spoke-tenants. The HUB-tenant is used to centralize some services that can be consumed by the spoke tenants, such as DNS.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*C3lnDM-zxEesfu2yr-HtBw.png\" /></figure><h4>Azure Private DNS Zones</h4><p>We’re using Azure Private DNS Zones to host records for all of our private endpoints. We deploy all the zones we need/for all the PaaS services we are using.</p><p>In the figure below you can see we have a subscription called <em>core-con</em>, this is where we host all connectivity services, such as Azure Firewall, Azure vwan, DNS, VPN to on-premises and third-party tenants. These workloads is only necessary in the HUB-tenant. Vnet’s in spoke tenants is peered to the HUB vnet.</p><p>We host the Azure Private DNS Zones in the resource group <em>hub-core-con-pdns-nea-rg; </em>The acronyms stands for:</p><p>hub — core — connectivity — private dns — norway east — resource group</p><p>The private dns zones is vnet-linked to our virtual network <em>hub-core-con-net-nea-vnet </em>in resource group <em>hub-core-con-net-nea-rg.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*h4WEiCjxluYTqHmu1LQukg.png\" /></figure><h4>Private Link and DNS registration in a multi-tenant environment</h4><p>In this section I’ll go through how we manage the lifecycle of DNS records for private endpoints. The lifecycle must ensure that records are automatically created in the matching private DNS zone for the service being created. Since we have our Azure Private DNS Zones in our HUB-tenant we need a way to write spoke-tenant’s private endpoints zone configuration to our centralised private dns zones.</p><p>Writing a private endpoint zone configuration to a private DNS zone is fairly straight forward in a single tenant setup. We did that in the single tenant section above by leveraging Azure Policy to do the work for us. Take a look at the figure below to get an idea of what we want to accomplish and keep in mind how we leveraged Azure Policy earlier to write the DNS zone configuration of a private endpoint to a private dns zone.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_5wZ0cMlD79xDlomhKJrug.png\" /></figure><p>In the single tenant design the policy assignment would deploy the zone configuration in the same tenant. In this multi-tenant design we need each spoke tenant to do the same as a single tenant, but instead of deploying to private dns zones in the same tenant, we need it to deploy to our centralised private dns zones in our HUB-tenant.</p><h4>Reverse Azure Lighthouse concept</h4><p>You have probably heard about Azure Lighthouse. It allows an identity in a <em>managing tenant</em> to have Azure Role Based Access Control(rbac) permissions in a <em>delegated tenant</em>. So what if we use this and let all the spoke tenants become a <em>managing tenant </em>for our HUB-tenant? But with limited delegated permissions.</p><p>For an identity to write zone configuration to a private DNS zone it needs the RBAC permission <em>Private DNS Zone Contributor. </em>We can create a managed identity in each spoke tenant and assign the identity <em>Private DNS Zone Contributor</em> on the resource group where our Private DNS Zones is in the HUB-tenant using our reverse Lighthouse concept. The figure below shows the reverse lighthouse concept.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QCtl1bfpU5tCNt0Z9fbUgg.png\" /><figcaption>Reverse lighthouse concept</figcaption></figure><p>The last, but most important, part is how we can now leverage Azure Policy in each spoke tenant to automatically register all Azure Private Endpoints fqdn’s in the HUB Private DNS Zones.</p><h4>Azure Policy — Deploy if not exist — cross tenant</h4><p>We deploy our <em>Register private dns</em> Azure Policy Definition to each spoke tenant and create assignments for each PaaS resource/groupid/region.</p><p><strong>PolicyRule</strong></p><pre> &quot;policyRule&quot;: {<br>    &quot;if&quot;: {<br>      &quot;allOf&quot;: [<br>        {<br>          &quot;field&quot;: &quot;type&quot;,<br>          &quot;equals&quot;: &quot;Microsoft.Network/privateEndpoints&quot;<br>        },<br>        {<br>          &quot;count&quot;: {<br>            &quot;field&quot;: &quot;Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*]&quot;,<br>            &quot;where&quot;: {<br>              &quot;allOf&quot;: [<br>                {<br>                  &quot;field&quot;: &quot;Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].privateLinkServiceId&quot;,<br>                  &quot;contains&quot;: &quot;[parameters(&#39;privateLinkServiceId&#39;)]&quot;<br>                },<br>                {<br>                  &quot;field&quot;: &quot;Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].groupIds[*]&quot;,<br>                  &quot;equals&quot;: &quot;[parameters(&#39;privateEndpointGroupId&#39;)]&quot;<br>                }                <br>              ]<br>            }<br>          },<br>          &quot;greaterOrEquals&quot;: 1<br>        }<br>      ]<br>    },</pre><p>The policy deploys if not exists (DINE) a resource of type <em>Microsoft.Network/privateEndpoints/privateDnsZoneGroups.</em></p><pre> &quot;resources&quot;: [<br>  {<br>    &quot;name&quot;: &quot;[concat(parameters(&#39;privateEndpointName&#39;), &#39;/deployedByPolicy&#39;)]&quot;,<br>    &quot;type&quot;: &quot;Microsoft.Network/privateEndpoints/privateDnsZoneGroups&quot;,<br>    &quot;apiVersion&quot;: &quot;2022-05-01&quot;,<br>    &quot;location&quot;: &quot;[parameters(&#39;location&#39;)]&quot;,<br>    &quot;properties&quot;: {<br>      &quot;privateDnsZoneConfigs&quot;: [<br>        {<br>          &quot;name&quot;: &quot;privateDnsZone&quot;,<br>          &quot;properties&quot;: {<br>            &quot;privateDnsZoneId&quot;: &quot;[parameters(&#39;privateDnsZoneId&#39;)]&quot;<br>          }<br>        }<br>      ]<br>    }<br>  }<br> ]</pre><p>Because our managed identity in each spoke tenant has <em>Private DNS Zone Contributor </em>rbac permission to the hub-tenant we only need to reference the resource id to the Azure Private DNS Zone in the policy assignment.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yiQo3N5lKzhvMM8R85DgHw.png\" /><figcaption>Screenshot of a Azure policy Assignment for privatelink.vaultcore.azure.net</figcaption></figure><h3>DNS Configuration</h3><p>The figure below shows an overview on how DNS is configured on-premises, in spoke vnets (cross-tenant) and on HUB DNS server.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MywIKPQCX5y4XNAU3r3-6g.png\" /></figure><p>When setting up Conditional Forwarders from on-premises to the DNS server in Azure I recommend starting with just a few zones that you are currently using. Don’t configure the whole list of public DNS zones which Microsoft lists here: <a href=\"https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration\">Azure Private Endpoint DNS configuration | Microsoft Learn</a></p><h3>Closing Notes</h3><p>With the configuration the benefits of the cloud are clear. Set up any PaaS service with private link across any of the multiple tenants, and we have full automation (including lifecycle management) for that private endpoint’s DNS records. Developers do not need to think about it when creating their systems, and it is also very low overhead for the Azure platform team. This works brilliantly for us!</p><p>During the design and deployment of this the Azure DNS Private Resolver was still in preview. We’re looking into moving away from VMs to the PaaS solution. The PaaS solution will contribute greatly in achieving a more resilient solution.</p><p>We’ve had this in production for a couple of months now and we’re experiencing a couple of challenges:</p><ul><li>Azure Static Web App has a partition id in its private dns zone name. It is not documented which partition id’s this can be. This makes it difficult to pre-provision the Private DNS zones for this and also create policy assignment to target the correct private dns zone. See issue <a href=\"https://github.com/MicrosoftDocs/azure-docs/issues/101133\">#101133</a> and <a href=\"https://github.com/MicrosoftDocs/azure-docs/issues/99388\">#99388</a></li><li>Azure Machine Learning workspace creates several records utlizing two Private DNS Zones. Our Azure Policy only handle one of the zones and leaves us to handle the second manually. With some additional work on the policy I’m sure it’s possible to make it work. We have published an Github Issue on it here: <a href=\"https://github.com/MicrosoftDocs/azure-docs/issues/99388\">#99388</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6ace8a67b6de\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/multi-tenant-and-hybrid-dns-with-azure-private-dns-6ace8a67b6de\">Multi-tenant and hybrid DNS with Azure Private DNS</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Joakim Ellestad"}},{"node":{"title":"Coachende ledelse med fem små spørsmål","link":"https://medium.com/sparebank1-digital/coachende-ledelse-med-fem-sm%C3%A5-sp%C3%B8rsm%C3%A5l-2aaf0229c46a?source=rss----e3c741b0efee---4","content":{"encoded":"<p>I SpareBank 1 Utvikling bruker vi gjerne strukturert problemløsning når en utfordring ikke er rett frem å løse. A3 er en slik problemløsningsmetode som hjelper oss til å få felles innsikt i problemet før vi jobber med løsning, og det har gitt gunstige resultater hos oss. På ledernivå har vi imidlertid erfart en utfordring med A3-arbeid. I en hektisk hverdag kan det være krevende for lederen å følge opp forbedringsinitiativ man selv har prioritert oppstart av. Varierende grad av dialog og forankring underveis blir da et hinder for fart og kvalitet i problemløsningen, der A3-teamet kan ende opp med å kun sporadisk rapportere status til lederen. Vi bestemte oss for å teste om dette mønsteret kunne endres for skape bedre flyt i A3-arbeidet. Ambisjonen var å stimulere til økt lederinvolvering mens forbedringsarbeid pågår og unngå for stor avstand ved at man går hver til sitt etter oppstarten. Valget falt på et eksperiment der A3-problemløsning ble kombinert med samtaleverktøyet Coaching Kata.</p><h4>Hva er Coaching Kata?</h4><p>En kata er en sekvens av steg som repeteres mange ganger, til mønsteret er automatisert og kan utføres som en enhet, uten å måtte tenke over hvert enkelt steg. Kata er kjent fra bl.a. kampsport og musikkøvelser.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/799/0*mI0xDTiT5CUT8BZ1\" /><figcaption><a href=\"https://www.flickr.com/photos/87874260@N00/2484969590\">“the karate kids</a>” by <a href=\"https://www.flickr.com/photos/87874260@N00\">Orly Orlyson</a> is licensed under <a href=\"https://creativecommons.org/licenses/by/2.0/?ref=openverse\">CC BY 2.0</a>.</figcaption></figure><p>Mike Rother beskriver i boken <a href=\"https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238\">Toyota Kata</a> to slike mønstre som hører sammen: Improvement Kata og Coaching Kata.</p><p><strong>Improvement Kata</strong> er en forbedringsmetodikk med fire steg: 1) Forstå målet, 2) få oversikt over nåsituasjonen, 3) sett et kortsiktig, tidfestet mål (target condition), og 4) utfør eksperimenter for å fjerne hindringer og bevege deg i retning av target condition. Når target condition er nådd, kan man reevaluere nåsituasjonen og sette et nytt target condition. Det er viktig å innse at det finnes en grense for kunnskapen vi har i dag, vi kan bare se et lite stykke fram. Eksperimentene gjør at vi lærer, og gradvis ser og forstår mer av veien vi må gå for å komme frem til målet. Bruk av dette mønsteret trener inn den vitenskapelige metoden for problemløsning.</p><p><strong>Coaching Kata</strong> er lederens motpart til Improvement Kata. Den består av et lite sett spørsmål som lederen bruker for å hjelpe den som driver med Improvement Kata, og forsterker mønsteret av vitenskapelig tenkning. Spørsmålene printes gjerne ut på et lite kort med hovedspørsmålene på den ene siden og refleksjonsspørsmålene på den andre.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lMqUFJn7YCkGwJg0\" /><figcaption><em>Kilde: Toyota Kata Practice Guide</em></figcaption></figure><p>Lederen starter med å stille spørsmål 1 og 2, og snur deretter kortet og går gjennom de fire refleksjonsspørsmålene, før man snur kortet tilbake for å gå gjennom resten. Dette mønsteret vil føles unaturlig i starten, både for lederen og den som blir coachet. Men ved å holde seg til mønsteret (kataen) mange nok ganger, vil flyten etterhvert bli naturlig for begge parter. Når mønsteret er automatisert, kan man begynne å tilpasse det til situasjonen fra gang til gang, og få enda mer verdi ut av disse korte samtalene.</p><blockquote><em>“Those who have seen The Karate Kid have seen kata in practice; those who have watched a jazz band play have seen the results.”</em></blockquote><blockquote>- Jeffrey Liker, How the Toyota Way and Toyota Kata Fit Together</blockquote><h4>Coaching Kata på A3-arbeid</h4><p>I et A3-problemløsningsarbeid er det flere planleggingssteg før man kommer fram til beskrivelsen av en ønsket fremtidig situasjon (target condition): Man må forstå problemet godt, kartlegge nåsituasjonen, spisse problemstillingen ned til den delen som skal løses først og kartlegge rotårsaker, før man er klar til å se på forslag til løsninger.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/893/0*Fv8b8EdCTVioQgY_\" /><figcaption><em>Kilde: Toyota Kata Practice Guide</em></figcaption></figure><p>Underveis i planleggingsfasen er det noen faste delmål som er svar på Coaching Kata-spørsmål nr. 1 (“Hva er delmålet du jobber mot nå?”):</p><ol><li>Enighet om formuleringen av “observert problem”, dvs. hva er problemet, hvem er det et problem for, hva er konsekvensene av problemet og hvor stort er det?</li><li>Enighet om hvordan problemet skal spisses og mål for forbedringen, dvs. hvilken del av problemet er det vi skal løse, og hvor stor forbedring ønsker vi å oppnå?</li><li>Enighet om hypotese for fremtidig situasjon, dvs. hva er første “target condition” vi skal eksperimentere for å nå?</li></ol><p>Hva som kan være et “neste steg” eller eksperiment varierer etter hva slags delmål man jobber mot. Eksempler vi så underveis i arbeidet:</p><ul><li>En kartleggingsjobb, f.eks. måle størrelsen på problemet, prosesskartlegging, rotårsaksanalyse.</li><li>Administrative ting, f.eks. finne teammedlemmer, innkalle workshops, forberedelser.</li><li>Test av en ny løsning, herunder planlegging, gjennomføring, måling av resultater.</li></ul><p>Alle slike steg kan betraktes som eksperimenter hvor det kan være noe å lære, enten om selve problemet som skal løses eller om problemløsningsmetodikken.</p><h4>Oppsett og gjennomføring</h4><p>I eksperimentet ble tre deltakere coachet. Dette var medarbeidere som skulle lede hvert sitt problemløsningsarbeid sammen med et A3-team. Felles for teamene var at forbedringsarbeidet fokuserte på hvordan de kunne gjøre utviklingsprosessene sine mer effektive. Underveis var det en av deltakerne som måtte prioritere bort forbedringsarbeidet, og avbrøt derfor også deltakelsen i eksperimentet. <em>Coachen </em>i Coaching Kata-samtalene var deltakernes leder og <em>eier </em>av problemene som skulle løses. Artikkelforfatterne fungerte som <em>2nd coach</em>, og var med og observerte samtalene og ga tilbakemeldinger til coachen underveis.</p><p>Møtene ble kjørt en gang i uka, med 20 minutter til hver deltaker. Disse ble lagt rett etter hverandre, slik at coachen hadde satt av en time pr uke i sin kalender for de tre deltakerne. Møtene ble kjørt på Teams fordi deltakerne befant seg på ulike steder. Hvis vi skulle kjørt fysiske møter, ville vi ønsket å samle oss rundt en fysisk tavle, mens på Teams viste deltakerne fram sitt arbeid på en digital tavle eller i PowerPoint.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/778/1*gRzFtG4C_GGRqY7jMQMAUg.png\" /><figcaption><em>Kilde: Toyota Kata Practice Guide</em></figcaption></figure><h4>Hva lærte vi?</h4><p>Underveis i det 5 måneder lange eksperimentet ble tre retrospektiver gjennomført. Nedenfor presenteres de tydeligste læringspunktene fordelt på positive opplevelser og muligheter for forbedring.</p><p>I stort erfarte deltakerne Coaching Kata som et <strong>effektivt møtepunkt med høy verdi</strong>. Samtalene tok mellom 7 og 20 minutter, og skapte nyttig dialog mellom leder/coach og medarbeider. Her kom lederen nærmere problemstillingen teamet arbeidet med gjennom løpende involvering. Videre bidro Coaching Kata-strukturen til flyt i samtalen og til at man i stor grad pratet om rett ting: Hva har vi lært siden sist og hva skal vi gjøre framover for å lære mer? Arenaen ble ikke opplevd som et klassisk statusmøte. I stedet la de hyppige møtene til rette for dialog og tilbakemeldinger som ga medarbeiderne et “puff for fremdrift” som de opplevde positivt. Samtidig bidro strukturen i samtalen til at lederen fikk trene på og forsterke et mønster for coachende ledelse. Visualisering av arbeidet ble vurdert som svært nyttig for fokuset i samtalen.</p><blockquote><em>«Som A3-eier gir slike samtaler langt mer involvering enn vanlig, og med minimal bruk av tid»</em></blockquote><blockquote>- Leder og coach i eksperimentet</blockquote><p>Et punkt deltakerne tidlig kjente på var hvordan man kunne<strong> stille riktig forberedt </strong>til samtalene. Kvaliteten og lengden på de første iterasjonene varierte en del. Ved tydeligere fokus på hvorfor visualisering av arbeidet var viktig, kombinert med sterkere forpliktelse til å stille forberedt, økte kvaliteten på møtene samtidig som tidsbruken ble redusert. Vi mener nå at en innkalling på 15 minutter skal være nok.</p><p>En annen utfordring i starten av eksperimentet var at <strong>sparring med 2nd coach på A3-tekniske spørsmål </strong>ble til hinder for gjennomføring av Coaching Kata-syklusen. For å avverge dette problemet ble møteagendaen oppdatert med en eksplisitt rekkefølge for innholdet, der Coaching Kata stod først på kjøreplanen, mens A3-teknisk sparring var mulig når det var tid til overs. Med dette grepet ble det tydelig for alle involverte at Coaching Kata-spørsmålene hadde prioritet.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZvOvf5fZ9l2hg2Qq\" /><figcaption><em>Utklipp fra retrospektiv-tavle for eksperimentet</em></figcaption></figure><p>Et tredje hinder under den første fasen av eksperimentet var at <strong>2nd coach brøt ut av sin observatørrolle </strong>for å ta aktivt del i samtalen. Da vi ble oppmerksomme på denne utfordringen, fokuserte 2nd coach mer på aktiv lytting, ble mer oppmerksomme på egen iver etter å delta, og overlot samtalen til de øvrige deltagere. At A3-teknisk sparring ble plassert etter Coaching Kata-syklusen gjorde det også enklere å overholde rollefordelingen.</p><p><strong>Ukesrytmen</strong> for samtalene fungerte bra for deltakerne. Behovet varierte dog underveis, da det ikke alltid hadde skjedd så mye som man følte var verdt å diskutere. Andre ganger kjente man på at det kunne være nyttig å ha muligheten for flere samtaler i løpet av en uke. Selv om kadens ble diskutert underveis i forsøket ble det ikke foretatt justeringer på oppsettet.</p><h4>Observasjoner fra 2nd coach</h4><p>Ut over erfaringene som er beskrevet over, observerte vi som 2nd coacher at fremgangsmåten med de fem spørsmålene muliggjorde en form for <strong>situasjonsbestemt ledelse</strong>, der hver enkelt medarbeider fikk sparring ut fra hvor man befant seg i problemløsningen. Vårt inntrykk var at coachen benyttet spørsmålene godt, og fikk fram elementer som kanskje ikke ville ha kommet fram i en mer tradisjonell dialog om status. Blant annet observerte vi at coachen så bort fra flere forsøk på å starte samtalene med å liste opp aktiviteter man hadde lagt bak seg, og i stedet vennlig oppfordret til å starte møtet med en beskrivelse av hvilket delmål man fokuserte på, etterfulgt av detaljert <strong>refleksjon </strong>over det siste steget man hadde vært gjennom. En annen fordel med oppsettet av samtalen var muligheten for rask feedback fra 2nd coach rett i etterkant av Coaching Kata-sesjonen, med denne friskt i minne.</p><blockquote><em>“Being a good coach is essential to being a good manager and leader. Coaching is no longer a speciality; you cannot be a good manager without being a good coach.”</em></blockquote><blockquote><a href=\"https://www.amazon.com/Trillion-Dollar-Coach-Leadership-Playbook/dp/0062839268\">-Trillion Dollar Coach: The Leadership Playbook of Silicon Valley’s Bill Campbell</a></blockquote><h4>Effektiv arena for coachende ledelse</h4><p>Det kan ta tid å snu mentalitet fra status-rapportering til læringssløyfe. Erfaringen fra vårt lille eksperiment var at samtaleverktøyet traff godt ved behov for en mer coachende tilnærming til ledelse. To klassiske grøftekanter, “set &amp; forget” preget av alenegang, og sporadisk reaktiv statusrapportering, ble unngått. Både lederen og medarbeiderne i eksperimentet synes Coaching Kata fungerte godt til formålet om dialog og forankring underveis, samtidig som samtalene tok lite tid og ga positiv effekt på selve forbedringsarbeidet.</p><p>Uavhengig av problemløsningsmetode er det kanskje flere som kjenner seg igjen i en situasjon der dialog med en opptatt leder blir flaskehals for fremdrift på problemet man jobber med? Samt ledere som opplever at med covid-pandemien og fremveksten av hybridkontoret har det blitt vanskeligere å finne naturlige arenaer for samhandling med folkene man leder? Hvis man kjenner på en slik utfordring tror vi Coaching Kata kan være et interessant alternativ å teste ut.</p><p><strong>Skrevet av:<br></strong><a href=\"https://medium.com/u/c6901aa01e06\"><strong>Ragni Ryvold Arnesen</strong></a><strong><br></strong><a href=\"https://medium.com/u/e05b2b496862\">Kristoffer Berg</a></p><h4>Referanser</h4><p><a href=\"https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238\"><em>Toyota Kata: Managing People for Improvement, Adaptiveness and Superior Results</em></a>, Mike Rother.</p><p><a href=\"https://www.amazon.com/Toyota-Kata-Practice-Guide-Practicing/dp/1259861023\"><em>The Toyota Kata Practice Guide: Practicing Scientific Thinking Skills for Superior Results in 20 Minutes a Day</em></a>, Mike Rother.</p><p><a href=\"https://www.amazon.com/Understanding-A3-Thinking-Component-Management/dp/1563273608\"><em>Understanding A3 Thinking: A Critical Component of Toyota’s PDCA Management System</em></a>, Durward K. Sobek II and Art Smalley.</p><p><a href=\"https://www.amazon.com/Managing-Learn-Management-Problems-Agreement/dp/1934109207/\"><em>Managing to Learn: Using the A3 Management Process to Solve Problems, Gain Agreement, Mentor and Lead</em></a>, John Shook and Jim Womack.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2aaf0229c46a\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/coachende-ledelse-med-fem-sm%C3%A5-sp%C3%B8rsm%C3%A5l-2aaf0229c46a\">Coachende ledelse med fem små spørsmål</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Kristoffer Berg"}},{"node":{"title":"Speed up your Multi Module Maven Builds with turbo-maven-plugin","link":"https://medium.com/sparebank1-digital/speed-up-your-multi-module-maven-builds-with-turbo-maven-plugin-4be0eb2a2601?source=rss----e3c741b0efee---4","content":{"encoded":"<p>Fast feedback makes us happy. So if you are only looking for how to speed up your multi module build as fast as possible, go straight to <a href=\"https://github.com/sparebank1utvikling/turbo-maven-plugin\">turbo-maven-plugin</a>.</p><p>If you want to know more about why, and also how turbo-maven-plugin works, please keep on reading.</p><p>The reason we are happy when we get fast feedback, is that it triggers the production of dopamine in our bodies. Dopamine is a happiness drug we can give ourselves for free. This is a smart thing to do as often as possible — it makes us happy.</p><p>In addition to making us happy, fast feedback makes us deliver value faster. This not only feels good, it is also good for our team and the place we work.</p><p>When working with Kotlin and Java, feedback from building our apps, is something we need often. Where I work, we code and run our tests in IntelliJ. As soon as we want to move the change to production, we normally build the app locally with Maven before pushing the code, to see that the tests run as they should, and that everything is working fine.</p><h3>A Multi Module Maven repository with 250 applications</h3><p>We have our 250+ apps in a monorepo. The monorepo is one multi module Maven repository, where everything is on head all the time. When we build our app, we build both the app itself, and all the modules that it depends on.</p><p>This is why it is important for us to build smart.</p><p>A typical app builds and runs all tests for itself and its dependencies in 2–3 minutes. This is a long time to wait, so we started looking for a way to get faster feedback.</p><figure><img alt=\"A multi module Maven build with a change in one of the modules.\" src=\"https://cdn-images-1.medium.com/max/768/1*IhIb55tHdb5WSw_ZEtH2cg.png\" /><figcaption>A multi module Maven build with a change in one of the modules.</figcaption></figure><p>We quite often have a code change in a module the app depends on.</p><p>It is possible to ask Maven to build only the modules that we want, using the <em>— projects &lt;list of projects to build&gt;</em> argument, and building from the root pom. This is faster than building all required dependencies with <em>— also-make</em>.</p><p>Using a maven command with <em>— projects</em> requires both mental capacity and finger acrobatics on the command line, so we seldom do this. We rather build with variants of <em>cd</em> in and out of modules and <em>mvn clean install</em>, hoping that we have built everything that needs to be built. Or we build everything to be sure.</p><h3>Building only what needs to be built</h3><figure><img alt=\"A multi module Maven build with a change in one of the modules. We only need to build this module and the modules depending on it.\" src=\"https://cdn-images-1.medium.com/max/798/1*xhqIVS1Q_fEti2WtfeERpQ.png\" /><figcaption>A multi module Maven build with a change in one of the modules. We only need to build this module and the modules depending on it.</figcaption></figure><p>We only want to build what needs to be built, without having to hand code a special Maven command for every change we do. Both Bazel and Gradle knows how to do this.</p><p>There are several strategies here, and all we have seen, is based on analysing what files have changed, then making scripts or programs calculating what modules the changes reside in, and then create a Maven command that builds these modules.</p><p>We have created a Maven plugin helping us with just that. It is called<strong> turbo-maven-plugin</strong>.</p><h3>How does turbo-maven-plugin work?</h3><p>turbo-maven-plugin is based on the same strategy, that is analysing what modules have changes in their source code, and then build only these modules, and the modules depending on them.</p><p>For every module, the plugin looks for a file containing one row per source code file in the module. A row contains the name of the source code file and a checksum of the contents of the file.</p><p>If it doesn’t find a file for a module, it creates it, and puts it in the the module’s directory in the local m2 repo. It does this for all modules that is required for building the app, and also the app itself.</p><p>If we build again, without changing anything, nothing will be built, since all the checksums are the same.</p><p>If we do a change, the plugin will first get the complete list of modules that needs to be built from the Maven Reactor. This is the the app itself, and all its dependencies. For each module, it compares the checksum for each source code file in the module, with the checksum in the file in the m2 repo. If the checksums are the same, the plugin removes the module from the list.</p><p>For the modules that have changes, we make sure we also add the modules that are dependant on them. In pseudo code, it looks like this:</p><pre>//Find changed modules:<br>modulesToBuild = modulesFromMaven.filter(isModuleChanged())</pre><pre>//Find the modules dependent on the changed modules:<br>modulesToBuild.forEach(module -&gt; downStreamProjects.add(module.getDownstreamProjects()))</pre><pre>//Return the distinct set of modules to build:<br>return modulesToBuild.addAll(downStreamProjects).removeDuplicates()</pre><h3>How do we use the turbo-maven-plugin?</h3><p>The plugin is defined in our root pom, and is disabled by default, so that Maven behaves normally for everyone when using regular Maven commands:</p><pre>&lt;plugin&gt;<br>    &lt;groupId&gt;no.sparebank1&lt;/groupId&gt;<br>    &lt;artifactId&gt;turbo-maven-plugin&lt;/artifactId&gt;<br>    &lt;version&gt;${turbo-maven-plugin.version}&lt;/version&gt;<br>    &lt;extensions&gt;true&lt;/extensions&gt;<br>    &lt;configuration&gt;<br>        &lt;enabled&gt;false&lt;/enabled&gt;<br>        &lt;ignoreChangesInFiles&gt;swagger.json&lt;/ignoreChangesInFiles&gt;<br>        &lt;alwaysBuildModules&gt;distribution&lt;/alwaysBuildModules&gt;<br>    &lt;/configuration&gt;<br>&lt;/plugin&gt;</pre><p>We have a tool, that really is just a structured collection of scripts, called <em>bob</em>. When we want to build an app, we run <em>bob mvn build</em> from the app root. This command actually does this:</p><pre>mvn -T4 -f &lt;path-to-the-root-pom&gt; --projects &lt;path-to-the-app-pom&gt; --also-make -Dturbo.enabled=true clean install</pre><p>But that is something our developers don’t have to think about.</p><p>With this, we have cut the average app build time in half, from 2–3 minutes to 1–2 minutes. We have also reduced the cognitive load of our developers. They don’t have to think about what modules need to be built anymore. They just run <em>bob mvn build</em>, and Maven and maven-turbo-plugin take care of the rest.</p><p>If you want to try the plugin, it is on <a href=\"https://search.maven.org/artifact/no.sparebank1/turbo-maven-plugin\">Maven Central</a>, and you find both source code and pom configuration on the <a href=\"https://github.com/sparebank1utvikling/turbo-maven-plugin\">turbo-maven-plugin’s home page</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4be0eb2a2601\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/speed-up-your-multi-module-maven-builds-with-turbo-maven-plugin-4be0eb2a2601\">Speed up your Multi Module Maven Builds with turbo-maven-plugin</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Vidar Moe"}},{"node":{"title":"Fra agile team til agil organisasjon: Slik jobber vi agilt i SpareBank 1 Utvikling","link":"https://medium.com/sparebank1-digital/fra-agile-team-til-agil-organisasjon-slik-jobber-vi-agilt-i-sparebank-1-utvikling-b3cb65d1379?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TkMAfkITFirsPyQYiiR9Ow.jpeg\" /></figure><h4>For 10 år siden skjønte vi i SpareBank 1 Utvikling at vi måtte gjøre noe annerledes. Flere års dedikert arbeid hadde resultert i en monolitt av en løsning. Men tiden, teknologien og forventningene fra kundene hadde endret seg. Vi måtte rett og slett begynne å tenke annerledes.</h4><h4>Rettere sagt — vi måtte begynne å tenke agilt. Det ble starten på vår agile reise.</h4><p>I 2013 begynte vi å dele opp monolitten. Bit for bit. Ikke bare var kravene fra kundene og teknologien endret, men leveransemodellen vår i SpareBank 1 Utvikling begrenset muligheten til å levere det vi ønsket.</p><p>Vi endret arkitektur og teknologi, og etablerte tverrfaglige utviklingsteam. Vi begynte også det året å måle T2M og omfanget av endringene vi klarte å skape.</p><p>Grepene hadde enorm effekt:</p><ul><li>I dag har vi 25 forskjellige utviklingsteam som blant annet jobber med mobilbanken og nettbanken.</li><li>Kundetilfredsheten går oppover, og vi opplever økt salg gjennom de digitale kanalene.</li><li>Innovasjonstakten har aldri vært høyere. Antall dager fra produksjonsstart til ferdig utviklet løsning gått fra over 50 dager til å kunne gjøre løpende produksjonssettinger på bare noen timer eller dager.</li><li>Høy endringsevne har gitt mulighet for å kunne jobbe datadrevet for å forbedre kundeopplevelser, fjerne hindringer og å øke salget.</li><li>Større grad av måloppnåelse gir høyere medarbeidertilfredshet.</li></ul><p>Lignende suksesshistorier og veien dit kan du høre mer av fra andre norske utviklingsmiljøer i NAV, Skatteetaten, FINN, Vipps og flere andre dyktige og forbilledlige organisasjoner. Men, jeg har den senere tiden stilt meg et spørsmål:</p><blockquote>For til tross for de strålende resultatene på de endringsreisene vi har gjort med agile team, er vi en agil organisasjon?</blockquote><p>Og har det egentlig noe å si?</p><p>Jeg deler mine tanker her. Og, jeg har lyst til å høre dine. I kantina, innboksen eller kommentarfeltet.</p><p><strong>Hvorfor agilt?</strong></p><p>Før vi diskuterer agil organisasjon, er det nødvendig å spørre seg selv hvorfor et selskap skal jobbe agilt og å være en agil organisasjon.</p><p>Hvis svaret er at man skal fremstå som en moderne organisasjon og tiltrekke seg nye medarbeidere, er det i og for seg bra og viktig, men det holder ikke som grunn alene.</p><p>Jeg mener man må ha et mer gjennomgripende og grunnforankret forretningsmessig perspektiv om hvorfor man skal være en agil organisasjon. I SpareBank 1 Utvikling var det som nevnt innledningsvis så enkelt — og så vanskelig­ – at vi ikke fikk produsert alle tjeneste og produktene som ønsket. Vi rakk heller ikke å gjøre endringer raskt nok. Vi slet rett og slett med å skape verdi for selskapet og kunden når vi ønsket det.</p><p>Med andre ord, vi hadde ikke nok fart i utviklingsarbeidet.</p><p>I manifestet til agil arbeidsmetode, som du kan lese på agilemanifesto.com, står det tydelig hva man skal gjøre for og med smidig programvareutvikling. I fare for å repetere det som står der, vil jeg gi et innblikk i hvordan vi selv har tolket og adoptert den agile måten å jobbe på hos oss.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7yqxa2TY634pZY6CP_Yfpw.jpeg\" /></figure><p><strong>1. Vi har fart</strong></p><p>Fart og skalerbarhet er et helt sentralt fundament i agil utvikling. Det å ha evnen til å utvikle raskt har enorme fordeler for et selskap. Men, det krever også enorme endringer. Siloer må brytes ned, og nye tverrfaglige team må etableres. Prosesser må revideres og optimaliseres. Og under alt dette må det være en teknologi og arkitektur som bidrar til at teamene kan jobbe parallelt og minst mulig avhengig av hverandre.</p><p>Alt for å først og fremst oppnå én ting; fart.</p><p>Mine dyktige medarbeidere i SpareBank 1 Utvikling har publisert flere artikler om hvordan vi har gjort dette. De kan du lese mer om på <a href=\"https://sparebank1.dev/\">sparebank1.dev.</a></p><p><strong>2. Vi har kunden og forretningsfokus i sentrum</strong></p><p>Fart alene løser ikke kunde- eller forretningsbehov. Det krever tydelige ambisjoner og målsetninger. Målstyring er et sentralt grep og en forutsetning for selvgående, tverrfaglige team som jobber i høy fart.</p><p>Kort forklart er det en strategisk retning som brytes ned i ambisjoner og deretter ned i ulike mål som kan følges opp av de ulike teamene.</p><p>I fastsettelsen av ambisjoner og mål må grensene mellom forretningssiden og IT brytes ned. Med det mener jeg at det er eierne av forretningsbehov som eier målene. Disse har igjen flere produkteiere og produktledere til å hjelpe seg.</p><p>Men disse forretningsbehovene kan også kreve endringer i arkitektur, datafangst, infrastruktur og dataanalyse.</p><p>Teknologimiljøene må derfor også være tett på eieren av forretningsbehovene. Tilsvarende gjelder de som jobber med at teamene til enhver tid er best rigget for de endringene som må gjøres.</p><p>Dette høres kanskje enkelt ut, men det å bryte ned en strategisk retning til tydelige mål, uavhengig av silo, er vanskelig. Samtidig er det helt avgjørende for å få ønskede resultater. Over tid vil det skape for mye friksjon hvis forretning og IT jobber for separat.</p><p><strong>3. Vi har topplederforankring</strong></p><p>Å fjerne grensene mellom forretningssiden og IT er kun mulig med en tydelig topplederforankring. Det vil alltid, og særlig i større organisasjoner, være behov for å sette opp styringsstrukturer og tydelige ansvarsområder. I tillegg er det viktig at lederne ser hverandres bidrag for å nå selskapets mål.</p><p>Det vil i dette oppstå ulike vurderinger om hva som er riktig å gjøre og hva som er balansen mellom forretningsmål og etablerte retningslinjer et selskap har av blant annet regulatoriske grunner.</p><p>Styrken i en organisasjon handler ofte om hvordan man klarer å navigere effektivt og uten for mange konflikter når det som er riktig å gjøre ikke alltid er helt rett frem. I dette blir topplederforankringen på felles mål, retning og arbeidsform avgjørende for å bidra til å komme frem til gode løsninger og ikke større avstand.</p><p>Overgangen fra en mer tradisjonell organisasjon til en mer agil organisasjon er stor. Eksempler på kjente smertepunkter er endringer i løsninger og prosesser, etablere tydelig ansvarsdeling og rolleforståelse, fordeling av midler og kapasitet, samt både faktisk og opplevd styring og kontroll.</p><p>Det er med andre ord mange mulige grunner til at overgangen blir vanskelig. En sterk topplederforankring er sannsynligvis helt nødvendig for å lykkes godt.</p><p>Avslutningsvis må et positivt menneskesyn der trygghet og tillit gjennomsyrer hverdagen ligge i bunn. Det blir ikke fantastiske resultater av frykt, forsiktighet og å holde seg til sin lille del av løsningen og ikke oppleve en trygghet til å utfordre det eksisterende på en god måte. Man må tro på at man er bedre sammen med andre og at man hele tiden lærer. Den kulturen må ligge til grunn i et selskap.</p><p><strong>Så, er vi en agil organisasjon, eller er vi «bare» agile team?</strong></p><p>Kanskje en liten brannfakkel til slutt: Å jobbe agilt og å være en agil organisasjon kan skape fantastiske resultater, men det er ikke alltid verken forutsetningene er på plass eller at det er riktig å jobbe agilt i form av ulike smidige metoder.</p><p>I SpareBank 1 Utvikling har vi særlig erfart det ovenfor leverandører som jobber tradisjonelt med kravspesifikasjoner og større <em>releaser.</em> Dette gjelder særlig når det er større fagsystem med kompliserte forretningsregler som skal endres. Da kreves det andre typer av prosesser. En agil organisasjon må derfor også kunne tilpasse metodene som benyttes for å kunne håndtere sine omgivelser.</p><p>Størrelse på organisasjonen har mye å si. Jo mindre organisasjon desto mindre avstand, ofte mindre <em>legacy </em>og færre leverandører skal håndteres. Mange av momentene over blir enklere å håndtere i mindre selskap, men det er viktig å ha en forståelse av om selskapet vokser mye under en periode.</p><p>Agil utvikling og arbeid med agile organisasjoner krever kontinuerlig forbedring. Det vil være stadig nye problemstillinger som krever en kontinuerlig endringsevne og å kunne være tilpasningsdyktig.</p><p>Merk at kontinuerlig forbedring kan fort bli for operativ. Vi kan ikke bare jobbe med selve løsningene, vi må også kontinuerlig forbedre prosesser, metoder og ikke minst organisering. Derfor blir punktene om verdiskapning, målstyring og topplederforankring igjen viktige for å sikre at forbedringene går langs de rette aksene.</p><p>Jeg tror vi i SpareBank 1 Utvikling er nære å kunne si at vi er en agil organisasjon, men vi er ikke i mål.</p><p>Det dukker hele tiden opp nye temaer som må jobbes med. Fokus i tiden fremover er å få teamorganisasjonen til å bli enda tydeligere knyttet til forretningsområdene og linjeorganisasjonen og tilhørende ansvarsgrenser.</p><p>Ordtaket «behovet for endring er det eneste som er konstant» oppsummerer det godt.</p><p>For hva som kommer rundt neste sving må vi se på da.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b3cb65d1379\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/fra-agile-team-til-agil-organisasjon-slik-jobber-vi-agilt-i-sparebank-1-utvikling-b3cb65d1379\">Fra agile team til agil organisasjon: Slik jobber vi agilt i SpareBank 1 Utvikling</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Espen Kjølberg"}},{"node":{"title":"Parprogrammering for flyt og fokus","link":"https://medium.com/sparebank1-digital/parprogrammering-for-flyt-og-fokus-31341b372c63?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*w0DAvxk7DH2pfQoWwhXQhg.png\" /></figure><p>(Dette er en oppfølging artikkelen <a href=\"https://medium.com/sparebank1-digital/hvordan-vi-fikk-h%C3%B8yere-fart-med-hyppige-prodsettinger-og-parprogrammering-4e08ec505c54\"><em>Hvordan vi fikk høyere fart med hyppige prodsettinger og parprogrammering</em></a><em>)</em></p><p>Det er noe rart med parprogrammering. Det er en gammel teknikk som er godt kjent og respektert blant utviklere, men som likevel er lite brukt.</p><p>Hvis jeg spør, opplever jeg at de fleste er positive til parprogrammering. Spørreundersøkelser hos oss i SpareBank 1 Utvikling viser stor interesse og at de fleste vil parprogrammere mer enn de gjør i dag. Kompetansedeling, læring og at det er sosialt scorer høyt på undersøkelsene.</p><p>Likevel er det få som gjør det, selv hos oss. <a href=\"https://martinfowler.com/articles/on-pair-programming.html\">Vi kan også lese om samme type utfordringer andre steder</a>. Hvorfor? Vi ser er at dette går igjen når man spør hvorfor vi ikke parprogrammerer:</p><ul><li>To kan heller jobbe i parallell med oppgavene fordi de vet hvordan de skal løse det hver for seg</li><li>Vi bruker det bare på vanskelige problemstillinger</li><li>Vanskelig på hjemmekontor</li><li>Vi trives best med å jobbe alene</li><li>Vi hjelper hverandre heller litt underveis, og tar resten i Pull Requests</li><li>Vi vet ikke helt hvordan vi kommer igang</li><li>Vi er redd for å blottlegge oss, redde for å dumme oss ut</li><li>Vi ser ingen umiddelbar effekt</li></ul><h4>Flytsonen</h4><p>Flyt. Vi har alle vært der, men jeg tror at for oss utviklere er det spesielt. Å være i flyt er fantastisk. <a href=\"https://en.wikipedia.org/wiki/Flow_(psychology)\">Etter litt arbeid med en oppgave glemmer du tid og sted, og konsentrasjonen blir ekstra høy</a>. Du får opp en god del av kodebasen i hodet, og vet hele tiden neste steg før du har utført det. Fingrene flyr over tastaturet. Nye ideer popper lettere opp en vanlig. Du har fokus. Du er motivert. Og ikke minst, du får gjort masse.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/349/1*OwkwQjiKk9zoUK9O06Tjyw.png\" /></figure><p>De dagene jeg har vært mye i sonen, er de dagene jeg går ut av kontoret med et smil om munnen. Kone og barn får en bedre mann når jeg kommer hjem, og jeg har mer overskudd. Jeg flyr gjennom skogen på løpeturene mine. Jeg sover godt.</p><p>Så da er spørsmålet: Burde ikke vi utviklere etterstrebe denne tilstanden mest mulig av tiden?</p><h4>Har du to minutter?</h4><p><a href=\"https://slack.com/\">Slack</a> er fantastisk, det mener jeg. Vi har nesten sluttet med e-post, vi har alle ansatte tilgjengelige på et blunk og vi jobber asynkront over en lav sko. Mye blir løst raskt uten at vi trenger å sette opp egne møter for det.</p><p>Men det har en pris.</p><p>For hva skjer når du sitter midt inni denne gode flyten, og det plutselig dukker opp popup fra Slack med teksten “Har du to minutter?”</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/492/1*MUSLYmcpj5bXCiDp9wucnw.png\" /></figure><p>I det du går inn på Slack, så ser du også andre kanaler som lyser som et juletre. Du blir interessert, leser noen tråder og forsvinner enda lenger bort fra det du egentlig holder på med.</p><h4>Utviklere er ikke datamaskiner.</h4><p><a href=\"https://arxiv.org/pdf/2208.12454.pdf\">Forskning viser at det tar ca 15 minutter fra man blir avbrutt</a> til man kommer tilbake der man var i konsentrasjonen.</p><p>Når du går tilbake for å jobbe videre, vil du også automatisk tenke på det du ble avbrutt av, og flyten blir enda verre å komme tilbake til.</p><p>Resultatet? Du får gjort mindre av det du hadde planlagt, og er mest sannsynlig mindre fornøyd etter arbeidsdagen.</p><h4>Parprogrammering som verktøy for flyt</h4><p>Det er så kraftig og så enkelt. Når to sitter sammen og jobber på en oppgave så blir det fullstendig unaturlig at den andre skulle sjekke e-post, Slack, nettaviser, mobilen og andre ting.</p><p>En<strong> sesjon med parprogrammering kan betraktes som et tradisjonelt møte</strong>. Sesjonen legges inn inn i kalenderen for å vise til andre at her er du og den du jobber sammen med er opptatt. Og slik får dere fullt fokus.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*rt4R0ICZIx5_wdzFjpQoMQ.png\" /><figcaption>Test gjerne med to tastatur mot samme maskin når man parprogrammerer</figcaption></figure><p>Men hva med alle meldingene på Slack? Og alt annet som krever tiden din?</p><p>Vi tar avtalte pauser ca. annenhver time der vi svarer opp andre meldinger, og vi parprogrammerer heller ikke 7.5 timer om dagen, fem dager i uka. Vi setter av tid til slakk, fordi vi vet det dukker opp uforutsette hendelser hver eneste uke. Og vi liker å hjelpe andre.</p><h4>Hvordan kommer du igang</h4><p>Start med å planlegge dagen med den du skal jobbe sammen med.</p><p>Slik kan en dag se ut. Jeg har en avtale hos legen og en workshop, Ola har et personalledermøte. Men merk at <strong>selve oppgaven har lite fri, den får full fokus og fart hele dagen</strong>. Og man får jobbet litt alene også, selv de mest ivrige parprogrammererne liker det iblant.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*W5fN0eCurAnJ7mWH1mKRbA.png\" /><figcaption>Selv om man har litt forskjellig agenda, får oppgaven fokus hele dagen</figcaption></figure><h4>Ferie og oppgaver på vent</h4><p>Vi har opplevd at når folk jobber alene, drar på ferie eller blir syke, så blir oppgaven satt på vent til de er tilbake<em>.</em> Med <strong>parprogrammering kan den andre parten fortsette arbeidet</strong>, og lett rulle på andre utviklere.</p><p>Og hva blir effekten av dette?</p><ul><li>Oppgaven blir <strong>raskere ferdig målt i kalendertid</strong></li><li><strong>Trikkefaktor blir betydelig redusert</strong> og vi får høy grad av kunnskapsdeling. Flere kan kodebasen, mindre superhelter som eier hver sin applikasjon, mindre av “den der har Ola jobbet mest med”</li><li><strong>WIP</strong> (work in progress) reduseres, vi gjør ferdig oppgaven før vi starter noe nytt</li></ul><h4>Dobbel flytsone</h4><p>Tilbake til flytsonen. Vi er nå to utviklere som konsentrerer oss 100% om en oppgave og går inn i flyt. Hvilke konsekvenser får dette? Utviklerne har ofte litt ulik kompetanse, erfaring og måter å se oppgaven på. Man utfyller hverandre og slik oppnår man høyere fart, mindre avbrudd og bedre kvalitet. Og pull requests? De blir ofte overflødige, vi er ferdig diskutert lenge før koden kommer dit. <a href=\"https://medium.com/sparebank1-digital/hvordan-vi-fikk-h%C3%B8yere-fart-med-hyppige-prodsettinger-og-parprogrammering-4e08ec505c54\">Og vi prodsetter hele tiden.</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6reOSg5aNO_ZTrWj4LIqTA.png\" /><figcaption>To utviklere med litt forskjellig erfaring kan ofte komme frem til solide løsninger i et større tempo</figcaption></figure><h4>Mye av bittelitt istedenfor bittelitt av mye</h4><p>Har du noen gang pratet med en som har møtt veggen?</p><p>Du vil ofte høre at “det ikke var en ting, det var summen av alt”. Jeg opplever at de mest stressa og slitne folka på jobben, er de som driver med for mye samtidig. De som ikke klarer å si nei. Dette resulterer ofte i tidspress, lite fokus og til slutt går det utover kvaliteten på det som blir gjort. WIP (work in progress) blir for høy.</p><p>Planlegger man at oppgavene skal <strong>gjøres med samarbeid og parprogrammering, setter man automatisk ned WIP</strong>. Slik planlegger man altså inn fokus, får bedre flyt og vår erfaring er at vi får gjort mer med skikkelig kvalitet. Dette øker motivasjonen, og motiverte utviklere kan få til hva som helst.</p><p>Jeg skrev at de dagene jeg gikk mest fornøyd ut fra kontoret, var når jeg har vært i flyt. Men så hørte jeg kollega <a href=\"https://medium.com/u/c62b9f6d6d07\">Stian Conradsen</a> si at de dagene han gikk hjem og var mest fornøyd, var de dagene han hadde parprogrammert. Hvorfor? “Det er de dagene jeg får gjort mye”, svarte Stian.</p><p>Mest sannsynlig kan du sjekke av dette etter en dag med parprogrammering. Du har:</p><ul><li>Opplevd høy kompetansedeling</li><li>Hatt gode tekniske diskusjoner</li><li>Fått fokus og jobbet med bare en sak om gangen</li><li>Vært sosial med en eller flere kollegaer</li><li>Fått gjort mye, og gjort det skikkelig</li></ul><h4>Så hvorfor parprogrammerer ikke alle hele tiden da?</h4><p>Jeg tror det er sammensatt, men den største faktoren virker å være at det er vanskelig å komme igang.</p><p>Og jeg kan merke det selv noen ganger. Det er mye enklere å bare komme til plassen sin, sette seg ned og begynne å kode på sin oppgave i sitt eget tempo. Ingen som forstyrrer, du kan dypdykke, svare på Slack, prate med kollegaer og jobbe med det du mener er viktigst og i ditt tempo. Og dette mener jeg vi skal fortsette med også, men ikke hele tiden 5 dager i uka.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8StLI0rOAx0u4p62.png\" /></figure><p><strong>Parprogrammering krever at du retter deg opp i stolen</strong>, konsentrer deg og setter deg skikkelig inn i oppgaven. Det er en intens måte å jobbe på, så ta pauser.</p><h4><strong>Hvor mye skal vi parprogrammere?</strong></h4><p>Ikke legg lista for høyt. Hvis <strong>teamet</strong> <strong>som en start setter av tid til parprogrammering et par dager i uka</strong>, vil det fort ha stor effekt. Et nyttig tips er at det er lurt å <strong>rotere på hvem som jobber sammen</strong>. Dette vil ikke bare gi hver enkelt en bedre hverdag og øke kvaliteten på det som blir levert, men det vil ha en positiv utvikling av kulturen i teamet.</p><p>Har du lest om hva som er best for teambuilding? Det er <a href=\"https://forskning.no/ntnu-arbeid-partner/disse-formene-for-teambygging-har-ingen-effekt/366003\">ikke at de ansatte drar på rafting, paintball eller gokart</a>. Det er at vi prøver å løse en vanskelig oppgave sammen, gjerne over tid. Da får vi tilbakemelding, det er lett å spørre om hjelp og frykten for å gjøre feil blir borte — <a href=\"https://e24.no/karriere-og-ledelse/i/ab7Rn4/slik-faar-du-hybride-team-til-aa-fungere\">teamet får psykologisk trygghet</a>.</p><p>Hva er det som stopper deg fra å komme i gang?</p><h4>Referanser</h4><p><a href=\"https://martinfowler.com/articles/on-pair-programming.html\"><em>On Pair Programming</em></a> fra <a href=\"https://martinfowler.com/articles/on-pair-programming.html\">Martin Fowler’s blog</a>, av Birgitta Böckeler, Nina Siessegger</p><p><a href=\"https://medium.com/sparebank1-digital/hvordan-vi-fikk-h%C3%B8yere-fart-med-hyppige-prodsettinger-og-parprogrammering-4e08ec505c54\"><em>Hvordan vi fikk høyere fart med hyppige prodsettinger og parprogrammering</em></a> av Asgaut Mjølne</p><p><a href=\"https://en.wikipedia.org/wiki/Flow_(psychology)\">Flow (psychology)</a> fra Wikipedia</p><p><a href=\"https://www.monkeyuser.com/2020/pair-programming/\"><em>Tegneseriebilde med parprogrammering</em></a>, fra <a href=\"https://www.monkeyuser.com\">monkeyuser.com</a></p><p><a href=\"https://www.monkeyuser.com/2018/focus/\"><em>Tegneseriebilde av fokus</em></a>, fra <a href=\"https://www.monkeyuser.com\">monkeyuser.com</a></p><p><a href=\"https://forskning.no/ntnu-arbeid-partner/disse-formene-for-teambygging-har-ingen-effekt/366003\"><em>Disse formene for teambygging har ingen effekt</em></a>, fra <a href=\"https://forskning.no\">forskning.no</a> og NTNU</p><p><a href=\"https://e24.no/karriere-og-ledelse/i/ab7Rn4/slik-faar-du-hybride-team-til-aa-fungere\">Slik får du hybride team til å fungere</a> fra e24.no av Nils Brede Moe</p><p><a href=\"https://arxiv.org/pdf/2208.12454.pdf\"><em>What happens to psychological safety<br>when going remote?</em></a> av Anastasiia Tkalich, Darja Smite, Nina Haugland Andersen, Nils Brede Moe. SINTEF, NTNU, Blekinge Institute of Technology</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=31341b372c63\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/parprogrammering-for-flyt-og-fokus-31341b372c63\">Parprogrammering for flyt og fokus</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Asgaut Mjølne"}}]}}}