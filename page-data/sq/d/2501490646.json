{"data":{"allFeedsb1Digital":{"edges":[{"node":{"title":"Skal teknologi brukes av alle, må den utvikles av alle","link":"https://medium.com/sparebank1-digital/skal-teknologi-brukes-av-alle-m%C3%A5-den-utvikles-av-alle-49582c5a39e0?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jdOTq_2fhNt4W1A5b_uEPw.jpeg\" /></figure><p>I SpareBank 1 Utvikling er vi vårt ansvar bevisst: oppdraget vårt er å lage de beste løsningene for alle våre én million kunder. Én million mennesker med ulik bakgrunn og kompetanse — og dermed svært ulike behov.</p><p>En vrien oppgave, tenker kanskje noen. Men jeg mener at SpareBank 1 er på god vei og at en av nøklene ligger i mangfold. Et utviklingsmiljø bestående av et bredt mangfold, belønner oss med innovasjon og løsninger som treffer bedre og mer relevant. I anledning kvinnedagen vil jeg særlig belyse behovet for flere kvinnelige utviklere.</p><p><strong>Alle relevante perspektiver<br></strong>I dag er det stor overvekt av mannlige utviklere i Norge. En utpreget homogen gruppe er lite bærekraftig for å utvikle de beste teknologiske løsningene. Det er derfor vi i SpareBank 1 Utvikling sier: <em>Skal teknologi brukes av alle, må den utvikles av alle</em>.</p><p>Utvikling av systemer og løsninger skal bidra til at samfunnet og hverdagen vår blir mer effektiv, lønnsom, bærekraftig, innovativ, enklere, smartere og mer rettferdig for alle. For å løse dette, trenger vi alle relevante perspektiver.</p><p>SpareBank 1 Utvikling er et likestilt selskap. Vi har selvsagt likelønn, mange kvinnelige ansatte og andelen kvinnelige ledere i selskapet gjenspeiler den generelle fordelingen mellom kjønnene. Men vi har virkelig et ønske om å også få tak i flere kvinnelige utviklere.</p><p><strong>Strategisk og langsiktig satsing<br></strong>Vi er altså ikke helt i mål med våre ambisjoner, og vi kommer ikke til å slå oss på brystet riktig ennå. Vi må rett og slett ta noen aktive grep for å øke rekrutteringen av kvinnelige utviklere. Dette jobber vi strategisk og langsiktig med. Målet er å tiltrekke oss en samling mennesker som sammen har best mulige forutsetninger for å lage gode løsninger for alle.</p><p>For å nå målet har vi blant annet mangfoldsforum i SpareBank 1 Utvikling og vi er med på å arrangere Girl Tech Fest, en teknologifest for jenter i 5. klasse. Dette tror vi er noen gode steg på veien til å utvikle enda bedre teknologi fremover. Vi er også alltid på jakt etter innspill til hvordan vi kan få et enda mer mangfoldig utviklingsmiljø.</p><p><strong>En oppfordring til alle<br></strong>Så vil jeg gjerne komme med en oppfordring på selveste kvinnedagen. La oss fremsnakke teknologiske fag i samtalen med unge jenter, ungdom på vei inn i studier og andre som har perspektiver vi trenger — nettopp for å kunne lage de aller beste løsningene, for absolutt alle.</p><p>Gratulerer med kvinnedagen!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=49582c5a39e0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/skal-teknologi-brukes-av-alle-m%C3%A5-den-utvikles-av-alle-49582c5a39e0\">Skal teknologi brukes av alle, må den utvikles av alle</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Espen Kjølberg"}},{"node":{"title":"Multi-tenant and hybrid DNS with Azure Private DNS","link":"https://medium.com/sparebank1-digital/multi-tenant-and-hybrid-dns-with-azure-private-dns-6ace8a67b6de?source=rss----e3c741b0efee---4","content":{"encoded":"<p>This article covers how The Azure platform team handles registering and resolving of Azure Private Endpoints in a multi-tenant and hybrid DNS setup.</p><p>If you find yourself in a situation where you need to handle multi-tenant Domain Name System (DNS) together with an on-premises environment, look no further. In this article I’m writing how we did multi-tenant and hybrid DNS at SpareBank 1, one of Norway’s largest financial institutions.</p><p>This article is one of several articles we are writing about our brand new Azure platform we’re calling Eunomia at SpareBank 1. In simple terms we’re creating a multi-tenant platform to fit the needs of the alliance.</p><p>We did a presentation at Ignite 2022, watch it here: <a href=\"https://www.youtube.com/watch?v=I6cUcewYD3A\">Spotlight on Norway | CLC08 — YouTube</a></p><h4>Short background introduction</h4><p>SpareBank 1 is an alliance of 13 banks and over 40 product companies. As individual legal entities, they choose themselves whether to collaborate in key areas such as IT operations and sytem development.</p><p>A large number of these banks and companies share an on-premises Active Directory environment. On-premises AD uses AD Connect to syncronise users and groups to their own Azure AD tenant.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fVgvad_RRPoZ8mR_35cazQ.png\" /></figure><h3>The challenge</h3><p>I’m not going into why there are 13 tenants and workloads running in each tenant, which means we have this requirement for cross-tenant and hybrid dns resolve.</p><p>The challenge is to support DNS across the whole architecture. DNS resolution needs to work in each tenant, from on-premises to Azure workloads (Key Vault, Storage, Web apps etc.) running in each tenant as well as internal applications on-premises.</p><p>This wouldn’t be a challenge if we could leverage public DNS for everything, but we need to keep everything on a private network. Where applicable, developers must use Azure Private Link on Azure PaaS services that support it. This is a big challenge!</p><p>Requirements:</p><ul><li>Resolve private endpoints FQDN’s in any tenant from any tenant and on-premises</li><li>Automate registering of Private Endpoint FQDN’s to a an Azure Private DNS Zones</li></ul><p>Take a look at this figure to understand the challenge a bit more.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OZt8EpZWUDAfNhrr6abvLw.png\" /></figure><h3>Single tenant DNS</h3><p>As you may understand from the figure above, DNS in this setting is a bit challenging. But let’s look at how we would do DNS in a single tenant.</p><p>Azure has a PaaS service called <em>Azure Private DNS Zones</em>. That is perfect for our use case. We can create the DNS zones we need and add records that resolves to the ip’s of the workloads we have.</p><p>Using Azure Policy we could do automatic registration of Private Endpoints Fully Qualified Domain Names (FQDN). This means that developers would create their private endpoints and after a couple of minutes the FQDN’s would be automatically registered in it’s associated private dns zone.</p><p>The figure below shows a simple architecture on how to do DNS in single tenant.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WexQYEdYiKlyJEix7UCUTg.png\" /><figcaption>Single tenant automatic registration of Private Endpoint FQDN’s</figcaption></figure><ol><li>Custom DNS in vnet’s would point to the central dns-servers hosted in the HUB vnet.</li><li>The dns-servers(in HUB-vnet) would forward all DNS request to Azure’s own DNS service in it’s vnet. Azure Recursive resolver will take the DNS request and try to resolve it.</li><li>Since the Azure Private DNS Zones are linked to the HUB vnet the resolver can look up records in those zones.</li><li>The magic sauce here is actually the Azure Recursive Resolver which will look up in all available sources for the record.</li></ol><p>The automatic registration of a private endpoint FQDN is accomplished by using Azure Policy. The Azure Policy would target all resources of type <em>Microsoft.Network/privateEndpoints </em>and deploy a resource of type <em>Microsoft.Network/privateEndpoints/privateDnsZoneGroups </em>on the private endpoint.</p><p>Microsoft has several resources available to create a deployment like this. See sources here:</p><p><a href=\"https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/private-link-and-dns-integration-at-scale\">Private Link and DNS integration at scale — Cloud Adoption Framework | Microsoft Learn</a></p><p>In the next section this architecture is expanded to work across multiple tenants together with an on-premises environment.</p><h3>Multi-tenant and hybrid DNS</h3><p>In this section I will explain in detail how we did multi-tenant and hybrid DNS at SpareBank 1.</p><h4>HUB and spoke tenants</h4><p>You have probably heard of hub and spoke topology related to Azure networking. We’re expanding on that where we introduce the concept of hub-tenant and spoke-tenants.</p><p>In the maze of all our tenants there is only one HUB-tenant and all other tenants are spoke-tenants. The HUB-tenant is used to centralize some services that can be consumed by the spoke tenants, such as DNS.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*C3lnDM-zxEesfu2yr-HtBw.png\" /></figure><h4>Azure Private DNS Zones</h4><p>We’re using Azure Private DNS Zones to host records for all of our private endpoints. We deploy all the zones we need/for all the PaaS services we are using.</p><p>In the figure below you can see we have a subscription called <em>core-con</em>, this is where we host all connectivity services, such as Azure Firewall, Azure vwan, DNS, VPN to on-premises and third-party tenants. These workloads is only necessary in the HUB-tenant. Vnet’s in spoke tenants is peered to the HUB vnet.</p><p>We host the Azure Private DNS Zones in the resource group <em>hub-core-con-pdns-nea-rg; </em>The acronyms stands for:</p><p>hub — core — connectivity — private dns — norway east — resource group</p><p>The private dns zones is vnet-linked to our virtual network <em>hub-core-con-net-nea-vnet </em>in resource group <em>hub-core-con-net-nea-rg.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*h4WEiCjxluYTqHmu1LQukg.png\" /></figure><h4>Private Link and DNS registration in a multi-tenant environment</h4><p>In this section I’ll go through how we manage the lifecycle of DNS records for private endpoints. The lifecycle must ensure that records are automatically created in the matching private DNS zone for the service being created. Since we have our Azure Private DNS Zones in our HUB-tenant we need a way to write spoke-tenant’s private endpoints zone configuration to our centralised private dns zones.</p><p>Writing a private endpoint zone configuration to a private DNS zone is fairly straight forward in a single tenant setup. We did that in the single tenant section above by leveraging Azure Policy to do the work for us. Take a look at the figure below to get an idea of what we want to accomplish and keep in mind how we leveraged Azure Policy earlier to write the DNS zone configuration of a private endpoint to a private dns zone.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_5wZ0cMlD79xDlomhKJrug.png\" /></figure><p>In the single tenant design the policy assignment would deploy the zone configuration in the same tenant. In this multi-tenant design we need each spoke tenant to do the same as a single tenant, but instead of deploying to private dns zones in the same tenant, we need it to deploy to our centralised private dns zones in our HUB-tenant.</p><h4>Reverse Azure Lighthouse concept</h4><p>You have probably heard about Azure Lighthouse. It allows an identity in a <em>managing tenant</em> to have Azure Role Based Access Control(rbac) permissions in a <em>delegated tenant</em>. So what if we use this and let all the spoke tenants become a <em>managing tenant </em>for our HUB-tenant? But with limited delegated permissions.</p><p>For an identity to write zone configuration to a private DNS zone it needs the RBAC permission <em>Private DNS Zone Contributor. </em>We can create a managed identity in each spoke tenant and assign the identity <em>Private DNS Zone Contributor</em> on the resource group where our Private DNS Zones is in the HUB-tenant using our reverse Lighthouse concept. The figure below shows the reverse lighthouse concept.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QCtl1bfpU5tCNt0Z9fbUgg.png\" /><figcaption>Reverse lighthouse concept</figcaption></figure><p>The last, but most important, part is how we can now leverage Azure Policy in each spoke tenant to automatically register all Azure Private Endpoints fqdn’s in the HUB Private DNS Zones.</p><h4>Azure Policy — Deploy if not exist — cross tenant</h4><p>We deploy our <em>Register private dns</em> Azure Policy Definition to each spoke tenant and create assignments for each PaaS resource/groupid/region.</p><p><strong>PolicyRule</strong></p><pre> &quot;policyRule&quot;: {<br>    &quot;if&quot;: {<br>      &quot;allOf&quot;: [<br>        {<br>          &quot;field&quot;: &quot;type&quot;,<br>          &quot;equals&quot;: &quot;Microsoft.Network/privateEndpoints&quot;<br>        },<br>        {<br>          &quot;count&quot;: {<br>            &quot;field&quot;: &quot;Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*]&quot;,<br>            &quot;where&quot;: {<br>              &quot;allOf&quot;: [<br>                {<br>                  &quot;field&quot;: &quot;Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].privateLinkServiceId&quot;,<br>                  &quot;contains&quot;: &quot;[parameters(&#39;privateLinkServiceId&#39;)]&quot;<br>                },<br>                {<br>                  &quot;field&quot;: &quot;Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].groupIds[*]&quot;,<br>                  &quot;equals&quot;: &quot;[parameters(&#39;privateEndpointGroupId&#39;)]&quot;<br>                }                <br>              ]<br>            }<br>          },<br>          &quot;greaterOrEquals&quot;: 1<br>        }<br>      ]<br>    },</pre><p>The policy deploys if not exists (DINE) a resource of type <em>Microsoft.Network/privateEndpoints/privateDnsZoneGroups.</em></p><pre> &quot;resources&quot;: [<br>  {<br>    &quot;name&quot;: &quot;[concat(parameters(&#39;privateEndpointName&#39;), &#39;/deployedByPolicy&#39;)]&quot;,<br>    &quot;type&quot;: &quot;Microsoft.Network/privateEndpoints/privateDnsZoneGroups&quot;,<br>    &quot;apiVersion&quot;: &quot;2022-05-01&quot;,<br>    &quot;location&quot;: &quot;[parameters(&#39;location&#39;)]&quot;,<br>    &quot;properties&quot;: {<br>      &quot;privateDnsZoneConfigs&quot;: [<br>        {<br>          &quot;name&quot;: &quot;privateDnsZone&quot;,<br>          &quot;properties&quot;: {<br>            &quot;privateDnsZoneId&quot;: &quot;[parameters(&#39;privateDnsZoneId&#39;)]&quot;<br>          }<br>        }<br>      ]<br>    }<br>  }<br> ]</pre><p>Because our managed identity in each spoke tenant has <em>Private DNS Zone Contributor </em>rbac permission to the hub-tenant we only need to reference the resource id to the Azure Private DNS Zone in the policy assignment.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yiQo3N5lKzhvMM8R85DgHw.png\" /><figcaption>Screenshot of a Azure policy Assignment for privatelink.vaultcore.azure.net</figcaption></figure><h3>DNS Configuration</h3><p>The figure below shows an overview on how DNS is configured on-premises, in spoke vnets (cross-tenant) and on HUB DNS server.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MywIKPQCX5y4XNAU3r3-6g.png\" /></figure><p>When setting up Conditional Forwarders from on-premises to the DNS server in Azure I recommend starting with just a few zones that you are currently using. Don’t configure the whole list of public DNS zones which Microsoft lists here: <a href=\"https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration\">Azure Private Endpoint DNS configuration | Microsoft Learn</a></p><h3>Closing Notes</h3><p>With the configuration the benefits of the cloud are clear. Set up any PaaS service with private link across any of the multiple tenants, and we have full automation (including lifecycle management) for that private endpoint’s DNS records. Developers do not need to think about it when creating their systems, and it is also very low overhead for the Azure platform team. This works brilliantly for us!</p><p>During the design and deployment of this the Azure DNS Private Resolver was still in preview. We’re looking into moving away from VMs to the PaaS solution. The PaaS solution will contribute greatly in achieving a more resilient solution.</p><p>We’ve had this in production for a couple of months now and we’re experiencing a couple of challenges:</p><ul><li>Azure Static Web App has a partition id in its private dns zone name. It is not documented which partition id’s this can be. This makes it difficult to pre-provision the Private DNS zones for this and also create policy assignment to target the correct private dns zone. See issue <a href=\"https://github.com/MicrosoftDocs/azure-docs/issues/101133\">#101133</a> and <a href=\"https://github.com/MicrosoftDocs/azure-docs/issues/99388\">#99388</a></li><li>Azure Machine Learning workspace creates several records utlizing two Private DNS Zones. Our Azure Policy only handle one of the zones and leaves us to handle the second manually. With some additional work on the policy I’m sure it’s possible to make it work. We have published an Github Issue on it here: <a href=\"https://github.com/MicrosoftDocs/azure-docs/issues/99388\">#99388</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6ace8a67b6de\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/multi-tenant-and-hybrid-dns-with-azure-private-dns-6ace8a67b6de\">Multi-tenant and hybrid DNS with Azure Private DNS</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Joakim Ellestad"}},{"node":{"title":"Coachende ledelse med fem små spørsmål","link":"https://medium.com/sparebank1-digital/coachende-ledelse-med-fem-sm%C3%A5-sp%C3%B8rsm%C3%A5l-2aaf0229c46a?source=rss----e3c741b0efee---4","content":{"encoded":"<p>I SpareBank 1 Utvikling bruker vi gjerne strukturert problemløsning når en utfordring ikke er rett frem å løse. A3 er en slik problemløsningsmetode som hjelper oss til å få felles innsikt i problemet før vi jobber med løsning, og det har gitt gunstige resultater hos oss. På ledernivå har vi imidlertid erfart en utfordring med A3-arbeid. I en hektisk hverdag kan det være krevende for lederen å følge opp forbedringsinitiativ man selv har prioritert oppstart av. Varierende grad av dialog og forankring underveis blir da et hinder for fart og kvalitet i problemløsningen, der A3-teamet kan ende opp med å kun sporadisk rapportere status til lederen. Vi bestemte oss for å teste om dette mønsteret kunne endres for skape bedre flyt i A3-arbeidet. Ambisjonen var å stimulere til økt lederinvolvering mens forbedringsarbeid pågår og unngå for stor avstand ved at man går hver til sitt etter oppstarten. Valget falt på et eksperiment der A3-problemløsning ble kombinert med samtaleverktøyet Coaching Kata.</p><h4>Hva er Coaching Kata?</h4><p>En kata er en sekvens av steg som repeteres mange ganger, til mønsteret er automatisert og kan utføres som en enhet, uten å måtte tenke over hvert enkelt steg. Kata er kjent fra bl.a. kampsport og musikkøvelser.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/799/0*mI0xDTiT5CUT8BZ1\" /><figcaption><a href=\"https://www.flickr.com/photos/87874260@N00/2484969590\">“the karate kids</a>” by <a href=\"https://www.flickr.com/photos/87874260@N00\">Orly Orlyson</a> is licensed under <a href=\"https://creativecommons.org/licenses/by/2.0/?ref=openverse\">CC BY 2.0</a>.</figcaption></figure><p>Mike Rother beskriver i boken <a href=\"https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238\">Toyota Kata</a> to slike mønstre som hører sammen: Improvement Kata og Coaching Kata.</p><p><strong>Improvement Kata</strong> er en forbedringsmetodikk med fire steg: 1) Forstå målet, 2) få oversikt over nåsituasjonen, 3) sett et kortsiktig, tidfestet mål (target condition), og 4) utfør eksperimenter for å fjerne hindringer og bevege deg i retning av target condition. Når target condition er nådd, kan man reevaluere nåsituasjonen og sette et nytt target condition. Det er viktig å innse at det finnes en grense for kunnskapen vi har i dag, vi kan bare se et lite stykke fram. Eksperimentene gjør at vi lærer, og gradvis ser og forstår mer av veien vi må gå for å komme frem til målet. Bruk av dette mønsteret trener inn den vitenskapelige metoden for problemløsning.</p><p><strong>Coaching Kata</strong> er lederens motpart til Improvement Kata. Den består av et lite sett spørsmål som lederen bruker for å hjelpe den som driver med Improvement Kata, og forsterker mønsteret av vitenskapelig tenkning. Spørsmålene printes gjerne ut på et lite kort med hovedspørsmålene på den ene siden og refleksjonsspørsmålene på den andre.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lMqUFJn7YCkGwJg0\" /><figcaption><em>Kilde: Toyota Kata Practice Guide</em></figcaption></figure><p>Lederen starter med å stille spørsmål 1 og 2, og snur deretter kortet og går gjennom de fire refleksjonsspørsmålene, før man snur kortet tilbake for å gå gjennom resten. Dette mønsteret vil føles unaturlig i starten, både for lederen og den som blir coachet. Men ved å holde seg til mønsteret (kataen) mange nok ganger, vil flyten etterhvert bli naturlig for begge parter. Når mønsteret er automatisert, kan man begynne å tilpasse det til situasjonen fra gang til gang, og få enda mer verdi ut av disse korte samtalene.</p><blockquote><em>“Those who have seen The Karate Kid have seen kata in practice; those who have watched a jazz band play have seen the results.”</em></blockquote><blockquote>- Jeffrey Liker, How the Toyota Way and Toyota Kata Fit Together</blockquote><h4>Coaching Kata på A3-arbeid</h4><p>I et A3-problemløsningsarbeid er det flere planleggingssteg før man kommer fram til beskrivelsen av en ønsket fremtidig situasjon (target condition): Man må forstå problemet godt, kartlegge nåsituasjonen, spisse problemstillingen ned til den delen som skal løses først og kartlegge rotårsaker, før man er klar til å se på forslag til løsninger.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/893/0*Fv8b8EdCTVioQgY_\" /><figcaption><em>Kilde: Toyota Kata Practice Guide</em></figcaption></figure><p>Underveis i planleggingsfasen er det noen faste delmål som er svar på Coaching Kata-spørsmål nr. 1 (“Hva er delmålet du jobber mot nå?”):</p><ol><li>Enighet om formuleringen av “observert problem”, dvs. hva er problemet, hvem er det et problem for, hva er konsekvensene av problemet og hvor stort er det?</li><li>Enighet om hvordan problemet skal spisses og mål for forbedringen, dvs. hvilken del av problemet er det vi skal løse, og hvor stor forbedring ønsker vi å oppnå?</li><li>Enighet om hypotese for fremtidig situasjon, dvs. hva er første “target condition” vi skal eksperimentere for å nå?</li></ol><p>Hva som kan være et “neste steg” eller eksperiment varierer etter hva slags delmål man jobber mot. Eksempler vi så underveis i arbeidet:</p><ul><li>En kartleggingsjobb, f.eks. måle størrelsen på problemet, prosesskartlegging, rotårsaksanalyse.</li><li>Administrative ting, f.eks. finne teammedlemmer, innkalle workshops, forberedelser.</li><li>Test av en ny løsning, herunder planlegging, gjennomføring, måling av resultater.</li></ul><p>Alle slike steg kan betraktes som eksperimenter hvor det kan være noe å lære, enten om selve problemet som skal løses eller om problemløsningsmetodikken.</p><h4>Oppsett og gjennomføring</h4><p>I eksperimentet ble tre deltakere coachet. Dette var medarbeidere som skulle lede hvert sitt problemløsningsarbeid sammen med et A3-team. Felles for teamene var at forbedringsarbeidet fokuserte på hvordan de kunne gjøre utviklingsprosessene sine mer effektive. Underveis var det en av deltakerne som måtte prioritere bort forbedringsarbeidet, og avbrøt derfor også deltakelsen i eksperimentet. <em>Coachen </em>i Coaching Kata-samtalene var deltakernes leder og <em>eier </em>av problemene som skulle løses. Artikkelforfatterne fungerte som <em>2nd coach</em>, og var med og observerte samtalene og ga tilbakemeldinger til coachen underveis.</p><p>Møtene ble kjørt en gang i uka, med 20 minutter til hver deltaker. Disse ble lagt rett etter hverandre, slik at coachen hadde satt av en time pr uke i sin kalender for de tre deltakerne. Møtene ble kjørt på Teams fordi deltakerne befant seg på ulike steder. Hvis vi skulle kjørt fysiske møter, ville vi ønsket å samle oss rundt en fysisk tavle, mens på Teams viste deltakerne fram sitt arbeid på en digital tavle eller i PowerPoint.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/778/1*gRzFtG4C_GGRqY7jMQMAUg.png\" /><figcaption><em>Kilde: Toyota Kata Practice Guide</em></figcaption></figure><h4>Hva lærte vi?</h4><p>Underveis i det 5 måneder lange eksperimentet ble tre retrospektiver gjennomført. Nedenfor presenteres de tydeligste læringspunktene fordelt på positive opplevelser og muligheter for forbedring.</p><p>I stort erfarte deltakerne Coaching Kata som et <strong>effektivt møtepunkt med høy verdi</strong>. Samtalene tok mellom 7 og 20 minutter, og skapte nyttig dialog mellom leder/coach og medarbeider. Her kom lederen nærmere problemstillingen teamet arbeidet med gjennom løpende involvering. Videre bidro Coaching Kata-strukturen til flyt i samtalen og til at man i stor grad pratet om rett ting: Hva har vi lært siden sist og hva skal vi gjøre framover for å lære mer? Arenaen ble ikke opplevd som et klassisk statusmøte. I stedet la de hyppige møtene til rette for dialog og tilbakemeldinger som ga medarbeiderne et “puff for fremdrift” som de opplevde positivt. Samtidig bidro strukturen i samtalen til at lederen fikk trene på og forsterke et mønster for coachende ledelse. Visualisering av arbeidet ble vurdert som svært nyttig for fokuset i samtalen.</p><blockquote><em>«Som A3-eier gir slike samtaler langt mer involvering enn vanlig, og med minimal bruk av tid»</em></blockquote><blockquote>- Leder og coach i eksperimentet</blockquote><p>Et punkt deltakerne tidlig kjente på var hvordan man kunne<strong> stille riktig forberedt </strong>til samtalene. Kvaliteten og lengden på de første iterasjonene varierte en del. Ved tydeligere fokus på hvorfor visualisering av arbeidet var viktig, kombinert med sterkere forpliktelse til å stille forberedt, økte kvaliteten på møtene samtidig som tidsbruken ble redusert. Vi mener nå at en innkalling på 15 minutter skal være nok.</p><p>En annen utfordring i starten av eksperimentet var at <strong>sparring med 2nd coach på A3-tekniske spørsmål </strong>ble til hinder for gjennomføring av Coaching Kata-syklusen. For å avverge dette problemet ble møteagendaen oppdatert med en eksplisitt rekkefølge for innholdet, der Coaching Kata stod først på kjøreplanen, mens A3-teknisk sparring var mulig når det var tid til overs. Med dette grepet ble det tydelig for alle involverte at Coaching Kata-spørsmålene hadde prioritet.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZvOvf5fZ9l2hg2Qq\" /><figcaption><em>Utklipp fra retrospektiv-tavle for eksperimentet</em></figcaption></figure><p>Et tredje hinder under den første fasen av eksperimentet var at <strong>2nd coach brøt ut av sin observatørrolle </strong>for å ta aktivt del i samtalen. Da vi ble oppmerksomme på denne utfordringen, fokuserte 2nd coach mer på aktiv lytting, ble mer oppmerksomme på egen iver etter å delta, og overlot samtalen til de øvrige deltagere. At A3-teknisk sparring ble plassert etter Coaching Kata-syklusen gjorde det også enklere å overholde rollefordelingen.</p><p><strong>Ukesrytmen</strong> for samtalene fungerte bra for deltakerne. Behovet varierte dog underveis, da det ikke alltid hadde skjedd så mye som man følte var verdt å diskutere. Andre ganger kjente man på at det kunne være nyttig å ha muligheten for flere samtaler i løpet av en uke. Selv om kadens ble diskutert underveis i forsøket ble det ikke foretatt justeringer på oppsettet.</p><h4>Observasjoner fra 2nd coach</h4><p>Ut over erfaringene som er beskrevet over, observerte vi som 2nd coacher at fremgangsmåten med de fem spørsmålene muliggjorde en form for <strong>situasjonsbestemt ledelse</strong>, der hver enkelt medarbeider fikk sparring ut fra hvor man befant seg i problemløsningen. Vårt inntrykk var at coachen benyttet spørsmålene godt, og fikk fram elementer som kanskje ikke ville ha kommet fram i en mer tradisjonell dialog om status. Blant annet observerte vi at coachen så bort fra flere forsøk på å starte samtalene med å liste opp aktiviteter man hadde lagt bak seg, og i stedet vennlig oppfordret til å starte møtet med en beskrivelse av hvilket delmål man fokuserte på, etterfulgt av detaljert <strong>refleksjon </strong>over det siste steget man hadde vært gjennom. En annen fordel med oppsettet av samtalen var muligheten for rask feedback fra 2nd coach rett i etterkant av Coaching Kata-sesjonen, med denne friskt i minne.</p><blockquote><em>“Being a good coach is essential to being a good manager and leader. Coaching is no longer a speciality; you cannot be a good manager without being a good coach.”</em></blockquote><blockquote><a href=\"https://www.amazon.com/Trillion-Dollar-Coach-Leadership-Playbook/dp/0062839268\">-Trillion Dollar Coach: The Leadership Playbook of Silicon Valley’s Bill Campbell</a></blockquote><h4>Effektiv arena for coachende ledelse</h4><p>Det kan ta tid å snu mentalitet fra status-rapportering til læringssløyfe. Erfaringen fra vårt lille eksperiment var at samtaleverktøyet traff godt ved behov for en mer coachende tilnærming til ledelse. To klassiske grøftekanter, “set &amp; forget” preget av alenegang, og sporadisk reaktiv statusrapportering, ble unngått. Både lederen og medarbeiderne i eksperimentet synes Coaching Kata fungerte godt til formålet om dialog og forankring underveis, samtidig som samtalene tok lite tid og ga positiv effekt på selve forbedringsarbeidet.</p><p>Uavhengig av problemløsningsmetode er det kanskje flere som kjenner seg igjen i en situasjon der dialog med en opptatt leder blir flaskehals for fremdrift på problemet man jobber med? Samt ledere som opplever at med covid-pandemien og fremveksten av hybridkontoret har det blitt vanskeligere å finne naturlige arenaer for samhandling med folkene man leder? Hvis man kjenner på en slik utfordring tror vi Coaching Kata kan være et interessant alternativ å teste ut.</p><p><strong>Skrevet av:<br></strong><a href=\"https://medium.com/u/c6901aa01e06\"><strong>Ragni Ryvold Arnesen</strong></a><strong><br></strong><a href=\"https://medium.com/u/e05b2b496862\">Kristoffer Berg</a></p><h4>Referanser</h4><p><a href=\"https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238\"><em>Toyota Kata: Managing People for Improvement, Adaptiveness and Superior Results</em></a>, Mike Rother.</p><p><a href=\"https://www.amazon.com/Toyota-Kata-Practice-Guide-Practicing/dp/1259861023\"><em>The Toyota Kata Practice Guide: Practicing Scientific Thinking Skills for Superior Results in 20 Minutes a Day</em></a>, Mike Rother.</p><p><a href=\"https://www.amazon.com/Understanding-A3-Thinking-Component-Management/dp/1563273608\"><em>Understanding A3 Thinking: A Critical Component of Toyota’s PDCA Management System</em></a>, Durward K. Sobek II and Art Smalley.</p><p><a href=\"https://www.amazon.com/Managing-Learn-Management-Problems-Agreement/dp/1934109207/\"><em>Managing to Learn: Using the A3 Management Process to Solve Problems, Gain Agreement, Mentor and Lead</em></a>, John Shook and Jim Womack.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2aaf0229c46a\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/coachende-ledelse-med-fem-sm%C3%A5-sp%C3%B8rsm%C3%A5l-2aaf0229c46a\">Coachende ledelse med fem små spørsmål</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Kristoffer Berg"}},{"node":{"title":"Speed up your Multi Module Maven Builds with turbo-maven-plugin","link":"https://medium.com/sparebank1-digital/speed-up-your-multi-module-maven-builds-with-turbo-maven-plugin-4be0eb2a2601?source=rss----e3c741b0efee---4","content":{"encoded":"<p>Fast feedback makes us happy. So if you are only looking for how to speed up your multi module build as fast as possible, go straight to <a href=\"https://github.com/sparebank1utvikling/turbo-maven-plugin\">turbo-maven-plugin</a>.</p><p>If you want to know more about why, and also how turbo-maven-plugin works, please keep on reading.</p><p>The reason we are happy when we get fast feedback, is that it triggers the production of dopamine in our bodies. Dopamine is a happiness drug we can give ourselves for free. This is a smart thing to do as often as possible — it makes us happy.</p><p>In addition to making us happy, fast feedback makes us deliver value faster. This not only feels good, it is also good for our team and the place we work.</p><p>When working with Kotlin and Java, feedback from building our apps, is something we need often. Where I work, we code and run our tests in IntelliJ. As soon as we want to move the change to production, we normally build the app locally with Maven before pushing the code, to see that the tests run as they should, and that everything is working fine.</p><h3>A Multi Module Maven repository with 250 applications</h3><p>We have our 250+ apps in a monorepo. The monorepo is one multi module Maven repository, where everything is on head all the time. When we build our app, we build both the app itself, and all the modules that it depends on.</p><p>This is why it is important for us to build smart.</p><p>A typical app builds and runs all tests for itself and its dependencies in 2–3 minutes. This is a long time to wait, so we started looking for a way to get faster feedback.</p><figure><img alt=\"A multi module Maven build with a change in one of the modules.\" src=\"https://cdn-images-1.medium.com/max/768/1*IhIb55tHdb5WSw_ZEtH2cg.png\" /><figcaption>A multi module Maven build with a change in one of the modules.</figcaption></figure><p>We quite often have a code change in a module the app depends on.</p><p>It is possible to ask Maven to build only the modules that we want, using the <em>— projects &lt;list of projects to build&gt;</em> argument, and building from the root pom. This is faster than building all required dependencies with <em>— also-make</em>.</p><p>Using a maven command with <em>— projects</em> requires both mental capacity and finger acrobatics on the command line, so we seldom do this. We rather build with variants of <em>cd</em> in and out of modules and <em>mvn clean install</em>, hoping that we have built everything that needs to be built. Or we build everything to be sure.</p><h3>Building only what needs to be built</h3><figure><img alt=\"A multi module Maven build with a change in one of the modules. We only need to build this module and the modules depending on it.\" src=\"https://cdn-images-1.medium.com/max/798/1*xhqIVS1Q_fEti2WtfeERpQ.png\" /><figcaption>A multi module Maven build with a change in one of the modules. We only need to build this module and the modules depending on it.</figcaption></figure><p>We only want to build what needs to be built, without having to hand code a special Maven command for every change we do. Both Bazel and Gradle knows how to do this.</p><p>There are several strategies here, and all we have seen, is based on analysing what files have changed, then making scripts or programs calculating what modules the changes reside in, and then create a Maven command that builds these modules.</p><p>We have created a Maven plugin helping us with just that. It is called<strong> turbo-maven-plugin</strong>.</p><h3>How does turbo-maven-plugin work?</h3><p>turbo-maven-plugin is based on the same strategy, that is analysing what modules have changes in their source code, and then build only these modules, and the modules depending on them.</p><p>For every module, the plugin looks for a file containing one row per source code file in the module. A row contains the name of the source code file and a checksum of the contents of the file.</p><p>If it doesn’t find a file for a module, it creates it, and puts it in the the module’s directory in the local m2 repo. It does this for all modules that is required for building the app, and also the app itself.</p><p>If we build again, without changing anything, nothing will be built, since all the checksums are the same.</p><p>If we do a change, the plugin will first get the complete list of modules that needs to be built from the Maven Reactor. This is the the app itself, and all its dependencies. For each module, it compares the checksum for each source code file in the module, with the checksum in the file in the m2 repo. If the checksums are the same, the plugin removes the module from the list.</p><p>For the modules that have changes, we make sure we also add the modules that are dependant on them. In pseudo code, it looks like this:</p><pre>//Find changed modules:<br>modulesToBuild = modulesFromMaven.filter(isModuleChanged())</pre><pre>//Find the modules dependent on the changed modules:<br>modulesToBuild.forEach(module -&gt; downStreamProjects.add(module.getDownstreamProjects()))</pre><pre>//Return the distinct set of modules to build:<br>return modulesToBuild.addAll(downStreamProjects).removeDuplicates()</pre><h3>How do we use the turbo-maven-plugin?</h3><p>The plugin is defined in our root pom, and is disabled by default, so that Maven behaves normally for everyone when using regular Maven commands:</p><pre>&lt;plugin&gt;<br>    &lt;groupId&gt;no.sparebank1&lt;/groupId&gt;<br>    &lt;artifactId&gt;turbo-maven-plugin&lt;/artifactId&gt;<br>    &lt;version&gt;${turbo-maven-plugin.version}&lt;/version&gt;<br>    &lt;extensions&gt;true&lt;/extensions&gt;<br>    &lt;configuration&gt;<br>        &lt;enabled&gt;false&lt;/enabled&gt;<br>        &lt;ignoreChangesInFiles&gt;swagger.json&lt;/ignoreChangesInFiles&gt;<br>        &lt;alwaysBuildModules&gt;distribution&lt;/alwaysBuildModules&gt;<br>    &lt;/configuration&gt;<br>&lt;/plugin&gt;</pre><p>We have a tool, that really is just a structured collection of scripts, called <em>bob</em>. When we want to build an app, we run <em>bob mvn build</em> from the app root. This command actually does this:</p><pre>mvn -T4 -f &lt;path-to-the-root-pom&gt; --projects &lt;path-to-the-app-pom&gt; --also-make -Dturbo.enabled=true clean install</pre><p>But that is something our developers don’t have to think about.</p><p>With this, we have cut the average app build time in half, from 2–3 minutes to 1–2 minutes. We have also reduced the cognitive load of our developers. They don’t have to think about what modules need to be built anymore. They just run <em>bob mvn build</em>, and Maven and maven-turbo-plugin take care of the rest.</p><p>If you want to try the plugin, it is on <a href=\"https://search.maven.org/artifact/no.sparebank1/turbo-maven-plugin\">Maven Central</a>, and you find both source code and pom configuration on the <a href=\"https://github.com/sparebank1utvikling/turbo-maven-plugin\">turbo-maven-plugin’s home page</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4be0eb2a2601\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/speed-up-your-multi-module-maven-builds-with-turbo-maven-plugin-4be0eb2a2601\">Speed up your Multi Module Maven Builds with turbo-maven-plugin</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Vidar Moe"}},{"node":{"title":"Fra agile team til agil organisasjon: Slik jobber vi agilt i SpareBank 1 Utvikling","link":"https://medium.com/sparebank1-digital/fra-agile-team-til-agil-organisasjon-slik-jobber-vi-agilt-i-sparebank-1-utvikling-b3cb65d1379?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TkMAfkITFirsPyQYiiR9Ow.jpeg\" /></figure><h4>For 10 år siden skjønte vi i SpareBank 1 Utvikling at vi måtte gjøre noe annerledes. Flere års dedikert arbeid hadde resultert i en monolitt av en løsning. Men tiden, teknologien og forventningene fra kundene hadde endret seg. Vi måtte rett og slett begynne å tenke annerledes.</h4><h4>Rettere sagt — vi måtte begynne å tenke agilt. Det ble starten på vår agile reise.</h4><p>I 2013 begynte vi å dele opp monolitten. Bit for bit. Ikke bare var kravene fra kundene og teknologien endret, men leveransemodellen vår i SpareBank 1 Utvikling begrenset muligheten til å levere det vi ønsket.</p><p>Vi endret arkitektur og teknologi, og etablerte tverrfaglige utviklingsteam. Vi begynte også det året å måle T2M og omfanget av endringene vi klarte å skape.</p><p>Grepene hadde enorm effekt:</p><ul><li>I dag har vi 25 forskjellige utviklingsteam som blant annet jobber med mobilbanken og nettbanken.</li><li>Kundetilfredsheten går oppover, og vi opplever økt salg gjennom de digitale kanalene.</li><li>Innovasjonstakten har aldri vært høyere. Antall dager fra produksjonsstart til ferdig utviklet løsning gått fra over 50 dager til å kunne gjøre løpende produksjonssettinger på bare noen timer eller dager.</li><li>Høy endringsevne har gitt mulighet for å kunne jobbe datadrevet for å forbedre kundeopplevelser, fjerne hindringer og å øke salget.</li><li>Større grad av måloppnåelse gir høyere medarbeidertilfredshet.</li></ul><p>Lignende suksesshistorier og veien dit kan du høre mer av fra andre norske utviklingsmiljøer i NAV, Skatteetaten, FINN, Vipps og flere andre dyktige og forbilledlige organisasjoner. Men, jeg har den senere tiden stilt meg et spørsmål:</p><blockquote>For til tross for de strålende resultatene på de endringsreisene vi har gjort med agile team, er vi en agil organisasjon?</blockquote><p>Og har det egentlig noe å si?</p><p>Jeg deler mine tanker her. Og, jeg har lyst til å høre dine. I kantina, innboksen eller kommentarfeltet.</p><p><strong>Hvorfor agilt?</strong></p><p>Før vi diskuterer agil organisasjon, er det nødvendig å spørre seg selv hvorfor et selskap skal jobbe agilt og å være en agil organisasjon.</p><p>Hvis svaret er at man skal fremstå som en moderne organisasjon og tiltrekke seg nye medarbeidere, er det i og for seg bra og viktig, men det holder ikke som grunn alene.</p><p>Jeg mener man må ha et mer gjennomgripende og grunnforankret forretningsmessig perspektiv om hvorfor man skal være en agil organisasjon. I SpareBank 1 Utvikling var det som nevnt innledningsvis så enkelt — og så vanskelig­ – at vi ikke fikk produsert alle tjeneste og produktene som ønsket. Vi rakk heller ikke å gjøre endringer raskt nok. Vi slet rett og slett med å skape verdi for selskapet og kunden når vi ønsket det.</p><p>Med andre ord, vi hadde ikke nok fart i utviklingsarbeidet.</p><p>I manifestet til agil arbeidsmetode, som du kan lese på agilemanifesto.com, står det tydelig hva man skal gjøre for og med smidig programvareutvikling. I fare for å repetere det som står der, vil jeg gi et innblikk i hvordan vi selv har tolket og adoptert den agile måten å jobbe på hos oss.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7yqxa2TY634pZY6CP_Yfpw.jpeg\" /></figure><p><strong>1. Vi har fart</strong></p><p>Fart og skalerbarhet er et helt sentralt fundament i agil utvikling. Det å ha evnen til å utvikle raskt har enorme fordeler for et selskap. Men, det krever også enorme endringer. Siloer må brytes ned, og nye tverrfaglige team må etableres. Prosesser må revideres og optimaliseres. Og under alt dette må det være en teknologi og arkitektur som bidrar til at teamene kan jobbe parallelt og minst mulig avhengig av hverandre.</p><p>Alt for å først og fremst oppnå én ting; fart.</p><p>Mine dyktige medarbeidere i SpareBank 1 Utvikling har publisert flere artikler om hvordan vi har gjort dette. De kan du lese mer om på <a href=\"https://sparebank1.dev/\">sparebank1.dev.</a></p><p><strong>2. Vi har kunden og forretningsfokus i sentrum</strong></p><p>Fart alene løser ikke kunde- eller forretningsbehov. Det krever tydelige ambisjoner og målsetninger. Målstyring er et sentralt grep og en forutsetning for selvgående, tverrfaglige team som jobber i høy fart.</p><p>Kort forklart er det en strategisk retning som brytes ned i ambisjoner og deretter ned i ulike mål som kan følges opp av de ulike teamene.</p><p>I fastsettelsen av ambisjoner og mål må grensene mellom forretningssiden og IT brytes ned. Med det mener jeg at det er eierne av forretningsbehov som eier målene. Disse har igjen flere produkteiere og produktledere til å hjelpe seg.</p><p>Men disse forretningsbehovene kan også kreve endringer i arkitektur, datafangst, infrastruktur og dataanalyse.</p><p>Teknologimiljøene må derfor også være tett på eieren av forretningsbehovene. Tilsvarende gjelder de som jobber med at teamene til enhver tid er best rigget for de endringene som må gjøres.</p><p>Dette høres kanskje enkelt ut, men det å bryte ned en strategisk retning til tydelige mål, uavhengig av silo, er vanskelig. Samtidig er det helt avgjørende for å få ønskede resultater. Over tid vil det skape for mye friksjon hvis forretning og IT jobber for separat.</p><p><strong>3. Vi har topplederforankring</strong></p><p>Å fjerne grensene mellom forretningssiden og IT er kun mulig med en tydelig topplederforankring. Det vil alltid, og særlig i større organisasjoner, være behov for å sette opp styringsstrukturer og tydelige ansvarsområder. I tillegg er det viktig at lederne ser hverandres bidrag for å nå selskapets mål.</p><p>Det vil i dette oppstå ulike vurderinger om hva som er riktig å gjøre og hva som er balansen mellom forretningsmål og etablerte retningslinjer et selskap har av blant annet regulatoriske grunner.</p><p>Styrken i en organisasjon handler ofte om hvordan man klarer å navigere effektivt og uten for mange konflikter når det som er riktig å gjøre ikke alltid er helt rett frem. I dette blir topplederforankringen på felles mål, retning og arbeidsform avgjørende for å bidra til å komme frem til gode løsninger og ikke større avstand.</p><p>Overgangen fra en mer tradisjonell organisasjon til en mer agil organisasjon er stor. Eksempler på kjente smertepunkter er endringer i løsninger og prosesser, etablere tydelig ansvarsdeling og rolleforståelse, fordeling av midler og kapasitet, samt både faktisk og opplevd styring og kontroll.</p><p>Det er med andre ord mange mulige grunner til at overgangen blir vanskelig. En sterk topplederforankring er sannsynligvis helt nødvendig for å lykkes godt.</p><p>Avslutningsvis må et positivt menneskesyn der trygghet og tillit gjennomsyrer hverdagen ligge i bunn. Det blir ikke fantastiske resultater av frykt, forsiktighet og å holde seg til sin lille del av løsningen og ikke oppleve en trygghet til å utfordre det eksisterende på en god måte. Man må tro på at man er bedre sammen med andre og at man hele tiden lærer. Den kulturen må ligge til grunn i et selskap.</p><p><strong>Så, er vi en agil organisasjon, eller er vi «bare» agile team?</strong></p><p>Kanskje en liten brannfakkel til slutt: Å jobbe agilt og å være en agil organisasjon kan skape fantastiske resultater, men det er ikke alltid verken forutsetningene er på plass eller at det er riktig å jobbe agilt i form av ulike smidige metoder.</p><p>I SpareBank 1 Utvikling har vi særlig erfart det ovenfor leverandører som jobber tradisjonelt med kravspesifikasjoner og større <em>releaser.</em> Dette gjelder særlig når det er større fagsystem med kompliserte forretningsregler som skal endres. Da kreves det andre typer av prosesser. En agil organisasjon må derfor også kunne tilpasse metodene som benyttes for å kunne håndtere sine omgivelser.</p><p>Størrelse på organisasjonen har mye å si. Jo mindre organisasjon desto mindre avstand, ofte mindre <em>legacy </em>og færre leverandører skal håndteres. Mange av momentene over blir enklere å håndtere i mindre selskap, men det er viktig å ha en forståelse av om selskapet vokser mye under en periode.</p><p>Agil utvikling og arbeid med agile organisasjoner krever kontinuerlig forbedring. Det vil være stadig nye problemstillinger som krever en kontinuerlig endringsevne og å kunne være tilpasningsdyktig.</p><p>Merk at kontinuerlig forbedring kan fort bli for operativ. Vi kan ikke bare jobbe med selve løsningene, vi må også kontinuerlig forbedre prosesser, metoder og ikke minst organisering. Derfor blir punktene om verdiskapning, målstyring og topplederforankring igjen viktige for å sikre at forbedringene går langs de rette aksene.</p><p>Jeg tror vi i SpareBank 1 Utvikling er nære å kunne si at vi er en agil organisasjon, men vi er ikke i mål.</p><p>Det dukker hele tiden opp nye temaer som må jobbes med. Fokus i tiden fremover er å få teamorganisasjonen til å bli enda tydeligere knyttet til forretningsområdene og linjeorganisasjonen og tilhørende ansvarsgrenser.</p><p>Ordtaket «behovet for endring er det eneste som er konstant» oppsummerer det godt.</p><p>For hva som kommer rundt neste sving må vi se på da.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b3cb65d1379\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/fra-agile-team-til-agil-organisasjon-slik-jobber-vi-agilt-i-sparebank-1-utvikling-b3cb65d1379\">Fra agile team til agil organisasjon: Slik jobber vi agilt i SpareBank 1 Utvikling</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Espen Kjølberg"}},{"node":{"title":"Parprogrammering for flyt og fokus","link":"https://medium.com/sparebank1-digital/parprogrammering-for-flyt-og-fokus-31341b372c63?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*w0DAvxk7DH2pfQoWwhXQhg.png\" /></figure><p>(Dette er en oppfølging artikkelen <a href=\"https://medium.com/sparebank1-digital/hvordan-vi-fikk-h%C3%B8yere-fart-med-hyppige-prodsettinger-og-parprogrammering-4e08ec505c54\"><em>Hvordan vi fikk høyere fart med hyppige prodsettinger og parprogrammering</em></a><em>)</em></p><p>Det er noe rart med parprogrammering. Det er en gammel teknikk som er godt kjent og respektert blant utviklere, men som likevel er lite brukt.</p><p>Hvis jeg spør, opplever jeg at de fleste er positive til parprogrammering. Spørreundersøkelser hos oss i SpareBank 1 Utvikling viser stor interesse og at de fleste vil parprogrammere mer enn de gjør i dag. Kompetansedeling, læring og at det er sosialt scorer høyt på undersøkelsene.</p><p>Likevel er det få som gjør det, selv hos oss. <a href=\"https://martinfowler.com/articles/on-pair-programming.html\">Vi kan også lese om samme type utfordringer andre steder</a>. Hvorfor? Vi ser er at dette går igjen når man spør hvorfor vi ikke parprogrammerer:</p><ul><li>To kan heller jobbe i parallell med oppgavene fordi de vet hvordan de skal løse det hver for seg</li><li>Vi bruker det bare på vanskelige problemstillinger</li><li>Vanskelig på hjemmekontor</li><li>Vi trives best med å jobbe alene</li><li>Vi hjelper hverandre heller litt underveis, og tar resten i Pull Requests</li><li>Vi vet ikke helt hvordan vi kommer igang</li><li>Vi er redd for å blottlegge oss, redde for å dumme oss ut</li><li>Vi ser ingen umiddelbar effekt</li></ul><h4>Flytsonen</h4><p>Flyt. Vi har alle vært der, men jeg tror at for oss utviklere er det spesielt. Å være i flyt er fantastisk. <a href=\"https://en.wikipedia.org/wiki/Flow_(psychology)\">Etter litt arbeid med en oppgave glemmer du tid og sted, og konsentrasjonen blir ekstra høy</a>. Du får opp en god del av kodebasen i hodet, og vet hele tiden neste steg før du har utført det. Fingrene flyr over tastaturet. Nye ideer popper lettere opp en vanlig. Du har fokus. Du er motivert. Og ikke minst, du får gjort masse.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/349/1*OwkwQjiKk9zoUK9O06Tjyw.png\" /></figure><p>De dagene jeg har vært mye i sonen, er de dagene jeg går ut av kontoret med et smil om munnen. Kone og barn får en bedre mann når jeg kommer hjem, og jeg har mer overskudd. Jeg flyr gjennom skogen på løpeturene mine. Jeg sover godt.</p><p>Så da er spørsmålet: Burde ikke vi utviklere etterstrebe denne tilstanden mest mulig av tiden?</p><h4>Har du to minutter?</h4><p><a href=\"https://slack.com/\">Slack</a> er fantastisk, det mener jeg. Vi har nesten sluttet med e-post, vi har alle ansatte tilgjengelige på et blunk og vi jobber asynkront over en lav sko. Mye blir løst raskt uten at vi trenger å sette opp egne møter for det.</p><p>Men det har en pris.</p><p>For hva skjer når du sitter midt inni denne gode flyten, og det plutselig dukker opp popup fra Slack med teksten “Har du to minutter?”</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/492/1*MUSLYmcpj5bXCiDp9wucnw.png\" /></figure><p>I det du går inn på Slack, så ser du også andre kanaler som lyser som et juletre. Du blir interessert, leser noen tråder og forsvinner enda lenger bort fra det du egentlig holder på med.</p><h4>Utviklere er ikke datamaskiner.</h4><p><a href=\"https://arxiv.org/pdf/2208.12454.pdf\">Forskning viser at det tar ca 15 minutter fra man blir avbrutt</a> til man kommer tilbake der man var i konsentrasjonen.</p><p>Når du går tilbake for å jobbe videre, vil du også automatisk tenke på det du ble avbrutt av, og flyten blir enda verre å komme tilbake til.</p><p>Resultatet? Du får gjort mindre av det du hadde planlagt, og er mest sannsynlig mindre fornøyd etter arbeidsdagen.</p><h4>Parprogrammering som verktøy for flyt</h4><p>Det er så kraftig og så enkelt. Når to sitter sammen og jobber på en oppgave så blir det fullstendig unaturlig at den andre skulle sjekke e-post, Slack, nettaviser, mobilen og andre ting.</p><p>En<strong> sesjon med parprogrammering kan betraktes som et tradisjonelt møte</strong>. Sesjonen legges inn inn i kalenderen for å vise til andre at her er du og den du jobber sammen med er opptatt. Og slik får dere fullt fokus.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*rt4R0ICZIx5_wdzFjpQoMQ.png\" /><figcaption>Test gjerne med to tastatur mot samme maskin når man parprogrammerer</figcaption></figure><p>Men hva med alle meldingene på Slack? Og alt annet som krever tiden din?</p><p>Vi tar avtalte pauser ca. annenhver time der vi svarer opp andre meldinger, og vi parprogrammerer heller ikke 7.5 timer om dagen, fem dager i uka. Vi setter av tid til slakk, fordi vi vet det dukker opp uforutsette hendelser hver eneste uke. Og vi liker å hjelpe andre.</p><h4>Hvordan kommer du igang</h4><p>Start med å planlegge dagen med den du skal jobbe sammen med.</p><p>Slik kan en dag se ut. Jeg har en avtale hos legen og en workshop, Ola har et personalledermøte. Men merk at <strong>selve oppgaven har lite fri, den får full fokus og fart hele dagen</strong>. Og man får jobbet litt alene også, selv de mest ivrige parprogrammererne liker det iblant.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*W5fN0eCurAnJ7mWH1mKRbA.png\" /><figcaption>Selv om man har litt forskjellig agenda, får oppgaven fokus hele dagen</figcaption></figure><h4>Ferie og oppgaver på vent</h4><p>Vi har opplevd at når folk jobber alene, drar på ferie eller blir syke, så blir oppgaven satt på vent til de er tilbake<em>.</em> Med <strong>parprogrammering kan den andre parten fortsette arbeidet</strong>, og lett rulle på andre utviklere.</p><p>Og hva blir effekten av dette?</p><ul><li>Oppgaven blir <strong>raskere ferdig målt i kalendertid</strong></li><li><strong>Trikkefaktor blir betydelig redusert</strong> og vi får høy grad av kunnskapsdeling. Flere kan kodebasen, mindre superhelter som eier hver sin applikasjon, mindre av “den der har Ola jobbet mest med”</li><li><strong>WIP</strong> (work in progress) reduseres, vi gjør ferdig oppgaven før vi starter noe nytt</li></ul><h4>Dobbel flytsone</h4><p>Tilbake til flytsonen. Vi er nå to utviklere som konsentrerer oss 100% om en oppgave og går inn i flyt. Hvilke konsekvenser får dette? Utviklerne har ofte litt ulik kompetanse, erfaring og måter å se oppgaven på. Man utfyller hverandre og slik oppnår man høyere fart, mindre avbrudd og bedre kvalitet. Og pull requests? De blir ofte overflødige, vi er ferdig diskutert lenge før koden kommer dit. <a href=\"https://medium.com/sparebank1-digital/hvordan-vi-fikk-h%C3%B8yere-fart-med-hyppige-prodsettinger-og-parprogrammering-4e08ec505c54\">Og vi prodsetter hele tiden.</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6reOSg5aNO_ZTrWj4LIqTA.png\" /><figcaption>To utviklere med litt forskjellig erfaring kan ofte komme frem til solide løsninger i et større tempo</figcaption></figure><h4>Mye av bittelitt istedenfor bittelitt av mye</h4><p>Har du noen gang pratet med en som har møtt veggen?</p><p>Du vil ofte høre at “det ikke var en ting, det var summen av alt”. Jeg opplever at de mest stressa og slitne folka på jobben, er de som driver med for mye samtidig. De som ikke klarer å si nei. Dette resulterer ofte i tidspress, lite fokus og til slutt går det utover kvaliteten på det som blir gjort. WIP (work in progress) blir for høy.</p><p>Planlegger man at oppgavene skal <strong>gjøres med samarbeid og parprogrammering, setter man automatisk ned WIP</strong>. Slik planlegger man altså inn fokus, får bedre flyt og vår erfaring er at vi får gjort mer med skikkelig kvalitet. Dette øker motivasjonen, og motiverte utviklere kan få til hva som helst.</p><p>Jeg skrev at de dagene jeg gikk mest fornøyd ut fra kontoret, var når jeg har vært i flyt. Men så hørte jeg kollega <a href=\"https://medium.com/u/c62b9f6d6d07\">Stian Conradsen</a> si at de dagene han gikk hjem og var mest fornøyd, var de dagene han hadde parprogrammert. Hvorfor? “Det er de dagene jeg får gjort mye”, svarte Stian.</p><p>Mest sannsynlig kan du sjekke av dette etter en dag med parprogrammering. Du har:</p><ul><li>Opplevd høy kompetansedeling</li><li>Hatt gode tekniske diskusjoner</li><li>Fått fokus og jobbet med bare en sak om gangen</li><li>Vært sosial med en eller flere kollegaer</li><li>Fått gjort mye, og gjort det skikkelig</li></ul><h4>Så hvorfor parprogrammerer ikke alle hele tiden da?</h4><p>Jeg tror det er sammensatt, men den største faktoren virker å være at det er vanskelig å komme igang.</p><p>Og jeg kan merke det selv noen ganger. Det er mye enklere å bare komme til plassen sin, sette seg ned og begynne å kode på sin oppgave i sitt eget tempo. Ingen som forstyrrer, du kan dypdykke, svare på Slack, prate med kollegaer og jobbe med det du mener er viktigst og i ditt tempo. Og dette mener jeg vi skal fortsette med også, men ikke hele tiden 5 dager i uka.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8StLI0rOAx0u4p62.png\" /></figure><p><strong>Parprogrammering krever at du retter deg opp i stolen</strong>, konsentrer deg og setter deg skikkelig inn i oppgaven. Det er en intens måte å jobbe på, så ta pauser.</p><h4><strong>Hvor mye skal vi parprogrammere?</strong></h4><p>Ikke legg lista for høyt. Hvis <strong>teamet</strong> <strong>som en start setter av tid til parprogrammering et par dager i uka</strong>, vil det fort ha stor effekt. Et nyttig tips er at det er lurt å <strong>rotere på hvem som jobber sammen</strong>. Dette vil ikke bare gi hver enkelt en bedre hverdag og øke kvaliteten på det som blir levert, men det vil ha en positiv utvikling av kulturen i teamet.</p><p>Har du lest om hva som er best for teambuilding? Det er <a href=\"https://forskning.no/ntnu-arbeid-partner/disse-formene-for-teambygging-har-ingen-effekt/366003\">ikke at de ansatte drar på rafting, paintball eller gokart</a>. Det er at vi prøver å løse en vanskelig oppgave sammen, gjerne over tid. Da får vi tilbakemelding, det er lett å spørre om hjelp og frykten for å gjøre feil blir borte — <a href=\"https://e24.no/karriere-og-ledelse/i/ab7Rn4/slik-faar-du-hybride-team-til-aa-fungere\">teamet får psykologisk trygghet</a>.</p><p>Hva er det som stopper deg fra å komme i gang?</p><h4>Referanser</h4><p><a href=\"https://martinfowler.com/articles/on-pair-programming.html\"><em>On Pair Programming</em></a> fra <a href=\"https://martinfowler.com/articles/on-pair-programming.html\">Martin Fowler’s blog</a>, av Birgitta Böckeler, Nina Siessegger</p><p><a href=\"https://medium.com/sparebank1-digital/hvordan-vi-fikk-h%C3%B8yere-fart-med-hyppige-prodsettinger-og-parprogrammering-4e08ec505c54\"><em>Hvordan vi fikk høyere fart med hyppige prodsettinger og parprogrammering</em></a> av Asgaut Mjølne</p><p><a href=\"https://en.wikipedia.org/wiki/Flow_(psychology)\">Flow (psychology)</a> fra Wikipedia</p><p><a href=\"https://www.monkeyuser.com/2020/pair-programming/\"><em>Tegneseriebilde med parprogrammering</em></a>, fra <a href=\"https://www.monkeyuser.com\">monkeyuser.com</a></p><p><a href=\"https://www.monkeyuser.com/2018/focus/\"><em>Tegneseriebilde av fokus</em></a>, fra <a href=\"https://www.monkeyuser.com\">monkeyuser.com</a></p><p><a href=\"https://forskning.no/ntnu-arbeid-partner/disse-formene-for-teambygging-har-ingen-effekt/366003\"><em>Disse formene for teambygging har ingen effekt</em></a>, fra <a href=\"https://forskning.no\">forskning.no</a> og NTNU</p><p><a href=\"https://e24.no/karriere-og-ledelse/i/ab7Rn4/slik-faar-du-hybride-team-til-aa-fungere\">Slik får du hybride team til å fungere</a> fra e24.no av Nils Brede Moe</p><p><a href=\"https://arxiv.org/pdf/2208.12454.pdf\"><em>What happens to psychological safety<br>when going remote?</em></a> av Anastasiia Tkalich, Darja Smite, Nina Haugland Andersen, Nils Brede Moe. SINTEF, NTNU, Blekinge Institute of Technology</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=31341b372c63\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/parprogrammering-for-flyt-og-fokus-31341b372c63\">Parprogrammering for flyt og fokus</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Asgaut Mjølne"}},{"node":{"title":"Hvordan vi fikk høyere fart med hyppige prodsettinger og parprogrammering","link":"https://medium.com/sparebank1-digital/hvordan-vi-fikk-h%C3%B8yere-fart-med-hyppige-prodsettinger-og-parprogrammering-4e08ec505c54?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IP3SX32yeUomxjlRz_H9iQ.jpeg\" /></figure><p>I november 2021 hadde vi besøk av Terje Heen og Julian Ravn Thrap-Meyer fra NAV. De fortalte hvordan de <a href=\"https://www.linkedin.com/pulse/hver-commit-er-en-ny-deploy-til-prod-del-1-terje-heen/\"><strong>prodsatte mange ganger om dagen</strong></a>. De brukte <strong>ikke annet testmiljø enn produksjon</strong>, de <strong>parprogrammerte alt</strong>, hadde <strong>sluttet med Pull Requests </strong>samtidig som de <strong>opplevde økt kvalitet. </strong>Wow.</p><p>Jeg jobber som utvikler i “Område Hverdagsøkonomi” hos SpareBank 1 Utvikling. Vi har stort fokus på modernisering av plattformen, og de siste årene har vi kunnet prodsette oftere og oftere, gjerne flere ganger i uka. Pull Requests er en sentral del av utviklingsprosessen. Akkurat som hos mange andre selskap.</p><p><strong>Vi ble inspirert av NAV og ønsket å teste ut mer parprogrammering og hyppigere prodsettinger.</strong> Og vi hadde én oppgave foran oss som var perfekt for å akkurat dette.</p><h4>Kjenner du deg igjen?</h4><p><strong>La oss ta et steg tilbake.</strong> Dette er ofte den klassiske måten man jobber med utvikling av et API:</p><ul><li>Du jobber alene på en oppgave i branch som bare vokser</li><li>Mye manuell testing av HTTP-kall i ulike testmiljøer</li><li>Én egen testansvarlig. Du får en rapport på hva som er galt og fikser feilene.</li><li>Underveis ber du teamet om å ikke endre så mye på samme kodebase før man selv har merget til master, det blir så vanskelig å merge. Man blir mer og mer stressa for å bli “ferdig”.</li><li>Du sparer automatisk testing til slutt, og skriver bare tester på en brøkdel-som du også påstår er “den viktige delen”.</li><li>Pull Requesten inneholder mye diskusjoner og meninger, gjerne på smådetaljer som syntaks. Men lite om helheten, og den kan bare du.</li><li>Du er nervøs ved prodsetting. Endringen er med i en release. Denne er full av andre endringer også. Feilsøking blir vanskeligere.</li><li>Det feiler på flere ting ved prodsetting, du har ikke kontroll på hva og det er krise i teamet. Du har høyest puls, det er jo “din” kode.</li><li>I fremtiden kommer alle til deg hver gang det skjer noe i denne delen av koden.</li></ul><p><strong>Så er oppgaven din ferdig, koden er i prod og det fungerer.</strong> Du og teamet ditt blir hyllet fra nært og fjernt. Men i notepad har du en lang liste over ting som må forbedres.</p><p>Men <strong>nå vil produkteieren videre. “</strong>Det funker jo, kundene er fornøyd”, sier han. Er ikke det det viktigste? Du får høre at “forvaltning vil vi alltid ha, og det må prioriteres mot andre viktige ting”<strong>. </strong>Vi kan gjøre det <em>senere</em>.</p><p><strong>Du taper diskusjonen</strong>. Resultatet er splitter ny teknisk gjeld. Hvordan kunne dette vært unngått?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*_DWqtKwE837RnwNj.jpg\" /></figure><h4>Hva må til for å kunne drive med hyppige prodsettinger?</h4><p>For å jobbe med hyppige prodsettinger, kan du ikke bare ha effektiv teknologi og prosesser i teamene. Du må også ha en leder som skjønner hva som skal til. En som har forstått at utviklere ikke er datamaskiner. Og at koden ikke er ferdig selv om funksjonaliteten tilsynelatende er det.</p><p>For å utvikle med høy fart og hyppige prodsettinger nytter det ikke bare å være dyktig ninja-utvikler.</p><p><strong>En sentral del er at du ikke er redd for å endre og prodsette</strong>. Og skal man endre uten å være redd, bør man ha visse mekanismer på plass:</p><ul><li>Kunne utvikle slik at du kan prodsette små endringer om gangen.</li><li>Mulighet for parprogrammering.</li><li>Holde god testdekning.</li><li>Raske bygg på byggserver, gode tilbakemeldinger på feil.</li><li>Enkelt å prodsette og rulle tilbake.</li><li>Bruk av feature toggling og gjerne soft release (canary deploys).</li><li>God logging, monitorering og alarmer</li></ul><p>Det finnes mer avanserte <a href=\"https://newsletter.pragmaticengineer.com/p/shipping-to-production?s=r\">deploy-strategier,</a> og flere selskap i Norge har kommet mye lenger enn oss. Men vi kan vi sjekke av mesteparten her, og det holdt for å teste ut hyppige prodsettinger.</p><h4>Utprøving av hyppige prodsettinger med parprogrammering i oppgaven “Endre kategori”</h4><p>Transaksjoner i SpareBank 1 får i dag satt kategorier på transaksjoner basert på data fra vår maskinlæring. F.eks. at en <strong>transaksjon fra Spotify får kategorien “<em>strømmetjeneste” </em>under <em>“ferie og fritid”</em></strong>. Dette bruker vi til å gi deg en fin inndeling av hva du bruker penger på.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/508/1*-AICx-4Xv9M1_OSILW2ldg.png\" /></figure><p>I enkelte tilfeller <strong>klarer ikke maskinlæringsmodellen å finne kategori</strong>, eller så den feil. Vi ønsket at <strong>kunden selv skulle kunne endre kategori. </strong>Slik ville også maskinlæringsmodellen bli trent og funksjonaliteten bli bedre for kunder alle i fremtiden.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/468/1*mF_Xr4VGNOwJlcUKGx3guw.png\" /><figcaption>Dette skulle vi utvikle. Her har maksinlærignsmodellen ikke fanget opp at Adam og Eva er frisør, og kunden skal kunne endre selv</figcaption></figure><p>Oppgaven inneholdt masse utvikler-snacks:</p><ul><li>Mikrotjeneste for behandling av kategorier sammen med transaksjoner</li><li>Persistering og caching</li><li>Kall på kryss og tvers av interne tjenester, bruk av maskinlæring</li><li>Algoritmer</li><li>Frontend-utvikling og design</li></ul><p>Kodespråk: Kotlin og React</p><h4>Hvordan la til rette for hyppige prodsettinger og parprogrammering</h4><figure><img alt=\"Geir Olav og Bård Kristian parprogrammerer på privat, dyrt nerdetastatur\" src=\"https://cdn-images-1.medium.com/max/1024/1*6q1SPlICuhufW24vlmFzQg.png\" /><figcaption>Geir Olav og Bård Kristian parprogrammerer på et privat, dyrt nerdetastatur</figcaption></figure><ul><li><strong>Parprogrammering, </strong>gjerne med innblanding fra andre. Fysisk eller over Teams/Slack.</li><li><strong>Delte opp funksjonaliteten</strong> i mindre deler. Og delte den så opp enda mer. Hver enkelt del ble prodsatt fortløpende, også deler som ikke var i bruk enda.</li><li><strong>Endringer styres via “Feature toggles”</strong> på f.eks. fødselsnummer. Vi prodsatte fortløpende, men bare for oss selv på teamet. Ble utvidet til flere brukere ved behov.</li><li>Utviklet REST-endepunkter tidlig, men <strong>stubbet APIer, database o.l</strong>. som også ble brukt i produksjon. Slik kunne vi <strong>teste helt spesifikke deler av koden, i produksjon, uten at vi gik ut med for mye samtidig.</strong></li><li>Litt kode om gangen, men alltid med kjærlighet og automatiske tester.</li><li><strong>Ingen egne testere, vi testutvikler </strong>og tester selv konitnuerlig</li></ul><h4>Vi startet midt inni kodebasen</h4><p>Det klassiske ville vært å starte med databasen. Lage det persistente laget, serviceklasser og endepunkter. Og så implementert endringer i andre APIer vi er avhengige av, og til slutt sydd det hele sammen og testet alt på en gang.</p><p>Men vi valgte å snu på dette.</p><p><strong>Vi startet med å utvikle koden som modifiserer transaksjonskategorien</strong>, en liten del langt inni kodebasen. Vi <a href=\"https://martinfowler.com/bliki/TestDouble.html\"><strong>erstattet baksystemer med stubs</strong></a>, til og med selve APIet som skulle lagre kategori-endringen. Og så prodsatte vi det, men bare for min bruker.</p><p>if( socialSecurityNumber.equals(“Asgauts fødselsnummer”)) {<br> // Kall til den nye koden<br>} else {<br> // Kall til gammel kode<br>}</p><p><strong>På denne måten fikk vi testet noe av kjernen av forretningslogikken umiddelbart </strong>og <strong>lærte fortløpende</strong> hva vi videre måtte implementere i andre tjenester.</p><p>Samtidig fikk vi endret kategori på en transaksjon i produksjon og fikk en visuell opplevelse. Og feedback-loopen på endringer var lynrask.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u4rS2H7Guj8N-oMk54dLYQ.png\" /><figcaption>Vår første del av koden så noe sånn ut. Vi laget en ny klassse som modifiserte på transaksjonkategorier feature togglet og stubbet baksystemer</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/620/1*x5QkT_rPiXZjuKBjZdqjXQ.png\" /><figcaption>Første endring i produksjon hvor vi bare endret kategori på én transaksjon, <strong>men kun for min bruker</strong>, med stubbede data fra baksystem</figcaption></figure><h4>Det smalt i produksjon med en gang</h4><p>Selv med denne bittelille endringen smalt det i produksjon. Vi fikk meldinger om rar oppførsel på eksisterende sortering av transaksjoner. <strong>Altså på en del av koden vi rørte, men vi ikke trodde skulle feile.</strong> Dette var enkelt å oppdage, fikse og prodsette — fordi endringen vår hadde vært såpass liten og avgrenset.</p><p>Dette ble også betydelig enklere når vi hadde parprogrammert og begge hadde full kjennskap til endringen.</p><p>Ved å <strong>teste i produksjon </strong>fikk vi altså ikke bare testet vår endring isolert. Vi fikk også <strong>testet hvordan koden vår oppførte seg</strong> <strong>sammen med resten av produksjonsmiljøet</strong>.</p><h4>Vi parprogrammerte på alle endringer</h4><p>Vi jobbet på oppgaven i ca. en måned og endte totalt opp med over 50 prodsettinger før det var live for alle kundene våre.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/838/1*UK420Oa4F94y1G2hkgHyBA.png\" /><figcaption>Utvalg av commits som ble merget og prodsatt, alt parprogrammert</figcaption></figure><p>Mens vi jobbet ble vi stadig bedre på at hver fiks, små refaktoreringer, integrasjoner mot andre system, oppdatering av tester osv. <strong>ble til egne commits som vi merget og vi prodsatte, sammen</strong>. Her nærmer vi oss “ekte” <a href=\"https://www.martinfowler.com/articles/continuousIntegration.html\">Continious Integration</a> slik det orginalt ble beskrevet av Kent Beck.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6Bnz1-buOs3-7YwTI9Yrxw.png\" /><figcaption>Legg merke til deploy8 i gult. Det ble mer naturlig å rydde teknisk gjeld underveis da vi ikke var midt inne i en kjempestor branch</figcaption></figure><h4>Lokalt og så rett i prod?</h4><p><strong>Vi opplever nå en endring i måten vi jobber på</strong>. Og metoden har oppstått uten av vi aktivt har forsøkt å endre oss:</p><p>Vi har <strong>så lite kode som går ut om gangen, med så gode tester, at behovet for å teste i test-miljøer reduseres</strong>. Og ikke nok med det, <strong>vi starter faktisk nesten aldri opp appen lokalt</strong>, ettersom vi får så bra svar gjennom gode automatiske tester.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ztc8JiKSj-N02ylNpxukwg.png\" /><figcaption>Vanlig prosess har blitt: Tester kjører lokalt →merger til master → bygg og test OK på CI Server →ruller ut i prod</figcaption></figure><p><strong>Vi koder med hvilepuls. Vi stoler på tester</strong>, stoler på den gode <strong>gjennomgangen vi får med parprogrammering</strong>, stoler på alarmer. Så lenge byggserver sier OK så går det bare rett ut i produksjon, samtidig som vi opplever mindre og mindre feil.</p><p><strong>Vi opplever veldig lite av “<em>jeg har bare igjen å skrive tester</em>”. </strong>Det er allerede gjort som en del av utviklingen fortløpende og holder nede teknisk gjeld.</p><p>Dette øker farten betraktelig og vi har kontroll.</p><h4>Nå forstår vi hvorfor NAV kunne ta bort Pull Requests</h4><p><strong>Da vi parprogrammerte, ble all koden diskutert og reviewet fortløpende til minste detalj.</strong> Det Pull Requesten derimot ble brukt til, var infodeling til de andre og et verktøy for diff på koden for oss selv.</p><p>Tiden <strong>Pull Requesten lå før den ble merget ble betraktelig redusert</strong>. Det ble mer en teknisk formalitet for compliance vi måtte gjennom for å få koden til master. Vi markerte Pull Requester som vist under, merget umiddelbart når bygg ble grønt, og så kunne resten av teamet se på diff om m vil.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_61MmMojmxOHY9iNZJr9lA.png\" /><figcaption>Opplysning til teamet at vi har samarbeidet, og at vi derfor godkjente Pull Request og merget uten å vente på andre</figcaption></figure><p>Skulle <strong>hele teamet godkjent alle Pull Requests hadde, farten gått betraktelig ned</strong>. Vi hadde også måte avbryte det andre teammedlemmer jobbet med.</p><p>Slik beholder vi fart og flyt i teamet. <strong>Kunnskapsdelingen skjer hovedsakelig gjennom parprogrammering</strong> og rotering på hvem som jobber sammen.</p><h4>Langtidseffekten</h4><p>Vi hører ofte at <strong>man</strong> <strong>må kode på hver sin oppgave for å bli fort ferdig</strong>. I SpareBank 1 Utvikling jobber mange team med <a href=\"https://medium.com/sparebank1-digital/ikke-nok-et-j%C3%A6vla-statusm%C3%B8te-2d72284897c3\">Radical Focus metodikken</a>. Da jobber teamet i ukessykluser hvor man mandag “commiter seg” til å bli ferdig med noe til fredag.</p><p><strong>Men det store produktet Sparebank 1 Digitalbank blir <em>aldri ferdig.</em></strong><em> </em>Vi er ca. 160 utviklere som endrer på kodebasen <em>hver dag. Vi bør tenke langsiktig og på helheten.</em></p><h4>1% forbedring hver dag gjør deg 37 ganger bedre på et år</h4><p>James Clear forklarer i boken “Atomic Habits” at en forbedring på 1% om dagen, vil gjøre at du får en <a href=\"https://jamesclear.com/continuous-improvement\">forbedring på hele 37 ganger over et helt år</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3FlWwpa-5XUy5Ipg0guKmQ.png\" /></figure><p><strong>Med hyppige prodsettinger og parprogrammering </strong>får man<strong> </strong>forbedringseffekten til Clear inn i software utvikling:</p><ul><li>Små endringer gjør at man enklere <strong>kan endre retning og jobbe mer innovativt.</strong></li><li><strong>Kompetanseheving</strong>. Diskusjonene gjennom parprogrammering er som et uendelig kurs i programmering.</li><li><strong>Ingen “min og din kode. </strong>Kunnskapen om kodebasen økes på tvers hele tiden</li><li><strong>Teknisk gjeld tas fortløpende</strong>.</li><li>Teamsamarbeidet og <strong>pyskologisk trygget</strong> blir litt forbedret hver dag.</li><li><strong>Kunden får</strong> <strong>kontinuerlige forbedringer </strong>på produktet.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/587/1*9KwN-UWkbfTJYM-HrlqDag.png\" /></figure><h4>Alt dette er fint, men hvordan kommer du i gang i ditt team?</h4><p>Det ikke-tekniske er ofte det viktigste. Her er noen enkle grunnprinsipper:</p><ul><li><strong>Bryt ned oppgavene så godt du kan.</strong> Og så bryt dem ned enda mer. Og få dem ut i produksjon så fort som mulig.</li><li>Planlegg ukentlig med <strong>lav WIP</strong> (work in progress). Ha gjerne færre oppgaver enn antall utviklere, det vil gjøre det naturlig å jobbe sammen</li><li>I starten kan det være <strong>uvant å skulle gå sammen i par for å løse oppgaver. </strong>En måte å komme i gang på er å avtale par i starten av uken inntil man får parprogrammeringen litt inn i fingrene.</li><li><strong>Stop starting, start finishing. </strong>Teamet, ikke enkeltpersoner, skal bli ferdige med oppgaver. <strong>Hjelp andre med å bli ferdige fremfor å starte på noe nytt selv.</strong></li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/443/1*uUjFsFPevnjNFh0eulx0GQ.png\" /><figcaption><strong>Stop starting, start finishing, hold WIP nede. </strong>Simen spør hvem som trenger hjelp i stedet for å starte noe nytt selv</figcaption></figure><ul><li>Gjør en retro etter noen uker på hvordan det har gått. Finn det som passer ditt team.</li></ul><p>Lykke til!</p><p><a href=\"https://medium.com/sparebank1-digital/parprogrammering-for-flyt-og-fokus-31341b372c63\">Les videre om hvordan vi fikk fart, flyt og fokus med parprogrammering.</a></p><p><strong>Referanser<br></strong>James Clear (2018) <em>Atomic Habits: An Easy &amp; Proven Way to Build Good Habits &amp; Break Bad Ones.</em> Random House Business Books</p><p><a href=\"https://jamesclear.com/continuous-improvement\"><em>Continuous Improvement: How It Works and How to Master It</em></a> av James Clear</p><p><a href=\"https://www.linkedin.com/pulse/hver-commit-er-en-ny-deploy-til-prod-del-1-terje-heen/\"><em>Hver commit er en ny deploy til prod</em></a>, del 1 av Terje Heen</p><p><a href=\"https://medium.com/sparebank1-digital/ikke-nok-et-j%C3%A6vla-statusm%C3%B8te-2d72284897c3\"><em>Ikke nok et jævla statusmøte!</em></a><em> </em>av Marthe Slaatsveen og Thomas Allan Nygaard</p><p><a href=\"https://www.martinfowler.com/articles/continuousIntegration.html\"><em>Continuous Integration</em></a> av Martin Fowler</p><p><a href=\"https://martinfowler.com/bliki/TestDouble.html\"><em>TestDouble</em></a> av Martin Fowler</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4e08ec505c54\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/hvordan-vi-fikk-h%C3%B8yere-fart-med-hyppige-prodsettinger-og-parprogrammering-4e08ec505c54\">Hvordan vi fikk høyere fart med hyppige prodsettinger og parprogrammering</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Asgaut Mjølne"}},{"node":{"title":"Synlighet og kunnskapsdeling styrker personvernarbeidet","link":"https://medium.com/sparebank1-digital/synlighet-og-kunnskapsdeling-styrker-personvernarbeidet-a5112788ba83?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/697/1*2ilRznEb8lB_l8Ijp919qA.png\" /></figure><p><em>Det er ikke enkelt å lykkes med å etterleve personvernkravene som stilles til norske virksomheter i dag. Det finnes ingen tydelig oppskrift vi kan følge. I personvernteamet i SpareBank 1 Utvikling erfarer vi at det lønner seg å være synlig, tilgjengelig og engasjerte overfor våre kollegaer. Opplæring bidrar til at vi er flere som kan imøtekomme personvernregelverkets krav. Fremover skal vi i tillegg jobbe for at det blir lettere å gjøre rett.</em></p><p><strong>Personvernregelverket er kommet for å bli</strong></p><p>Den 25. mai er det fire år siden personvernforordningen (GDPR) ble tatt inn i norsk lov. Det fantes regler for behandling av personopplysninger lenge før 2018, men de siste årene har det blitt satt et særlig søkelys på etterlevelse av personvernregelverket. Det samme kan vi si at gjelder internt i vår virksomhet, SpareBank 1 Utvikling. Vi er et produkt- og tjenesteutviklingsselskap som leverer tjenester til bankene og produktselskapene i SpareBank 1-alliansen. Med dette følger behandling av et stort volum av personopplysninger.</p><p>I likhet med mange virksomheter har vi gjennomført flere prosjekter og tiltak for å øke kompetansen og etterlevelsen av personvernregelverket. Modenhet kommer med tiden, og vi opplever at kompetansen er styrket siden vi gjennomførte vårt første GDPR-prosjekt i 2018. Dette gjenspeiles i alle ledd, fra styret i selskapet til utvikleren i et av våre mange utviklingsteam. Modenheten vises også i antall personer som jobber med personvern hos oss. Siden 2018 har oppgaveporteføljen til personvernombudet vårt økt betraktelig, og i dag er det fire personer i selskapets personvernteam som i fellesskap håndterer personvernombudets oppgaver. I tillegg har vi personvernadvokater og mange produkteiere, systemforvaltere og andre som jobber med personvern i førstelinja. Vi jobber sammen for å sikre etterlevelse av et stadig mer krevende regelverk.</p><p><strong>Vår suksessfaktor</strong></p><p>For å sikre at vi jobber sammen om personvern, etterstreber vi i personvernteamet å være synlige og tilgjengelige for våre kollegaer. Dette medfører at vi blir koblet på utviklingsprosesser eller anskaffelser i selskapet, slik at vi kan samarbeide om å finne løsningene som etterlever personvernregelverket på best mulig måte. I personvernteamet bruker vi ikke pekefingeren, men forsøker å være en løsningsorientert lagspiller. I tillegg forsøker vi å engasjere våre kollegaer gjennom ulike opplæringstiltak. Dette er vår suksessfaktor, og det skal vi fortsette med.</p><p>Målet fremover er at våre kollegaer skal oppleve at <em>det er lett å gjøre rett</em>. For oss betyr dette slagordet flere ting. Personvernteamet skal fortsette med å jobbe tett med de ulike fagmiljøene i selskapet. Vi skal ha bedre systemer og prosesser som understøtter de kravene selskapet er satt til å etterleve. Disse systemene og prosessene skal være forståelige, tilgjengelige og oppdaterte. Dette vil forhåpentligvis medføre at vårt personvernteam kobles på tidlig i enhver prosess som gjelder behandling av personopplysninger. Dette vil redusere faren for feil, øke kvaliteten på arbeidet vårt og effektivisere arbeidet med personvern. Dersom det er lett å gjøre rett håper vi det vil være enda enklere å jobbe bedre sammen.</p><p><strong>Opplæring er viktig</strong></p><p>Opplæring er en nødvendighet for å lykkes med å etterleve kravene i personvernregelverket. Derfor har vi flere ulike aktiviteter, digitalt som fysisk, for å heve personvernkompetansen i selskapet. I personvernteamet jobber vi for at etterlevelse skal være en ryggmargsrefleks for våre kollegaer.</p><p>Vi opplever særlig å ha suksess med et opplæringstiltak som vi kaller Personverntimen. Dette er et månedlig webinar som alle i selskapet kan lytte inn på. Her tar vi opp ulike personvernrelaterte tema som våre kollegaer bør kjenne til, og vi inviterer ofte andre kollegaer til å holde innlegg. Det gir en ekstra verdi dersom andre enn personvernjurister snakker om personvern, med egne ord og fra eget perspektiv.</p><p>De siste årene har vi også markert den internasjonale personverndagen den 28. januar. I år gjennomførte vi et webinar for hele SpareBank 1-alliansen, der Datatilsynet, Kripos og vår administrerende direktør snakket for hele 900 av våre kollegaer. På GDPR sin bursdag den 25. mai skal vi også sette personvern på dagsorden, ved å gjennomføre en personverntime hvor vi løfter frem alt personvernarbeid som er gjort og ambisjoner fremover. Vi erfarer at det lønner seg å bruke både de store og de små anledningene til å rette oppmerksomheten mot personvern.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a5112788ba83\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/synlighet-og-kunnskapsdeling-styrker-personvernarbeidet-a5112788ba83\">Synlighet og kunnskapsdeling styrker personvernarbeidet</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Karen Grinvoll"}},{"node":{"title":"Hvordan kan vi lede og kode samtidig — del 2","link":"https://medium.com/sparebank1-digital/hvordan-kan-vi-lede-og-kode-samtidig-del-2-72363535cae5?source=rss----e3c741b0efee---4","content":{"encoded":"<h3>Hvordan kan vi lede og kode samtidig — del 2</h3><p>For å finne leder til Utvikleravdelingen vår i 2018, bestemte vi oss for å PoC-e ledelse. Dette endte blant annet opp med en lederstilling på åremål. Du kan lese mer om bakgrunnen for dette i <a href=\"https://medium.com/sparebank1-digital/hvordan-kan-vi-lede-og-kode-samtidig-del-1-6651d83adc35\">den første delen av artikkelen</a>.</p><p>Der forteller vi også om communityledelse og de tre gjengene Faggjengen, Sosialgjengen og Personalledergjengen. Vi så at for å kunne lede og jobbe operativt samtidig, trengte vi å delegere flere av de tradisjonelle lederoppgavene.</p><h3>Distribuert rekruttering</h3><p>Å rekruttere er en av de viktigste tingene vi gjør. For å kunne lykkes med rekruttering samtidig som vi både leder og koder har distribuert rekruttering vært viktig, siden det ågjennomføre en ansettelse er mye jobb. Hos oss er det teamlederne som har behov for utviklere som driver rekrutteringsprosessene. Den kanskje mest avgjørende delen av rekrutteringsprosessen er intervjuene. For at de skal være så gode som mulig, har vi jobbet mye med innholdet i både første- og andregangsintervjuet, med QA fra HR og andre som synes slikt er spennende. Det er alltid minst en utvikler med i førstegangsintervjuene, og gjerne to i andregangsintervjuene, slik at flest mulig får dannet seg et bilde av kandidaten.</p><p>Uten <a href=\"https://medium.com/sparebank1-digital/n%C3%A5r-h%C3%A5rete-m%C3%A5l-for-rekruttering-gruses-p%C3%A5-deltid-52f3d12c0a92\">distribuert rekruttering</a> kan vi med sikkerhet si at vi aldri hadde kunnet hatt ledelsen av utvikleravdelingen på deltid.</p><h3>Ledelse på åremål</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ez_CbOoDcQj6GJy4hA6vBQ.jpeg\" /><figcaption>Å gjøre ledelse på åremål ligner mye på å løpe stafett.</figcaption></figure><p>Den kanskje viktigste endringen vi gjorde, var å gjøre lederstillingen for Utvikleravdelingen om til en åremålsstilling. Å gjøre ledelse på åremål, ligner mye på å løpe stafett. Du gjør ditt aller beste på din etappe, og på slutten fokuserer du maksimalt på å gjøre en så god veksling som mulig.</p><p>I tillegg til at avtroppende leder kan gå tilbake til å fokusere på utvikling på heltid igjen, så er det flere styrker med åremålsmodellen. Blant annet sørger det for dynamikk og nytenking rundt ledelsen, og ikke minst nytenking også rundt selve lederrollen. Så selv om vi hadde et par overleveringsmøter, så er mye av poenget at den nye lederen setter sitt eget preg på de faste sermoniene våre.</p><h3>Åremål er som leasing</h3><p>Podcasten <a href=\"https://podcasts.apple.com/no/podcast/mannspanelet/id1452702588\">Mannspanelet</a> har en episode hvor de debatterer en ide om at ekteskap burde være på leasing. I ekteskapet tenker vi gjerne at denne utfordringen har vi lang tid på å løse. Et helt liv. Men om vi vet at ekteskapet skal opp til vurdering innimellom, så er det større sannsynlighet for at vi fikser riper og skader mer fortløpende.</p><p>Dette gjelder kanskje for lederskap også? Når vi har en dato å forholde oss til, så er det ikke like lett å utsette oppgaver. Det kan også hjelpe til med at vi er mer til stede og aktiv i perioden vi har fått.</p><p>Det eneste negative vi har opplevd med åremålsmodellen, er at det kan være vanskelig for personer utenfor avdelingen å vite hvem de skal prate med. Ett år går fort.</p><h3>Hva har vi lært?</h3><p>En av de fine tingene med at flere av oss nå har fått prøvd oss som ledere, er at vi har har lært mye.</p><p>Vi lærte at en bør delegere så mye jobb som mulig. Når flere er med og løser opggaver, øker sannsynligheten for gode løsninger, engasjement, og eierskap til disse. Å delegere heller enn å gjøre det selv, kan være uvant i starten. Som utviklere er vi både vant til, og ikke minst liker, å løse utfordringer, så det er lett å bare starte på dem uten å tenke over at det nok er bedre å få hjelp fra flere.</p><p>Når det er mye å gjøre, må vi prioritere. Da må vi også si nei til mer. Det kan være vanskelig, men en blir vant til det også. Et konkret tips her, er å forklare hvorfor du må si nei. Da blir avvisningen litt lettere å godta.</p><p>I en verden som endrer seg raskere og raskere, og i en organisasjon som er doblet i størrelse på få år, er det bra med noe som er stabilt. Strukturer og faste rutiner skaper trygghet og stabilitet. Det gjelder for barna, og det gjelder også for oss voksne. For oss er det blant annet slikt som avdelingsmøtet vårt hver torsdag, fast after work og stabil personalledelse. Og selv om vi bytter personen som har på seg lederhatten vår hvert år, så er hovedoppgaven som leder for Utvikleravdelingen også fast.</p><p>Hovedoppgave til lederen for Utvikleravdelingen er å fortsette og bygge utviklerkulturen vår. For å skape en god kultur, må vi hele tiden jobbe med å skape arenaer og muligheter som øker den psykologiske tryggheten blant utviklerne.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NCxQuY76HsT8IfEME_xySg.png\" /><figcaption>Vi skaper psykologisk trygghet når vi gjør ting sammen.</figcaption></figure><p>Den beste måten å skape psykologisk trygghet i en gruppe på, er å la gruppen gjøre ting sammen, dele opplevelser sammen. Så får vi krysse fingrene for at vi får muligheten til å fortsette med det, nå som pandemien ser ut til å roe seg og det går mot vår.</p><p>Vil du vite enda mer om dette, så kan du se <a href=\"https://vimeo.com/showcase/9189999/video/669321436\">foredraget vi holdt på JavaZone</a>, eller ta kontakt med oss direkte.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=72363535cae5\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/hvordan-kan-vi-lede-og-kode-samtidig-del-2-72363535cae5\">Hvordan kan vi lede og kode samtidig — del 2</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Vidar Moe"}},{"node":{"title":"Hvordan kan vi lede og kode samtidig — del 1","link":"https://medium.com/sparebank1-digital/hvordan-kan-vi-lede-og-kode-samtidig-del-1-6651d83adc35?source=rss----e3c741b0efee---4","content":{"encoded":"<h3>Hvordan kan vi lede og kode samtidig — del 1</h3><p>Da jeg ble spurt om å lede den nye Utvikleravdelingen i 2018, sa jeg nei.</p><p>Jeg hadde lyst til å prøve meg som leder for avdelingen. Men jeg var redd for å komme i en situasjon hvor jeg ikke kunne kode profesjonelt igjen på flere år. En god kollega, Stian Conradsen, ble også spurt. Han sa også nei. Han følte det samme.</p><p>Dermed lyste vi ut stillingen. Intervjuprosessen med de mange gode søkerne gav oss mer innsikt i hva lederrollen for utviklerne burde være. Vi forstod at Utvikleravdelingen var mer å se på som et utviklercommunity heller enn en klassisk avdeling, i og med at vi generelt ikke jobber sammen, men er spredd ut i mange team.</p><p>Dette gjorde at vi skjønte at vi trengte en communityleder heller enn en klassisk avdelingsleder. Det ble en runde til internt.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZL6Ryz4kNRn6-wfRPRgTDA.jpeg\" /><figcaption>Det går heldigvis an å lede og jobbe operativt samtidig.</figcaption></figure><h3>Hvordan kan vi PoC-e ledelse?</h3><p>Vi er vant til å prøve ut nye ideer og muligheter i vår bransje. Vi gjør gjerne en spike eller en PoC (Proof of Concept). Vi tenkte at det kanskje går an å gjøre det samme med ledelse? Vi tok en prat med ledelsen i SpareBank 1 Utvikling, og ble enige om at vi kunne gjøre stillingen som leder for Utvikleradelingen om til en <a href=\"https://no.wikipedia.org/wiki/%C3%85rem%C3%A5l\">åremålsstilling</a>. Dermed var det maksimalt et år til vi kunne ha koding som hovedaktivitet igjen. Det endret alt. Stian og jeg ble enige om at jeg kunne starte, og så skulle Stian ta over etter et års tid. Vi hadde landet ikke bare en, men to ledere for Utvikleravdelingen.</p><h3>Et engasjert utviklercommunity</h3><p>Utviklercommunityet vårt var sterkt, og fungerte godt allerede før avdelingen ble opprettet. Vi hadde faggrupper, brown bag lunsjer, bokklubb og jobbet strukturert med JavaZone og andre viktige konferanser. I tillegg hadde vi også distribuert personalledelse. Det betyr at hos oss er det utviklere som er personalledere for opptil fem andre utviklere.</p><p>Selv om vi hadde alt dette på plass, så vi at vi trengte å delegere enda mer av arbeidet en tradisjonell leder gjør for både å kunne lede avdelingen og jobbe med kodeoppgaver i et team.</p><p>Vi opprettet Faggjengen, Sosialgjengen og Personalledergjengen for å få til dette.</p><h3>Faggjengen</h3><p>Faggjengen har det overordnede ansvaret for den faglige utviklingen i avdelingen. Den lager blant annet heldags fagdager, fikser faglig opplegg når vi er på tur, og har også et ansvar ifm prioritering av felles forbedringsopgaver.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xaPR9v8eulwRHK-mAQuaUg.jpeg\" /><figcaption>Faggjengen ordner frokost med godt påfyll av både mat og fag.</figcaption></figure><h3>Sosialgjengen</h3><p>En kan ha det gøy sammen med mer enn faget vårt. For å fikse det har vi Sosialgjengen. Også det er en sammensatt gruppe av utviklere som får energi av å gjøre noe for andre på det sosiale planet. Fra uke til uke har vi gjort det veldig enkelt. Da er det after work. Når vi skal på tur, er det også Sosialgjengen som ordner det.</p><h3>Personalledergjengen</h3><p>Vi må fortelle mer om måten vi gjør personalledelse på. En vanlig modell er at en avdelingsleder har ansvar for mange, gjerne alle ansatte i sin avdeling. Da kan det bli krevende å være tett på de en har ansvar for.</p><p>Vi ønsket å prøve en annen modell, hvor utviklere har personalansvaret for et lite antall utviklere. Å hjelpe den enkelte med faglig utvikling er en vesentlig del av personallederansvaret. Vi tenker at dette er lettere å få til når det er utviklere som hjelper andre utviklere med dette. Og når antallet utviklere en har ansvaret for er lite, blir det enklere å komme tett på. Vi ønsker heller mange hyppigere samtaler enn store og få. Smidig HR kaller vi det.</p><p>Flere av våre utviklere har erfaring med personalledelse fra tidligere. I tillegg kjører vi kurs for de som kommer med som nye personalledere, slik at de får ballasten de trenger. Vi har også fast møte i personalledergjengen, hvor vi kan prate om utfordringer og praktiske ting som dukker opp.</p><h3>Men det er mer</h3><p>Selv om vi har distribuert mye ansvar i Faggjengen, Sosialgjengen og Personalledergjengen, så er ikke det nok til at Avdelingslederen for Utvikleravdelingen i praksis skal få tid til også å drive med utvikling. I <a href=\"https://medium.com/sparebank1-digital/hvordan-kan-vi-lede-og-kode-samtidig-del-2-72363535cae5\">del to av artikkelen</a> forteller vi mer om hvordan vi har distribuert blant annet rekruttering. Vi deler også mer om hva vi har lært etter tre års erfaring med ledelse på åremål.</p><p><a href=\"https://vimeo.com/showcase/9189999/video/669321436\">Vi pratet også om dette på JavaZone i desember 2021</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6651d83adc35\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/hvordan-kan-vi-lede-og-kode-samtidig-del-1-6651d83adc35\">Hvordan kan vi lede og kode samtidig — del 1</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Vidar Moe"}}]}}}