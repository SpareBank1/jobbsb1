{"data":{"allFeedsb1Digital":{"edges":[{"node":{"title":"Playwright vs Cypress","link":"https://medium.com/sparebank1-digital/playwright-vs-cypress-1e127d9157bd?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NjQboT840TikscTpM52iQg.jpeg\" /></figure><p>Not too long ago, Cypress seemed to be the most exciting new end-to-end testing framework out there, quickly growing in popularity within different development teams. However now there’s a new kid on the block named Playwright, and it aims to solve a similar issue — helping developers automate their user-flows in a more user-friendly way.</p><p>This article will compare the two, and hopefully make it clearer which testing framework suits your needs the most, by making you aware of their similarities, differences, strengths and weaknesses.</p><h3>About the frameworks</h3><p>For an introduction to the fundamentals of Cypress.io, check out my other article named <a href=\"https://developer.bring.com/blog/testing-with-cypress/\">“Testing with Cypress”</a>. In short, Cypress is a tool for setting up, writing, running and debugging tests. It compiles all the tests into Javascript, runs in an instance of a chromium-based browser that includes Chrome, Edge, Brave and Electron. Cypress also just recently added full-support for Firefox browsers.</p><p>Playwright is essentially a browser automation tool and the processor of the node library Puppeteer, as it has the same functionality along with several improvements such as Cross-browser testing and device emulations. Playwright is also written and maintained by the same people who created Puppeteer, and are now working at Microsoft. This article won’t cover Puppeteer, but it’s handy to know of its similarities, especially if you’re already familiar with it.</p><h3>Similarities</h3><p>Similarly to Cypress, Playwright is an open-source, Javascript-based library, for automating your end-to-end tests. Both aim to provide a single API that developers and testers can use to interact with web applications across the major browser engines. There is a difference between the two when it comes to browser support, but both offer the ability to run tests and interactions in Firefox and Chromium browsers. Other similarities include functionality, like taking screenshots, stubbing requests, and testing on various screen sizes. If you want to run your tests as part of your continuous integration flow, or prefer to run the tests without a UI interface, then you’ll be happy to hear both offer headless options so that you can run your tests directly in the Terminal.</p><p><strong>To summarize:</strong></p><ul><li>Both are Open-source and Javascript-based</li><li>Can install both as an npm-package.</li><li>Single API for testing in several browsers (Both support Firefox and Chromium)</li><li>Share a lot of the same functionality, like screenshots, stubbing and setting custom view-ports.</li><li>Neither supports testing in IE11</li><li>Can be run from the Terminal</li><li>Frequently updated GitHub Repos</li></ul><h3>Differences</h3><p>While they both aim to solve a similar issue, they have different ways of doing so. Cypress is more of a “full-package”, and it creates a folder structure along with example files, and you are stuck with the test runner you get with the framework. Playwright, on the other hand, does not make any files and can be configured to work with the test runner of your choice. The two frameworks also run their tests differently. Cypress runs the tests in run-time, and Playwright is promise-based and can run several different browsers and different user contexts in the same test, while Cypress needs to be re-run with the other browser options.</p><p>Cypress has gone for a syntax more similar to JQuery, but instead of “$”, it uses the keyword “cy”, and a function name. Having one keyword to access everything, might make more sense for designers and junior front-end developers, less familiar with async and creating instances of objects, than the more Javascript approach Playwright has. The example below shows the syntax differences between the two frameworks, and the test scenario is to check if an element with the class name “App-logo” exists.</p><pre>// Cypress</pre><pre>describe(‘Navigation and Element test’, () =&gt; {<br>it(‘Finds the react logo’, () =&gt; {</pre><pre>cy.visit(‘&lt;http://localhost:3000&gt;&#39;);<br>cy.get(‘.App-logo’).should(“exist”);</pre><pre>})<br>})</pre><pre>// Playwright</pre><pre>import * as playwright from ‘playwright’;<br>const browsertype = playwright.chromium;</pre><pre>(async () =&gt; {<br>const browser = await browsertype.launch();<br>const page = await browser.newPage();</pre><pre>await page.goto(‘&lt;http://localhost:3000/&gt;&#39;);<br>const logo = await page.$(‘.App-logo’)<br>if(!logo) throw new Error(“Cannot find logo”)<br>await browser.close(); // Close browser again</pre><pre>})();</pre><p>As previously mentioned Playwright has a syntax closer to Javascript, where you create instances of objects. The ability to create object instances allows us to run multiple tabs, browsers and user contexts at the same time. The example above shows how Playwright uses the async functionality to wait for a UI-element to appear before continuing the test, Cypress, however, solves a similar issue by automatically re-trying the assertions until it reaches the set timeout.</p><p>One of the most significant benefits of Playwright is its ability to test across multiple pages and domains. Along with setting multiple user contexts. Both are very useful if you’re using third-party sign-ins, pop-ups, iframes (such as BankID in Norway) etc. in your application. Cypress, on the other hand, would require you to write separate tests to simulate the different user scenarios and would require you to stub a lot of the requests to work.</p><p><strong>To summarize:</strong></p><ul><li>Playwright works on Webkit-browsers, Cypress does not.</li><li>You can choose test-runner in Playwright</li><li>Playwright lets you test in several browsers at the same time.</li><li>Playwright supports multi-tabs and frames.</li><li>Cypress doesn’t run in headless mode by default, Playwright does.</li><li>Playwright awaits UI-elements before running interactions, Cypress re-try assertions until timeout.</li></ul><h3>Size and performance</h3><p>When it comes to size and performance, it’s a bit of a mixed bag. Since Cypress has a built-in test runner, Jest has been added to the comparison, as it’s the most popular Javascript test runner, and needed to achieve similar functionality to Cypress in Playwright. Looking at the minified size, Cypress is technically smaller with it’s 1.6MB against the 2.85MB of Playwright + Jest, but where Playwright + Jest shine is when you look at the dependencies where Playwright + Jest has 14, compared to the 125(!) of Cypress.</p><p>To test performance, a colleague and I wrote a test in both Playwright + Jest and Cypress. The test scenario covers the following steps:</p><ol><li>Go to sparebank1.no</li><li>Press “Godta alle” button for the cookie pop-up</li><li>Find postal code input and enter 3324</li><li>Check if a button with the class “ffe-shortcut-button” and text “SpareBank 1 Modum” is visible.</li><li>Click the button, and check if the page now is Sparebank 1 Modum.</li></ol><p>The results show that it’s only milliseconds separating the two in terms of speed. Cypress ran the test in 3 seconds, whilst Playwright slightly beat that by completing the test in 2.33 seconds. Essentially it means that both run the test fast, and whilst Playwright was somewhat quicker, it’s not that big of a difference that it should affect your choice of framework.</p><h3>What to pick?</h3><p>So which of these frameworks should you choose? The answer is it depends on how experienced you are with testing, and what functionality you find essential. If you’re new to testing and want a more plug-and-play approach that includes everything you need to get started, then Cypress is the best choice for you. It has good documentation and a broader community that makes it easier to get help and find answers to specific scenarios you find challenging.</p><p>If you are more familiar with testing, need to test Webkit browsers or your tests need to cover scenarios spanning across multiple pages and domains, then Playwright is the choice for you. Playwright is also the right choice for you if you have fallen in love with a specific test runner or don’t need one at all. With the framework being reasonably new, we can also expect that the community, documentation and framework in general will continue to improve over time.</p><p><strong>Cypress:</strong></p><p>➕ Easy to understand documentation<br>➕ A broader community and easier to find answers about specific issues<br>➕ Easier to understand for people new to testing<br>➕ You only have to read up on one framework as Cypress has everything included.</p><p>➖ Doesn’t support multi-page and third-party implementations.<br>➖ More extensive and with more dependencies<br>➖ Generates several example files and folders<br>➖ You have to re-run tests to run in another browser.</p><p><strong>Playwright:</strong></p><p>➕ Broader browser support<br>➕ Fewer dependencies than Cypress<br>➕ Supports multi-page and third-party implementations<br>➕ Lets you choose your test runner.<br>➕ Doesn’t generate any files.<br>➕ You can run multiple browsers using the same test.</p><p>➖ Documentation not as good<br>➖ Newer and with a smaller community</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1e127d9157bd\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/playwright-vs-cypress-1e127d9157bd\">Playwright vs Cypress</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"HeleneKassandra"}},{"node":{"title":"Det skal være lett å gjøre rett — del 3","link":"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-3-eddc2e24623?source=rss----e3c741b0efee---4","content":{"encoded":"<h3>Det skal være lett å gjøre rett — del 3</h3><p>I forrige artikkel i serien så vi på noen av verktøyene vi bruker til utvikling. Nå skal vi se mer på noe som er minst like viktig, nemlig å få koden ut i produksjon.</p><p>Som vi vet fra blant annet <a href=\"https://www.oreilly.com/library/view/accelerate/9781457191435/\">Accelerate</a> er en av tingene som skiller organisasjoner med høy og lav ytelse er hvor ofte kode rulles ut til produksjon. Hyppige produksjonssettinger fører til færre produksjonsfeil, kortere mean time to recovery (Tiden det tar fra en feil oppstår til den er fikset) og kortere ledetid fra commit til prodsetting.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*oTBf3kthXvnwdpuCgwFMaA.jpeg\" /></figure><p>Men det er ikke nok å rulle ut kode til produksjon ofte, det må gjøres på en forutsigbar og trygg måte. Det må kunne gjøres med lave skuldre. Og som de fleste som har vært med på kvartalsvise eller halvårsreleaser som gjøres manuelt kan si: Det å prodsette sjeldent gjør veldig vondt.</p><p>Det finnes mange artikler som sier noe om hvorfor store releaser gjør vondt, men i bunn og grunn handler det om at dersom du prodsetter mange endringer samtidig, så er sannsynligheten for at det er feil i en av de stor. Og da må hele leveransen rulles tilbake, prosjektledere og interessenter må informeres og du må jobbe overtid for å fikse det. Så må ny produksjonssetting planlegges og driftsressurser må bookes på nytt. Kanskje det til og med blir nattarbeid.</p><p>Dersom endringssettet du prodsetter er mindre, så er det også mindre som må rulles tilbake, og konsekvensen blir lavere. I tillegg så blir mulighetsrommet for feil lavere. Det er færre endringer, og dermed færre mulige syndere som må sjekkes ut.</p><p><strong>Applikasjonsarkitektur og verktøy spiller sammen</strong></p><p>Hvis du skal kunne levere kode hyppig, må du også ha en applikasjonsarkitektur som støtter opp under dette. Det finnes flere måter å angripe problemstillingen på, men det vanligste i dag er å dele opp i mindre tilstandsløse applikasjoner som tilsammen utgjør et system.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*q8FHRS4YMobF8_aqdAQgFQ.png\" /></figure><p>Vi har valgt å basere våre containerbaserte applikasjoner på manifestet <a href=\"https://12factor.net/\">The Twelve-Factor App</a>. Det er et manifest som er skrevet av folkene bak tjenesten Heroku. Manifestet beskriver 12 egenskaper de mener at moderne applikasjoner bør ha. Dette setter en del krav til applikasjonene vi deployer:</p><p>Applikasjonene må være tilstandsløse. Det gjør at applikasjonene er lettere å forvalte og forstå, de blir enklere å skalere horisontalt og det gjør at de passer bedre inn i en verden hvor de kan bli revet ned og startet opp i løpet av sekunder.</p><p>Hemmeligheter, som er typisk api-nøkler, sertifikater og passord, injiseres fra miljøet rundt. Vi har i tillegg valgt å gjøre løsningen for å legge inn hemmeligheter i en app selvbetjent, slik at om du er en DBA som har generert en databasebruker, legger du den selv inn i applikasjonen som skal ha hemmeligheten. Dermed slipper vi å sende hemmeligheter rundt på mer eller mindre kreative måter som sms, epost eller post-it lapper.</p><p><strong>Deployment</strong></p><p>Vi har opp gjennom årene hatt flere verktøy for deployment. Felles for disse er at de som regel har løst et spesifikt problem i et spesifikt miljø. Da vi skulle ha et verktøy til containerplattformen vår, ville vi ha et verktøy som kunne løse deployment i alle miljøer. Vi valgte til slutt å lage vårt eget deploymentverktøy, som var tilpasset våre prosesser og vårt miljø.</p><p>Resultatet ble Shifter! Som noen sikkert vet er Shifter <a href=\"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-2-41ac9949c274\">også en karakter fra Byggmester Bob</a>, og han er ganske god på å flytte rundt på containere.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*uIahASmYN44xXsMUNp9Chw.png\" /><figcaption>Kilde: <a href=\"https://www.amazon.sg/Fisher-Price-Bob-Builder-Shifter-Vehicle/dp/B06XPYCSHV\">https://www.amazon.sg/Fisher-Price-Bob-Builder-Shifter-Vehicle/dp/B06XPYCSHV</a></figcaption></figure><p>Litt av grunnen til at vi valgte å utvikle vårt eget deployment-verktøy var fordi vi ville tilpasse det til våre behov og våre verktøy. Blant annet så ønsket vi å kunne vise relevante metrics fra applikasjonen direkte i grensesnittet, slik at man enkelt kan følge med på hva som skjer når man prodsetter en endring.</p><p>Her har du relevante metrikker for responstid, feilrater og ressursbruk.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*X-oplbVU3457mBoyuajfwQ.png\" /></figure><p>I tillegg til det grafiske grensesnittet har Shifter et restbasert API som kan benyttes fra jenkins og andre script for å bygge og deploye applikasjoner. Derfor har shifter blitt en viktig del av både utvikling og produksjonsetting hos oss, som hjelper oss å sove godt om natten.</p><p>I del fire av denne serien skal vi skrive litt om hvordan vi organiserer oss for å kunne jobbe godt med kontinuerlig forbedring av verktøyene våre.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=eddc2e24623\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-3-eddc2e24623\">Det skal være lett å gjøre rett — del 3</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Ola Hast"}},{"node":{"title":"Det skal være lett å gjøre rett — del 2","link":"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-2-41ac9949c274?source=rss----e3c741b0efee---4","content":{"encoded":"<h3>Det skal være lett å gjøre rett — del 2</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nQeqOZ2-VK7Y9h3ybR3CwQ.jpeg\" /></figure><p>Vi har valgt å lage en rekke verktøy som gjør livene våre enklere. Disse hjelper oss med å sette opp utviklingsmiljø, deployment og andre vanlige arbeidsoppgaver. Som vi var inne på i <a href=\"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-1-947ff830f81f\">første del av denne artikkelserien</a> har vi sett at dette gir oss både fart, trygghet og god nattesøvn. Et skikkelig kinderegg! Men hvordan kom vi egentlig i gang?</p><p><strong>Alle må starte en plass</strong></p><p>Da vi startet vår reise som verktøymakere, hadde vi et likt utgangspunkt som veldig mange andre bedrifter: En nedlåst Windowsplattform med Office og IE forhåndsinstallert, men dessverre ikke så veldig mye mer. Og du hadde heller ikke rettigheter til å installere noe selv. Dette er et veldig rasjonelt utgangspunkt om man ikke skal drive med utvikling.</p><p>Bare det å få satt JAVA_HOME var i seg selv en utfordring, siden maskinen både titt og ofte fikk miljøvariablene resatt av administrasjonsverktøyet. Hele prosessen med sette opp og vedlikeholde et fungerende utviklingsmiljø var en frustrerende affære, som også gjorde det veldig vanskelig å teste ut nye ting. Utviklere brukte ofte ukesverk på å få satt opp alt og på å bli produktive medarbeidere.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ge9LqcKPbW6NpkzJPJI0Bw.jpeg\" /></figure><p>Dette gjorde at vi ble kjent med våre to første venner: <a href=\"https://www.virtualbox.org/\">Virtualbox</a> og <a href=\"https://www.vagrantup.com/\">Vagrant</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/451/1*ekcPOENj8LGjWcMWAr2qjg.png\" /><figcaption>Kilde: <a href=\"https://medium.com/@botdotcom/installing-virtualbox-and-vagrant-on-windows-10-2e5cbc6bd6ad\">medium.com/@botdotcom/installing-virtualbox-and-vagrant-on-windows-10</a></figcaption></figure><p>Kombinasjonen av Virtualbox og Vagrant ga oss muligheten til å scripte oppsettet av et virtuelt linux-miljø uten å måtte forlate windows-plattformen. Da tok det ikke lang tid før vårt første hjemmelagde verktøy, provision-dev ble født.</p><p>Nå har vi forlatt windows helt til fordel for en utviklingsplattform som kjører Linux, men verktøyet provision-dev lever videre.</p><p><strong>Provision-dev</strong></p><p>Provision-dev er et konfigurasjonsrepo som lar oss velge selv hva vi ønsker å installere på maskinene våre. Sett utenfra så inneholder provision-dev to script.</p><p><strong>Configure.sh</strong> lar deg velge hva du vil installere i utviklingsmiljøet. Det kan typisk være hvilken versjon av Intellij man ønsker. Videre kan man velge om man ønsker å installere verktøy for sikkerhetstesting, databaseverktøy, mobilutvikling osv.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DTCSWNt5gefJIfTH8k7KjQ.png\" /><figcaption>configure.sh brukes til å velge hvilke verktøy man ønsker å installere i sitt miljø</figcaption></figure><p>Når man har valgt hva man ønsker i utviklingsmiljøet sitt så kjøres steg to av provision-dev, nemlig provision.sh.</p><p><strong>Provision.sh</strong> setter opp alt du trenger for å gå fra en nytanket laptop med linux til å ha et fullt fungerende utviklingsmiljø med et utvalg Java-versjoner, Maven, Node, IDE og kode-editorer. Samt en rekke ekstraverktøy som ikke alle nødvendigvis trenger. Men det er likevel viktig at spesialistene også slipper å bruke masse tid på å sette opp sine verktøy.</p><p>Dette gjør at du i løpet av få timer fra du får utlevert en maskin, kan ha et ferdig oppsatt utviklingsmiljø. Og vi har som mål at alle nye utviklere skal gjøre sin første commit mot master i løpet av første dag.</p><p><strong>Bob</strong></p><p>Bob er også en viktig del av plattformen vår. Av en eller annen grunn så virker det som at utviklere er fascinert av Byggmester Bob og de andre karakterene i serien. Som regel ender det opp med at interne verktøy får sine navn derifra.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1Z4ffjhqGmkbE_EWsiLndA.png\" /><figcaption>Kilde: <a href=\"https://www.youtube.com/watch?v=8kFfHnre85o\">Youtube</a></figcaption></figure><p>Vår Bob startet som en rekke script som ble brukt til å bygge nettbank-applikasjonene, derav navnet Byggmester Bob. Etterhvert samlet vi disse scriptene i et felles gitrepo, slik at vi enklere kunne holde de like på tvers av utviklermaskinene. Som en ekstra bonus så bruker vi provision-dev til å sette opp en cron-job som sørger for at Bob alltid er oppdatert med de siste forbedringene som er gjort.</p><p>I løpet av de sju årene siden første commit, så har Bob fått mange flere ferdigheter. Vi bruker nå Bob til blant annet å håndtere lokalt utviklingsmiljø, deploye til OpenShift og sette opp byggejobber.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6p5LU3LD3BSwVBg3\" /><figcaption>Bob har flere funksjonsområder</figcaption></figure><p>Bob er et verktøy du bruker fra kommandolinjen. Kommandoene og strukturen er inspirert av git, og både autocomplete og dokumentasjon av kommandoene er tilgjengelige fra terminalen. Kommandoene er gruppert etter funksjonsområde slik at det er lett å bruke og finne fram. Det er viktig for at det skal bli brukt.</p><p>Bob og provision-dev utgjør basisen blantverktøyene våre og er de vi bruker mest i hverdagen, men de er ikke alene.</p><p><strong>Generering av applikasjoner</strong></p><p>I SpareBank 1 Utvikling er vi nå i overkant av 20 team som jobber med å lage stadig bedre nettbanktjenester til kundene våre. Og for at de skal kunne gjøre det, så må de kunne jobbe uavhengig av hverandre. Samtidig så skal vi kjøre et stort antall applikasjoner i containere og da ønsker man at mye er løst standardisert måte.</p><p>Et godt eksempel på dette er logging. God logging er viktig av mange årsaker, og en god kandidat for standardisering. Det gjør livet enklere både for deg som utvikler og andre som har behov for å se i loggene. Og hvis man bruker verktøy som ELK-stacken, Splunk eller Humio kan man lettere søke på tvers av applikasjoner og få et bedre oversiktsbilde over applikasjonene dine.</p><p>For å sørge for at alle som skal lage en ny applikasjon hos oss har et likt utgangspunkt har vi tatt i bruk applikasjonsgeneratorer. Bruk av en slik generator kan bidra til å fjerne en del <a href=\"https://en.wiktionary.org/wiki/yak_shaving\">yak-shaving</a>:</p><ul><li>Oppsett av logging</li><li>Standardisert konfigurasjon</li><li>Oppsett av maven-prosjekt og avhengigheter</li></ul><p>I tillegg så gjør dette det mulig for oss å sørge for at applikasjonene kommer med ønskede sikkerhetsmekanismer innebygd.</p><p>Det finnes flere verktøy du kan bruke. Av de enkleste så har man <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a> og <a href=\"https://start.spring.io/\">Spring-initializr</a>. Vi hadde bruk for å lage noe litt mer tilpasset til vårt miljø, så derfor valgte vi Yeoman.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7WfdhszoiMCw7LYFiWPspQ.png\" /></figure><p>Yeoman er et kommandolinjeverktøy som gjør det enkelt å kjøre generatorer. Det er basert på Javascript og Node slik at det fungerer fint på de fleste maskinplattformer. Det finnes også et utall <a href=\"https://yeoman.io/generators/\">ferdiglagde generatorer</a> som man kan ta i bruk, eller man kan gjøre som oss, og <a href=\"https://yeoman.io/authoring/\">lage en som er tilpasset din organisasjon</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*SLqZM7kkPRwDtDbE\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*NmEQl4C0qjzE0NGV\" /></figure><p>Her er et eksempel fra awl-generatoren vår. AWL står for Alliansens weblag og er templatene vi bruker til å lage apier og andre applikasjoner som er eksponert mot internett. Her har du mulighet til å velge hva slags type applikasjon det er og så får du et utgangspunkt med riktig konfigurert sikkerhetsnivå og frontend-modul ved behov.</p><p><strong>Fallgruvene</strong></p><p>Verken standardisering eller verktøy som Bob er uten fallgruver. Og de bør man være klar over.</p><p>Bob er en abstraksjon på toppen av en rekke verktøy. Det positive med abstraksjonen er at man forenkler mange operasjoner som i utgangspunktet er komplekse. Da slipper man å sette seg inn i hvordan det fungerer under panseret og man får utført det du ønsker å oppnå. Baksiden med dette er at det ikke alltid er lett å forstå hva som skjer. Derfor kan verktøy bli brukt feil og det kan bli vanskelig for brukerne å feilsøke hva som gikk feil de gangene det ikke fungerer som forventet. Abstraksjonene bør derfor være på riktig nivå og heller kombineres i et byggescript.</p><p>I tillegg så tror vi at det er viktig at verktøyene er åpne. Dersom noen lurer på hvordan det fungerer under panseret, må koden være lett tilgjengelig og det må også være mulig for alle å bidra i utviklingen. Dette er noe vi skal skrive mer om i en senere artikkel.</p><p>I <a href=\"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-3-eddc2e24623\">del tre av denne serien</a> skal vi se mer på hva vi har gjort for å gjøre produksjonssetting raskere, tryggere og hvordan det også bidrar til god nattesøvn.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=41ac9949c274\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-2-41ac9949c274\">Det skal være lett å gjøre rett — del 2</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Ola Hast"}},{"node":{"title":"Det skal være lett å gjøre rett","link":"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-1-947ff830f81f?source=rss----e3c741b0efee---4","content":{"encoded":"<p>Vi hadde estimert konverteringen av kredittkortfunksjonaliteten i nettbanken over på ny plattform, til et halvt årsverk. Da vi var ferdige hadde vi brukt ett og et halvt årsverk, altså <strong>tre ganger så lang tid</strong>. På tross av dette hadde ledelsen tillit til oss. Hvorfor hadde de det? Hva hadde det ekstra årsverket gått med til?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/680/1*TJMKfMpDksBPTVWmo1pSkQ.jpeg\" /><figcaption>Verktøy.</figcaption></figure><p>Det hadde stort sett gått med til verktøy. Vi var i en situasjon hvor vi skulle konvertere både privatnettbanken og bedriftsnettbanken vår over på ny plattform. Vi så tidlig at vi kunne få god nytte av en del script og verktøy vi hadde laget. Ledelsen så også at dette hadde potensiale til å bli god investering, så dermed ble vi verktøymakere i tillegg til utviklere.</p><p>Men hva var det egentlig vi så? Hvorfor følte vi det var verdt å bruke dobbelt så mye tid på verktøy i starten som på faktisk konvertering av funksjonalitet?</p><p>Vi kan se på verktøyene våre som en variant av standardiserte, automatiserte prosesser.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/404/1*WHtLpYToCulGsE1EQBP8tg.jpeg\" /><figcaption><a href=\"https://www.amazon.co.uk/Toyota-Way-Management-Principles-Manufacturer/dp/0071392319/ref=sr_1_1?crid=3KSML9RAGVVVO&amp;dchild=1&amp;keywords=the+toyota+way&amp;qid=1600197557&amp;sprefix=the+toy%2Caps%2C200&amp;sr=8-1\">The Toyota Way.</a></figcaption></figure><p>Hvis <a href=\"https://en.wikipedia.org/wiki/Taiichi_Ohno\">Taiichi Ohno</a> og gjengen bak <a href=\"https://agilemanifesto.org/\">smidigmanifestet</a> er foreldrene til <a href=\"https://en.wikipedia.org/wiki/Lean_Manufacturing\">Lean</a> og Smidig, kan vi si at <a href=\"https://no.wikipedia.org/wiki/W._Edwards_Deming\">William Deming</a> er bestefaren. I 1950 inspirerte Deming Ohno og Toyota med det som skulle bli kjernen i <a href=\"https://en.wikipedia.org/wiki/Toyota_Production_System\">Toyota Production System</a>, eller <a href=\"https://en.wikipedia.org/wiki/Lean_Manufacturing\">Lean</a>, som er det amerikanske betegnelsen på det.</p><p>Kjernen i Lean består av to ting:</p><ul><li><strong>Kontinuerlig forbedring</strong> — hvordan skape en organisasjon som har kontinuerlig forbedring som basis i kulturen sin</li><li><strong>Respekt for folk</strong> — trua på at folk som får mulighetene og rammebetingelsene, alltid vil gjøre sitt beste</li></ul><p>Deming mente at basis for kontinuerlig forbedring, er standardiserte prosesser. Hvis vi ikke har standardisert, så er det der vi bør begynne: Finn beste måte å utføre en operasjon på, la alle gjøre operasjonen på denne måten, og sørge for at det er så lett å gjøre det at det føles dumt å la være.</p><p>Vi som jobber med IT kan gjøre det enda bedre enn å standardisere — vi kan ofte automatisere operasjonene i tillegg.</p><p>En operasjon alle 150 utviklerne våre gjør flere ganger om dagen eller i uka, er å opprette brancher med tilhørende byggejobber. Vi har laget oss et scriptrammeverk som heter bob, så hos oss gjør vi dette med onelineren</p><p><em>bob feature begin &lt;featurenavn&gt;</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/848/1*f4IXgDYIYUOORuPHd9QiUg.png\" /><figcaption>bob feature begin og bob ci job open</figcaption></figure><p>Med denne onelineren får vi</p><ul><li>opprettet branchen med rett navnestandard</li><li>opprettet byggejobben for branchen</li><li>sikret at vi får med oss en commithook slik at den automatisk bygger ved push</li></ul><p>Vil vi gå til jobben i Jenkins UIet, skriver vi</p><p><em>bob ci job open</em></p><p>så går vi rett dit i nærmeste nettleser.</p><p>Men vil ikke slike verktøy stå i veien for forbedring, snarere enn å hjelpe?</p><p>Vi tror det viktigste vi kan gjøre for ikke å gå den fellen, er å sørge for at verktøyene våre er så åpne som mulig, slik at alle kan være med å bidra. Har du forslag til en forbedring, legg opp en pull request, og så tar vi det derfra. På den måten får du også eierskap til verktøyene, du merker at du kan forbedre dem selv.</p><p>Siden alle teamene våre stort sett bruker de samme verktøyene, så gjør det at det blir lettere å hjelpe hverandre på tvers av team, og også bytte team. Vi kjenner oss igjen i infrastrukturen, og kan fokusere på funksjonaliteten. På denne måten er verktøyene våre med på å skape fellesskap mellom teamene våre, noe vi ofte føler kan være vanskelig, og som vi jobber mye med på fellesarenaene våre som faggruppene og fagdagen hver torsdag.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*KIIsjnG0nlu1tiWF4-ImXg.png\" /><figcaption>En bil det er lett å starte og kjøre avgårde i.</figcaption></figure><p>Verktøyene våre hjelper ikke bare med forbedring, de gjør ting enklere for oss også. Operasjoner vi gjør ofte, eller burde gjøre ofte, bør være lette å gjøre — det må være lett å gjøre rett. Tenk hvor enkelt det er å starte og kjøre avgårde med bilen over, på tross av hvor kompliserte de mekaniske og elektriske prosessene som faktisk sørger for at bilen kjører, er?</p><p>Vi bruker OpenShift som containerplattform, så et tilsvarende eksempel hos oss kan være det å dra opp et containermiljø for applikasjonen en jobber med lokalt. Hos oss gjør vi det med onelineren</p><p><em>bob openshift up</em></p><p>Vi trenger altså bare disse 16 tegnene og den lokale docker-compose.yaml filen som tilhører applikasjonen, for å spinne opp et fullt testmiljø i openshift for den aktuelle applikasjonen.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/470/1*1TP7RdFG1MaCyo4zLEB3ZQ.png\" /><figcaption>Enkel utenpå, og litt komplisert inni.</figcaption></figure><p>Når ting er automatisert og standardisert, så gjør vi ting likt.</p><p>Et av verktøyene våre som hjelper oss med dette, er applikasjonsgeneratorene våre. Når vi skal lage et nytt api, eller en ny frontendapplikasjon, så genererer vi opp applikasjonene. Dette garanterer blant annet at</p><ul><li>applikasjonene har rett konfigurerert sikkerhet</li><li>at vi har kontroll på hvilke deler av den totale sikkerhet som håndteres av plattformen, og hva som håndteres av applikasjonene selv</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SWLCM5bD_9BFLp2GFgZ5EA.jpeg\" /><figcaption>Like sikkerhetsmekanismer.</figcaption></figure><p>På denne måten kan vi lage mange nye applikasjoner og deploye mange nye endringer, og fortsatt sove godt om natten.</p><p>I del to av denne artikkelserien skal vi fortelle om hvordan verktøyene våre er laget. Vi delte også <a href=\"https://vimeo.com/showcase/7568031/video/459291737\">mer om disse temaene på JavaZone VR</a> tidligere i høst.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=947ff830f81f\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/det-skal-v%C3%A6re-lett-%C3%A5-gj%C3%B8re-rett-del-1-947ff830f81f\">Det skal være lett å gjøre rett</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Vidar Moe"}},{"node":{"title":"Testavdelingen — Alive and Kicking eller Welcome to my nightmare?","link":"https://medium.com/sparebank1-digital/testavdelingen-alive-and-kicking-eller-welcome-to-my-nightmare-d3b70da11c96?source=rss----e3c741b0efee---4","content":{"encoded":"<h3>Testavdelingen — Alive and Kicking eller Welcome to my nightmare?</h3><p>Er test på vei til å dø ut som egen profesjon? Kan vi i SpareBank 1 Utvikling legge ned testavdelingen, som flere andre innenfor bransjen har gjort? Vi jobber jo innenfor et regulert domene og må forholde oss til IKT-forskriften og pålegg og føringer fra Finanstilsynet. Er det et mareritt vi på test skal inn i eller er det en spennende reise vi skal på?</p><figure><img alt=\"Picture of the artist Alice Cooper\" src=\"https://cdn-images-1.medium.com/max/1024/1*K4WfVrABIRHLJf--wVFhqw.jpeg\" /><figcaption>Bilde: <a href=\"https://commons.wikimedia.org/\">commons.wikimedia.org</a></figcaption></figure><p>Fagmiljøet for test og kvalitet i SpareBank 1 Utvikling har endret seg mye de siste årene. Endringsreisen er langt fra over, og vi har gradvis entret ukjent farvann. <em>Help, I need somebody</em> med The Beatles beskriver kanskje en kjent følelse for flere innen testfaget nå om dagen? «Fail fast» er et uttrykk som vi på IT benytter. Vi tester ut hypoteser i raskt tempo, A/B-testing er normalen, og vi kan ta høyere risiko fordi vi oppdager våre egne feil raskt og retter dem så fort at kundekonsekvensen er ingen eller minimal.</p><p>Men — hvis vi oppdager feilene våre så raskt at kundene ikke merker det, kan vi ikke bare kjøre all koden rett i produksjon og tenke som Gloria Gaynor: Samma det, <em>I will survive</em>?</p><p><strong>Welcome to my nightmare…</strong><br> Vi på test kjenner litt på en følelse som sikkert inspirerte David Bowie med flere til å skrive <em>Under pressure</em>. Hva skal vi gjøre nå som utviklerne skal automatisere alt selv? Er det virkelig slik at Bruce Springsteen hadde rett; <em>My best was never good enough</em>? Står vi på test igjen på stasjonen mens resten av IT-bransjen suser av gårde?</p><p>Hvis du har lest boka <a href=\"https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=sr_1_1?dchild=1&amp;keywords=Accelerate&amp;qid=1591865220&amp;s=books&amp;sr=1-1\">Accelerate</a>, stoppet du kanskje opp på avsnittet der det skrives at en av kjennetegnene til suksessfulle team er at det er utviklerne selv som skriver alle automatiske tester, inkludert akseptansetestene. Da er det virkelig <em>Welcome to my nightmare </em>for oss på test. Men er du glad i å lese og har litt utholdenhet (og samtidig litt optimistisk på vegne av test-profesjonen) så flyttet du blikket til neste avsnitt:</p><blockquote>«None of this means that we should get rid of testers. Testers serve an essential role in the software delivery lifecycle, performing manual testing such as exploratory, usability, and acceptance testing, and helping to create and evolve suites of automated tests by working alongside developers.» — Forsgren, Humble, Kim</blockquote><p>Vi har da også testere i nesten alle teamene, og det er ikke ofte vi innrømmer det, men vi blir nok litt lykkelige av å <em>Break stuff</em>. Og fortsatt er det sånn at når det brenner på do i noen av prosjektene vi fortsatt kjører, så kommer IT-direktøren og ber om en erfaren testleder. Da er det han som synger <em>Help, I need somebody</em>! Jeg har i en lang periode fått høre: «Vi trenger ikke flere testledere nå, Marianne» så det er nok fortsatt behov for å jobbe med å øke forståelsen for at det er nødvendig med erfarne testledere tidlig i prosjektfasene. Og samtidig biter vi oss i tunga og forsøker å ikke si som Keith Urban <em>I told you so, </em>når noen kommer og ber om hjelp.</p><p><strong>Konteksten avgjør</strong><br> Testerne og testlederne i SpareBank 1 Utvikling, som designerne og utviklerne våre, trives best i tverrfaglige team der vi sammen jobber mot forretningsmessige mål. Hadde SpareBank1 Utvikling vært en musikal så kunne tittelmelodien vært <em>We are family</em> og Sister sledge hadde vært husbandet. Samtidig har vi innsett at ikke alt lar seg løse i ett team og at også test i SpareBank 1 er avhengig av hva slags system det er man utvikler på eller mot.</p><p>Også er vi jo veldig glad i API’er om dagen! Vi vil heller utvikle et API eller mot et API enn å forholde oss til gamle legacysystemer. Da kan vi bestemme farta selv. Gartner har en modell som kan brukes til å klassifisere systemene etter endringshastighet: Pacelayering. Den gir mye mening i en kontekstsbasert tilnærming til test. Samtidig må du ikke se deg blind på ulike «lag» i arkitekturen, fordi endringer skjer ofte i flere lag og systemer samtidig. Må teamet forholde seg til lange verdikjeder og gamle legacysystemer, som endrer seg sjelden — men mye — når de først gjør det, må de ha en annen testprosess enn et team som stort sett kan iterere på frontend-koden sin og basere videreutviklingen kun på tommel opp eller tommel ned fra kundene. Vi vil altså at det skal være fast and easy, i motsetning til hva Whitesnake prediker i <em>Slow an’ easy</em>. Slow hos oss i SpareBank 1 Utvikling betyr høy risiko og kompliserte releaser.</p><p>Vi har kommet til den erkjennelsen at test og kvalitetssikring av software er kontektsbasert. Når vi blir spurt om hva er teststrategien i SpareBank 1 Utvikling så er svaret enten «det kommer an på»:</p><blockquote>Vis meg systemet ditt/forretningsmålene dine så skal jeg si deg hva strategien er</blockquote><p>eller kort oppsummert:</p><blockquote>Riktig kvalitet til rett tid.</blockquote><p>Tiden for å fokusere på å ha den beste testmetodikken beskrevet og dokumentert er forbi. Nå gjelder det å tenke at verden er dynamisk og vi dokumenterer det vi må. Vi har fokus på automatisering og det neste på lista er automatisert sikkerhetstest. Og med «infrastructure as code» og «pipeline as code» blir vi ikke arbeidsløse med det første. Testavdelingen er definitivt <em>Alive and kicking</em>!</p><p><strong>Kilder og inspirasjon:</strong></p><p><a href=\"https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=sr_1_1?dchild=1&amp;keywords=Accelerate&amp;qid=1591865220&amp;s=books&amp;sr=1-1\">Accelerate</a> — Nicole Forsgren, Jez Humble, Gene Kim</p><p><a href=\"https://www.thoughtworks.com/radar\">Thoughtworks Technology Radar 2020</a></p><p><a href=\"https://www.gartner.com/en/information-technology/glossary/pace-layered-application-strategy\">Pace layering Application Strategy</a> — Gartner</p><p><a href=\"https://www.lloydrodenconsultancy.com/\">Lloyd Roden</a></p><p><a href=\"https://testradar.no/\">Soco Testradar</a></p><p><a href=\"http://www.sqaforums.com/showflat.php?Number=262144&amp;X-ANT-WAF-Attempt=1\">Top ti software testing sanger</a></p><p><strong>Noen Twitter-folk det er verdt å følge:</strong></p><p>· Maaret Pyhäjärvi — @maaretp</p><p>· Lisa Crispin — @lisacrispin</p><p>· Michael Bolton — @michaelbolton</p><p>· Ministry of testing — @ministryoftest</p><p><strong>Favorittspillelisten for testere på Spotify— </strong><a href=\"https://open.spotify.com/playlist/1QnXIxjpLk6kh5i5fgCcDB?si=LTxU25c8S76798MaRTMxnQ\"><strong>Alive and Kicking</strong></a><strong>:</strong></p><figure><img alt=\"A list of songs mentioned in the article\" src=\"https://cdn-images-1.medium.com/max/555/1*ZLIl32t2VQGMYniPYSma9Q.jpeg\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d3b70da11c96\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/testavdelingen-alive-and-kicking-eller-welcome-to-my-nightmare-d3b70da11c96\">Testavdelingen — Alive and Kicking eller Welcome to my nightmare?</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Marianne Falkenås"}},{"node":{"title":"Det er ikke alltid jeg mocker, men når jeg gjør det bruker jeg Troxy!","link":"https://medium.com/sparebank1-digital/troxy-the-opensource-test-proxy-5214b3e224cc?source=rss----e3c741b0efee---4","content":{"encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/361/1*VJkcO73wdxqio0_WjoEyTA.jpeg\" /></figure><p>I SpareBank 1 Utvikling har vi lang erfaring med å teste hvordan våre applikasjoner oppfører seg under last, altså når mange samtidige brukere benytter en applikasjon. Dette skjer som oftest under en test som kalles ytelsestest, loadtest, performancetest, lasttest, ja dere skjønner greia. Når man kjører en av disse testene, så er det ikke alltid greit å også belaste alle bakomliggende systemer. Dette gjelder spesielt når man integrerer mot underleverandører.</p><p>Så hva gjør man da? Jo da får man simulere kallene mot de eksterne systemene med hjelp av et simulerings- eller mockverktøy.</p><p>Om vi går tilbake 15 år i tid var det ikke mange verktøy å velge mellom. Valget ble da å utvikle et eget verktøy som fikk navnet <a href=\"https://github.com/SpareBank1/Troxy\">Troxy</a>. Troxy ble spesialdesignet for å brukes som en simulator av eksterne systemer og måtte ha høy kapasitet for å kunne svare på forespørsler fra flere applikasjoner samtidig under lasttest.</p><p>Troxy kan konfigureres for å settes opp mellom en klient og en webservice. Der fungerer Troxy som en proxy og kan lytte på trafikken og ta opp HTTP-request og HTTP-response. Disse opptakene kan deretter brukes til å svare istedenfor den faktiske tjenesten når applikasjonen sender forespørsler til andre systemer.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*X8BS15_v_tFMEDSpvNADZg.jpeg\" /></figure><p>En av hovedstyrkene til Troxy er at man i tillegg kan trekke ut verdier fra en request og deretter bruke de i responsen som sendes tilbake. Dette er spesielt nyttig om man vil bruke den samme mocken for flere forskjellige testbrukere og der, som et eksempel, fødselsnummer er en verdi som sendes med i request og som i tillegg er med i response. Dette gir noe dynamikk i en ellers statisk oppførsel.</p><p>Troxy kan i tillegg enkelt utvides med små java-klasser der man har full kontroll over request og response, både under opptak og avspilling. Dette gjør at man f.eks. automatisk kan formatere opptak til å tilpasses sine formål, uten manuell redigering i etterkant.</p><p>All funksjonalitet kan skriptes via et API mot Troxy, men trenger man manuelt å endre ting kan dette gjøres via et fullverdig UI. Her finner vi blant annet funksjonalitet for å endre modus på Troxy (Avspilling, Opptak osv), håndtere og redigere mocker, samt sjekke loggstatistikk for antall kall mot forskjellige endepunkter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O3I247aEwSPYASGLNjgzzw.jpeg\" /></figure><p>Troxy har med årene blitt et fullverdig mockverktøy og SpareBank 1 Utvikling bruker det nå, i tillegg som simulator ved lasttester, innen både funksjonell test, automatisert regresjons- og integrasjonstest og som simulering av backend-systemer i vår <a href=\"https://developersparebank1.no\">Utviklerportal</a> for åpne APIer.</p><p>Som et konkret eksempel kan nevnes et testoppsett der det er mulig å konvertere automatiserte ende-til-ende tester til å kjøre mocket, helt uten manuell jobb involvert. Oppsettet tar i utgangspunkt i tester som kjører mot et dockerisert testmiljø inneholdende applikasjon under test sammen med Troxy. Testen kjøres først ende-til-ende med Troxy i opptaksmodus. Deretter kan den samme testen kjøres med Troxy i avspillingsmodus, fullstendig mocket, uten at applikasjonen sender kall bakover mot andre tjenester. Mockene blir lagret sammen med testen og øvrig kildekode.</p><p>Da Troxy er et testverktøy som kan brukes av andre enn bare SpareBank 1 Utvikling, hvorfor ikke dele det som åpen kildekode? Som sagt så gjort, i 2019 ble det tatt en beslutning om å legge ut det kjære mockverktøyet vårt som open source. For å få det til måtte vi rydde litt i kildekoden, og dette ble gjort gjennom et godt samarbeid med våre utviklere på <a href=\"https://medium.com/sparebank1-digital/torsdag-er-den-nye-l%C3%B8rdagen-f547e55aadd3\">deres fagdag</a>.</p><p>Så trenger du et fleksibelt og utvidbart mockverktøy som i tillegg tåler høy last og kan brukes i mange ulike type testscenarier? Kanskje trenger du et godt alternativ til mer etablerte mockverktøy som f.eks <a href=\"http://wiremock.org/\">Wiremock</a>? Eller kanskje trenger du inspirasjon for å lage noe <a href=\"https://github.com/StatensPensjonskasse/moxy\">eget</a>? Test ut <a href=\"https://github.com/SpareBank1/Troxy\">Troxy</a> da vel!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5214b3e224cc\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/troxy-the-opensource-test-proxy-5214b3e224cc\">Det er ikke alltid jeg mocker, men når jeg gjør det bruker jeg Troxy!</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Robert Hammarström"}},{"node":{"title":"Start smart med premortem","link":"https://medium.com/sparebank1-digital/start-smart-med-premortem-3d57636d1237?source=rss----e3c741b0efee---4","content":{"encoded":"<p>Etter å ha gjennomført over 80 <a href=\"https://medium.com/sparebank1-digital/hendelsedrevet-l%C3%A6ring-i-sparebank-1-ba50d96130c1\">post mortemer</a> siden 2017 sitter <a href=\"https://sparebank1.dev/\">SpareBank 1 Utvikling</a> igjen med store mengder verdifull læring, og en trygg arena for å ta frem innsikt sammen etter feil og hendelser. Under arbeidet med post mortem ble vi etterhvert også kjent med en beslektet metode - premortem. Formålet med premortem er å skape læring og forbedring <em>uten</em> at noe har gått galt. En besnærende tanke, men hvordan er det egentlig mulig?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/460/0*VCx6rrhmxDMd2cpK\" /><figcaption>Bilde: <a href=\"https://www.theguardian.com/lifeandstyle/2014/may/10/hindsight-in-advance-premortem-this-column-change-life\">www.theguardian.com</a></figcaption></figure><h4>Hva er premortem?</h4><p>I Harvard Business Review-artikkelen <a href=\"https://hbr.org/2007/09/performing-a-project-premortem\">“Performing a Project Premortem”</a> fra 2007 beskriver <a href=\"https://en.wikipedia.org/wiki/Gary_A._Klein\">Gary Klein</a> en metode for å øke muligheten for at prosjekter lykkes. Ved å gjennomføre premortem i starten av prosjektet, eller før viktige beslutninger skal tas, søkes forbedring mens det fortsatt gjenstår tid og rom for endring. En slik tilnærming fremstår langt mer attraktiv enn alternativet der post mortem utføres etter at prosjektet har gått galt.</p><p>I en premortem forflytter teamet seg mentalt frem i tid til et sted der prosjektet eller organisasjonen har mislykkes. Deretter ser man seg tilbake for å identifisere hva som kunne føre til at det gikk dårlig. Hovedoppgaven til teammedlemmene er å ta frem sannsynlige grunner til at man har feilet og reflektere over funnene.</p><p>Kort beskrevet inneholder premortem følgende:</p><ul><li>Teamlederen tar med seg teamet et år frem i tid og informerer om at prosjektet på dette tidspunktet har feilet spektakulært.</li><li>Teammedlemmene ser seg tilbake og skriver hver for seg ned årsaker til at det gikk så galt.</li><li>Resultatene deles med gruppen ved at et og et notat leses opp av forfatteren. Når den første årsaken er presentert leser nestemann opp en ny. Slik går runden videre i gruppen helt til alle punktene er dokumentert.</li><li>Teamet reflekterer over innspillene mtp. hvordan man kan styrke sin plan.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8MPh3QZd3GXQVcxweXiVtA.jpeg\" /><figcaption>Diskusjon om mulige grunner til at rekruttering av utviklere gikk galt i 2020.</figcaption></figure><h4>Hvorfor er premortem en god ide?</h4><p>Gary Klein viser til at effekten av “prospective hindsight” i premortem er betydelig høyere enn det tradisjonelle spørsmålet “Hva kan gå galt?” ved starten av et prosjekt.</p><blockquote>“Research conducted in 1989 by Deborah J. Mitchell, of the Wharton School; Jay Russo, of Cornell; and Nancy Pennington, of the University of Colorado, found that prospective hindsight — imagining that an event has already occurred — increases the ability to correctly identify reasons for future outcomes by 30%.“</blockquote><blockquote>— Gary Klein</blockquote><p>Videre peker Klein på at premortem kan <a href=\"http://idl.iscram.org/files/veinott/2010/1049_Veinott_etal2010.pdf\">bidra til å redusere effekten av overmot </a>ved starten av prosjekter. Teknikken skaper også trygge rammer for å kunne løfte frem og diskutere problemer. Ved at metoden belønner vanskelige innspill, bygger man kultur for å prate om utfordringer.</p><p>Psykolog og nobelprisvinner i økonomi Daniel Kahneman omtaler premortem i sin anerkjente bok “<a href=\"https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555\">Thinking, Fast and Slow</a>”. Her er <a href=\"https://www.youtube.com/watch?v=MzTNMalfyhM\">lenke til en kort video</a> hvor Kahneman beskriver metodens positive effekter.</p><blockquote>“What the premortem technique does, which I think is beautiful, is that it legitimizes dissent. Actually, it turns things around. It rewards people for being imaginative in finding flaws in the current plan.”</blockquote><blockquote>— Daniel Kahneman</blockquote><h4>Tid for eksperiment</h4><p>På slutten av 2019 grep vi sjansen til å teste ut metoden ifbm. satsing på et nytt produktområde. Erfaringen fra første premortem var positiv, der teamets refleksjon skapte innsikt med betydelig verdi for deres videre arbeid. De positive erfaringene gav mersmak, og vi har nå prøvd ut premortem på følgende områder:</p><ul><li>Partneres bruk av SpareBank 1 sin finansplattform</li><li>Rekruttering av utviklere</li><li>Organisering av utviklingsteam med økt ansvar</li><li>Covid-19 situasjonen (remote sesjon)</li></ul><h4>Vår gjennomføring</h4><p>I premortemene som er utført til nå har det vært gunstig med en eller to dedikerte personer til å fasilitere sesjonen. Psykologisk trygghet er et viktig premiss for arbeidet som skal finne sted. Tydelig fokus på “blaimfree” dialog med trygge rammer vil være sentralt for en vellykket gjennomføring. Vi har derfor innledet hver premortem med en introduksjon av selve konseptet, inkludert viktigheten av å følge anbefalte retningslinjer. Ut over introduksjonen har det ikke vært behov for at teammedlemmene har forberedt seg særskilt til et premortem.</p><p>For oss har det viktigste forarbeidet vist seg å være konstruksjonen av caset som har feilet spektakulært. En sterk historie som fremføres med innlevelse og troverdighet er utgangspunktet for å skape engasjement i gruppen. Både kreativitet og fremføring har så langt vært imponerende.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yfa8QNdLvD8Yqg_6VXaavA.jpeg\" /><figcaption>Teamet skriver ned grunner til at det gikk galt.</figcaption></figure><p>Etter at teamet er tatt med frem i tid, og informert om at man har feilet stort, er det dags for å reflektere. I denne delen av premortem har teamet sett seg tilbake og notert hver for seg årsaker til at utfallet ble negativt. Resultatene er så blitt delt i gruppen ved at et og et notat presenteres av skribenten. Årsaken henges deretter opp på veggen etter eventuelle spørsmål og kommentarer. Med første notat ferdig presentert leser nestemann opp en ny lapp. Runden blir avsluttet når alle årsakene er presentert og klistret på veggen.</p><p>Med gjennomgang av mulige feilkilder sluttført var neste steg å velge ut hva man skulle fokusere på med resterende tilgjengelige tid. Deltagerne grupperte da først sammenfallende punkter og stemte så frem årsakene som var mest interessante å drøfte dypere mtp. rotårsaker og mulige tiltak. Prioriteringen ble gjort vha.“<a href=\"https://en.wikipedia.org/wiki/Dot-voting\">dot-voting</a>”.</p><p>Når arbeidsmøtet er ferdig og deltagerne har mottatt velfortjent takk for bidrag og innsats gjenstår noe etterarbeid. Dette består i at innspillene oppsummeres og deles med teamet, samt deles med andre som kan ha nytte av resultatet. Noen punkter krever ytterligere refleksjon og analyse, mens andre allerede har resultert i konkrete tiltak.</p><h4>Kan premortem bli for negativt?</h4><p>Et punkt vi var nysgjerrige på var om det kan bli for mye negativt fokus i en premortem? Daniel Kahneman trekker frem en bekymring han har registrert ifbm. at organisasjoner har et grunnleggende ønske om optimisme. Her fryktes handlingslammelse hvis man blir kjent med reell kostnad og risiko, som et resultat av at man kvier seg for initiativ som blir utfordrende. Kahnemans svar til dette er at balansepunktet mellom realisme og optimisme er en reell diskusjon. Samtidig argumenterer han for at å kjenne til feilkilder uansett er nyttig. Vi har så langt ikke opplevd utfordringer knyttet til at fokus på risikopunkter skaper negativ stemning eller frykt for handling. Inntrykket har tvert i mot vært at det skapes energi og et sterkt ønske om tiltak for å forbedre situasjonen.</p><h4>Tilbakemeldinger fra deltagere</h4><p>Et tydelig mønster i tilbakemeldingene etter våre premortemer er at det er positivt å jobbe med problemer før de oppstår. Deltagerne synes det er nyttig å være pro-aktive og reflektere over hva som er viktig. I tillegg liker man selve formatet, der lettbent og enkel gjennomføring skaper en positiv måte å diskutere mulige utfordringer på. Samtidig lar strukturen gruppa fokusere på det de selv ønsker uten negativt press eller stress. Videre vurderes premortem som en lærerik øvelse der det kommer frem punkter man ikke har tenkt på før.</p><p>Kan vi risikere at historien som fremføres er for negativ? En av tilbakemeldingene fra deltagerne stilte spørsmålstegn ved om historien som ble fortalt i for stor grad var “worst case”. Dette spørsmålet er det verdt å reflektere over. Selv om våre case til nå ser ut til å ha truffet greit mtp. balanse på alvorlig konsekvens og realisme understreker punktet viktigheten av at materialet som presenteres er godt oppbygd og troverdig presentert.</p><h4>Oppsummering</h4><p>I SpareBank 1 Utvikling er post mortem en god følgesvenn for trygg læring når noe har gått galt. Det har vært lærerikt å teste ut en teknikk som søker å redusere behovet for bruk av post mortem. Erfaringene så langt støtter hypotesen om at premortem kan være en bidragsyter til dette. Gjennom refleksjon og innsikt mens det fortsatt er tid og mulighet for forbedring øker sannsynligheten for at det man jobber med blir vellykket.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3d57636d1237\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/start-smart-med-premortem-3d57636d1237\">Start smart med premortem</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Kristoffer Berg"}},{"node":{"title":"Ikke jobb mens jeg forstyrrer — del to","link":"https://medium.com/sparebank1-digital/ikke-jobb-mens-jeg-forstyrrer-del-to-3b389d1cb71d?source=rss----e3c741b0efee---4","content":{"encoded":"<h3>Ikke jobb mens jeg forstyrrer — del to</h3><p>I <a href=\"https://medium.com/sparebank1-digital/ikke-jobb-mens-jeg-forstyrrer-2a9e14824033\">del en av denne historien</a> fortalte jeg at jeg var på vei til å bli utbrent.</p><p>Kombinasjonen av sterkt leveransepress og hyppige avbrudd var i ferd med å spise oss opp. Hvordan skulle vi klare å levere forbedringer raskt og med høy kvalitet, når vi ble avbrutt hele tiden?</p><p>Gjennom å gjennomføre en <a href=\"https://en.wikipedia.org/wiki/A3_problem_solving\">A3</a> identifiserte vi de viktigste typene avbrudd vi ble utsatt for:</p><ul><li>Møter — både egne og andres</li><li>Elektronisk kommunikasjon — chat, epost, SMS osv</li><li>Selvpåførte konsentrasjonsavbrudd — tankene spinner avgårde, enten på oppgaver en vet en skal gjøre, eller en kommer på nye oppgaver som trengs å gjøres</li><li>Pirk på skulderen og kapring ved kaffeautomaten — “Har du fem minutter?”</li></ul><p><a href=\"https://medium.com/sparebank1-digital/ikke-jobb-mens-jeg-forstyrrer-2a9e14824033\">Del en</a> beskrev hvilke grep vi gjorde for å håndtere møtene.</p><p>Men hva har vi gjort for å få kontroll med resten?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lKEpieAVxl3JAbOnnU59MQ.jpeg\" /><figcaption>Foto: Getty Images via IStock.</figcaption></figure><h3>Jeg sendte deg akkurat en epost</h3><p>Det er godt mulig. Det vet jeg ikke noe om. For jeg har skrudd av epostklienten. Jeg prøver så godt jeg kan å ha den lukket gjennom dagen. Helst ønsker jeg å sjekke epost om morgenen, etter lunsj, og før jeg går hjem om ettermiddagen. Har du sendt meg en epost på den private epostadressen min, så sjekker jeg den ikke før på kvelden.</p><p>Før hadde vi epostklienten oppe, gjerne med pushvarsling aktivert, hele dagen. Dette var en av årsakene til at vi endte opp i den uholdbare situasjonen vi var kommet i. Det er en befrielse å kunne håndtere eposter på bestemte tider på dagen, heller enn å stadig skulle bli avbrutt av mer eller mindre viktige eposter.</p><p>Ved å håndere epostene på denne måten, får jeg også muligheten til å prioritere arbeidet epostene resulterer i. Når jeg kan se gjennom flere eposter samtidig, kan jeg lettere ta stilling til hvilke som bør følges opp når.</p><p>Kanskje har du ditt eget system for å håndtere oppgavene dine? For meg fungerer det best med en liste i et enkelt tekstdokument hvor jeg kan notere så mye eller lite jeg trenger om det som skal gjøres.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MBN0WK-3Z6tdeVQ48CIaPQ.jpeg\" /><figcaption>TextEdit oppgavedokumentet mitt ble litt kjedelig, så det ble dette bildet istedet.</figcaption></figure><p>Når en oppgave er gjort, sletter jeg den fra listen min. Det gir en god følelse. Derfor er det lurt å skrive opp også enkle oppgaver som å svare på en epost. Det lille dopaminkicket du får når du har gjort en oppgave og kan slette den fra listen, det har du fortjent.</p><h3>Det rister i buksa</h3><p>Ja, det gjør det. Men det er sjelden. For jeg har skrudd av nesten alle pushvarslene mine. De eneste pushvarslene jeg har igjen er SMS, Facebook Messenger og direktemeldingene på Slack.</p><p>Før hadde jeg pushvarsler med vibrasjonsvarsling på det meste, inkludert Facebook og private epostvarsler. Det var gøy i starten, men etterhvert som jeg ble mer og mer bevisst på hvordan disse avbruddene påvirket meg, var det en befrielse å skru dem av. Jeg har aldri sett meg tilbake.</p><h3>Jeg kom på en ting</h3><p>Det gjør jeg hele tiden. For å få det ut av hodet og jobbe videre med det jeg holder på med, så må jeg legge til en ny linje i oppgavelisten min. Da får jeg også samtidig prioritert oppgaven i forhold til alt det andre som står der som skal gjøres.</p><p>Av og til er det utfordringer som er såpass krevende at føles umulig ikke å tenke på det. Tankene blir trukket mot det hele tiden. Da holder det ikke bare å notere det ned i oppgavelisten. Da må jeg også ta meg tid til å finne ut av når jeg skal jobbe med problemstillingen. Deretter booker jeg et møte i kalenderen med meg selv, slik at jeg vet at jeg har god nok tid til å jobbe grundig med det. Først da klarer hodet slippe taket, og jeg kan jobbe videre med det jeg holder på med.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ilIDzF-Y9Z4oSOj8qXsAqQ.png\" /><figcaption>Det kan være lurt å sette av tid i kalenderen til å jobbe med krevende utfordringer.</figcaption></figure><h3>Så du Slackmeldingen min?</h3><p>Det kommer an på. For jeg har ofte skrudd av Slackklienten også. Er jeg midt inne i noe, så er det ikke sikkert jeg sjekker mobilen, selv om Slackappen gjør et rist.</p><p>Jeg prøver å sjekke Slack samtidig som jeg sjekker epost. Da oppnår jeg den samme fordelen som nevnt over: Jeg kan gå gjennom alle meldingene og epostene samtidig, og lage en prioritert liste over hva som skal håndteres når. Er det trivielt å svare på meldingene, så svarer jeg selvfølgelig på dem med en gang.</p><p>Men hva når noen trenger hjelp med en gang? Er det noen som trenger hjelp eller lurer på noe, så er det som oftest relatert til noe jeg jobber med. Jeg jobber i team. Dermed er det som oftest noen av teammedlemmene som trenger hjelp eller lurer på noe. Da prater vi heldigvis sammen. Det er som oftest alltid mer effektivt enn skriftlig på Slack, og mye hyggeligere.</p><h3>Har du tid til å tenke?</h3><p>Vi som jobber med kunnskapsarbeid, er ansatt for å løse komplekse problemstillinger som ofte aldri er løst før i vår kontekst. Samtidig er det en forventning om at vi skal være tilgjengelig for alle spørsmål, meninger, informasjon og møter i alle kanaler hele tiden. Dette er en situasjon som kan være farlig, og i verste fall føre til utbrenthet og årelange fravær fra arbeidslivet.</p><p>Det lille dopaminkicket vi får for hver eneste Slackmelding, Facebookpost, møteinnkalling eller epost vi mottar, er godt. Følelsen vi får når vi har løst en komplisert oppgave som ofte kommer mange andre til nytte, er bedre.</p><p>For å løse flere av de kompliserte oppgavene, må vi gi oss selv tid og rom til å tenke. Vi løser oppgavene best når vi jobber sammenhengende uten forstyrrelser.</p><p>Ved å ta tilbake kontrollen over tiden min, unngikk jeg trolig å bli utbrent. Jeg håper du også tar tilbake kontrollen over tiden din. Det tror jeg er best for oss alle.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3b389d1cb71d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/ikke-jobb-mens-jeg-forstyrrer-del-to-3b389d1cb71d\">Ikke jobb mens jeg forstyrrer — del to</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Vidar Moe"}},{"node":{"title":"Når hårete mål for rekruttering gruses på deltid","link":"https://medium.com/sparebank1-digital/n%C3%A5r-h%C3%A5rete-m%C3%A5l-for-rekruttering-gruses-p%C3%A5-deltid-52f3d12c0a92?source=rss----e3c741b0efee---4","content":{"encoded":"<p><em>Historien om hvordan SpareBank 1 Utvikling lykkes med felles strekkmål for rekruttering.</em></p><p>Mot slutten av 2018 fikk vi en monumental utfordring: Gode erfaringer med insourcing til utviklingsorganisasjonen over flere år gjorde at <a href=\"https://sparebank1.dev/\">SpareBank 1 Utvikling</a> ønsket å øke satsingen på rekruttering ytterligere for 2019. En god tanke, men ikke en vi var alene om. Markedet vi opererer i er krevende, og konkurransen om de flinke folkene er knallhard — med langt større etterspørsel enn tilbudsside. Særlig er dette tydelig i utviklermarkedet, der vårt behov er størst. Rekrutteringsapparatet vårt gikk allerede for full maskin. Det var ikke enkelt å se for seg hvordan vi skulle lykkes med en ambisiøs oppskalering. Strekkmålet som ble satt for 2019 ble imidlertid oppnådd allerede ila. september måned. For året totalt ble måloppnåelsen hele 138%. Hvordan var dette mulig?</p><h3>Tydelige mål hjalp oss</h3><p>For å hjelpe oss med å holde fokus over tid valgte vi en <a href=\"https://en.wikipedia.org/wiki/OKR\">Objectives and Key Results</a>-tilnærming. Arbeidet med å ta frem mål ble startet tidlig ved å kombinere dialog med ledelsen med input fra de som ville være involvert i rekrutteringen. Vårt <em>objective</em> ble “<em>Leveransekraft i tverrfaglige team med høy andel ansatte utviklere og teamledere</em>”. For å realisere dette kom vi fram til to målbare <em>key results</em>.</p><p>Det første var et strekkmål på hvor mange vi skulle ansette. Tallet var basert på selskapets overordnede mål, kombinert med at hver enkelt personalleder og teamleder ble utfordret på hva de kunne bidra med. Resultatet av denne “top down/bottom-up”-prosessen ble et <em>key result</em> om å ansette 21 personer ila 2019. Ambisjonen var på grensen til å være ubehagelig høy, og betydelig over resultatet for 2018. Det er verdt å merke seg at 2018 hadde vært vårt beste år for rekruttering noensinne. Vi visste rett og slett ikke helt hvordan vi skulle nå det nye målet. Derfor etablerte vi enda et <em>key result</em> som utfordret oss selv til å teste ut minst én ny måte å drive rekruttering på. For eksempel ved å teste ut en ny måte å treffe kandidater på. På denne måten forsøkte vi å sikre et tydelig spor for læring og videreutvikling av rekrutteringsprosessen vår.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/498/0*p4sHVx9p2C9YrIXs\" /></figure><h3>Ambisjonen trigget forbedringer</h3><p>Vårt strekkmål om 21 ansettelser gjorde at måten vi jobbet med rekruttering på måtte forbedres. Vi var nødt til å se nærmere på hele prosessen. På starten av året ble følgende elementer vurdert som sentrale for videreutvikling:</p><ul><li><em>Styrke fokus på hva målgruppen er opptatt av. Her dro vi stor nytte av innsikt og læring fra en rekrutteringsundersøkelse gjennomført av et eksternt firma.</em></li><li><em>Bygge videre på #nofilter-profil i annonser og dialog med kandidater. (#nofilter ble hentet fra en presentasjon av Thimon de Jong under rekrutteringskonferansen “The Hunt” 2018.) En #nofilter-strategi innebærer å være åpen om både styrker og svakheter. Vi økte bl. a. fokuset i stillingsannonsene på utfordringer vi har.</em></li><li><em>Skape engasjement om et felles målbilde. Dette var viktig særlig mtp. at de som står for rekrutteringsarbeidet gjør dette som en “deltidsjobb”, ved siden av det man jobber med i utviklingsteamene til vanlig. Vi var helt avhengige av å skape kraft i en distribuert modell for å skalere godt nok.</em></li><li><em>HR som en integrert del av laget. Nøkkelkompetanse innen HR ble inkludert i organisasjonen, mens den tidligere var plassert lenger unna der rekrutteringsarbeidet foregikk.</em></li><li><em>Være mer synlige i miljøet vi rekrutterer fra. Det ble lagt en konkret plan for hvordan vi skulle løfte oss og bygge kjennskapen til miljøet gjennom deling i artikler, presentasjoner mm.</em></li><li><em>Løpende eksperimenter med hvordan vi rekrutterer. Planen la til grunn et løft av kvaliteten i rekrutteringsarbeidet gjennom kontinuerlig forbedring, bl.a. gjennom å sette spesifikke mål om å teste ut nye måter å rekruttere på.</em></li></ul><h3>Beskjeden start styrket fokuset</h3><p>Året startet tregt. Januar og februar måned kom og gikk uten at det resulterte i signeringer. Stemningen var imidlertid god. Takket være OKR-rytmen med tavlemøter for løpende fokus på både status og nødvendige tiltak styrket pipeline for kandidater seg jevnt og trutt. I mars ga arbeidet tydelig uttelling ved signeringer med hele fire ansatte. Vi var kommet skikkelig i gang, og modellen skulle etterhvert vise seg å fungere meget bra.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*d8mqD742o5kgjk3v\" /><figcaption>Antall signeringer fordelt på måneder i 2019.</figcaption></figure><p>Det var flere faktorer som bidro til denne utviklingen. Innføringen av fagdag hver torsdag for utviklere ble etterhvert mer kjent utenfor huset. Dette kom som et resultat av presentasjoner og erfaringsdeling på forskjellige eksterne arenaer, blogginnlegg skrevet av oss selv, artikler i media, samt tradisjonell “word of mouth”. Dette bidro til at flere kandidater var nysgjerrige på hvordan det var å jobbe i SpareBank 1 Utvikling. Videre var det nyttig for oss å kombinere spesialistannonser med mer generelle stillillingsannonser. Kombinasjonen gjorde at vi var var til stede i markedet stort sett hele tiden, samtidig som de fleste utviklerprofiler fant noe som passet for seg. Tilsiget av kandidater økte merkbart i perioden. Til tross for den beskjedne starten ble det ambisiøse målet oppnådd allerede i september. Det stoppet heller ikke der. Totalt endte vi opp med hele 29 ansettelser innen utgangen av året.</p><h3>Viktige elementer for at vi lykkes</h3><p>På slutten av året gjennomførte vi en retrospektiv for å identifisere styrker og svakheter på rekrutteringsarbeidet. Punktene under ble vurdert som tydelige styrker:</p><ul><li><em>Den distribuerte modellen gjør at mange kan bidra etter eget ønske og kapasitet.</em></li><li><em>Hvem som holder i generelle prosesser går på rundgang. Dette førte til at ingen ble sittende med ansvaret for en stillingsannonse og prosess over for lang tid.</em></li><li><em>Vårt fokus på </em><a href=\"https://medium.com/sparebank1-digital/torsdag-er-den-nye-l%C3%B8rdagen-f547e55aadd3\"><em>faglig utvikling for våre ansatte </em></a><em>begynte å bli kjent utenfor huset.</em></li><li><em>OKR-tilnærmingen hjalp oss å sammen sette et mål og å holde fokus over tid. Den skapte en fast rytme for å snakke om status og behov for tiltak på egne tavlemøter.</em></li><li><em>Bruk av en dedikert flyt-tavle som viste status hver enkelt prosess og kandidat.</em></li><li><em>Egen “OKR-shepherd” for rekruttering som hjalp til med at vi aldri mistet fokus på målet.</em></li><li><em>Datadrevet arbeid basert på kundeinnsikt for målgruppene våre.</em></li><li><em>Tilgjengeliggjøring av praktisk informasjon om rekruttering.</em></li><li><em>Eksperimenter med nye måter å rekruttere på førte til at vi lærte mye, og flere elementer som ble testet ut fungerte så godt at de ble videreført.</em></li><li><em>Strukturert jobbing med sommerjobb åpnet opp et nytt segment for oss i utviklermarkedet.</em></li><li><em>Fokuset på hver enkelt kandidats prosess og opplevelse ble styrket ved at HR kom med på laget. Dette skapte bedre flyt og fart i prosessen.</em></li></ul><h3>Oppsummering</h3><p>Rekruttering hos oss er ikke outsourcet til en egen funksjon. Tvert imot er ekspertene på fagområdene, sammen med sentrale personer i de tverrfaglige teamene, i front — på deltid. Dette gjør at kandidater møter de man vil jobbe sammen med, og som er nærmest arbeidet som skal utføres. Kraften i dette og den distribuerte modellen, kombinert med et OKR-målbilde som ble en naturlig del av det vi fulgte med på i det daglige, skapte en sterk rekrutteringsmuskel. Denne var i stand til å favne over et bredt spekter av prosesser og kandidater. Dette gjorde det mulig å lykkes med et viktig mål for organisasjonen, basert på overkommelig deltidsarbeid hos hver enkelt som var involvert.</p><p>Vi liker utfordringer og har satt et nytt strekkmål på rekruttering for 2020 som er enda et steg opp fra fjoråret. Satsingen innebærer at arbeidet med å videreutvikle hvordan vi jobber med rekruttering fortsetter. For å lykkes med ytterligere skalering blir løpende forbedring med utgangspunkt i kundefokus sentralt for hvordan vi skal klare å tiltrekke oss de flinke folkene.</p><p><em>Skrevet av:</em></p><p><a href=\"https://medium.com/u/e05b2b496862\"><em>Kristoffer Berg</em></a></p><p><a href=\"https://medium.com/u/3aab672ee2b8\"><em>Lars Kirkhus</em></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=52f3d12c0a92\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/n%C3%A5r-h%C3%A5rete-m%C3%A5l-for-rekruttering-gruses-p%C3%A5-deltid-52f3d12c0a92\">Når hårete mål for rekruttering gruses på deltid</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Lars Kirkhus"}},{"node":{"title":"Er du utvikler? Gratulerer med sikkerhetsjobben!","link":"https://medium.com/sparebank1-digital/er-du-utvikler-gratulerer-med-sikkerhetsjobben-2ee00019f978?source=rss----e3c741b0efee---4","content":{"encoded":"<p>I SpareBank 1 Utvikling legger vi mye innsats i å lage løsninger med riktig sikkerhet innebygd. Noe av det gjøres av oss med “sikkerhet” i stillingstittelen, men den viktige sikkerhetsjobben er det utviklerne som gjør.</p><p>Av og til er sikkerhet enkelt å se. Det kan være autentisering, kryptering eller validering, eller annen sikkerhetsfunksjonalitet. Det er åpenbart viktig at det virker, men applikasjonssikkerhet er mye mer enn som så. Sikkerhet er summen av hvordan applikasjonen din reagerer når noen med uærlige hensikter pirker borti applikasjonslogikken eller den tekniske stacken. Sikkerhet er en egenskap i applikasjonen, og oppstår eller forsvinner i den daglige utviklingen av <em>helt vanlig kode.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/692/1*lFEIASdcE4WmltDoNEhd6A.png\" /><figcaption>Denne er katastrofal. Én ordinær kodelinje, så faller hele korthuset sammen. Ser du hvor?</figcaption></figure><p>Heldigvis jobber de fleste av oss også mer eller mindre smidig. Et nøkkelkonsept her er at utviklingsteamene har selvstendig ansvar for applikasjonene sine. Det inkluderer sikkerhetsegenskapene, like mye som ytelsen og brukeropplevelsen. Sikkerhetsarbeidet i en utviklingsorganisasjon er selvsagt mer enn å peke på at utviklerne har ansvaret, men man vil aldri lykkes om utviklerne ikke har forutsetningene for selv å oppdage at det kan være fare på ferde i dagens fjerde pull request.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/992/1*LqUn2Eg9uBV8M2CxWMbntw.png\" /><figcaption>Slike endepunkt som spiser JSON har du sikkert tusen av. Payload parses av et rammeverk, og du får et objekt ut. Vakkert. Men er du sikker på hva slags objekter som faktisk blir lagd? Eller at det bare er JSON som godtas?</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1009/1*qW3OzQo-xrLmWPaoIDcUKQ.png\" /><figcaption>Her har jeg oppdaget at applikasjonen godtar Content-Type satt til YAML! Da kan jeg unytte at rammeverket RESTeasy <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-9606\">tillater at man kan lage helt vilkårlige objekter.</a> Her lager jeg et ScriptEngineManager-objekt, som tar inn en URLClassLoader, som laster min javakode fra min server og kjører det på din. Dette er <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">insecure deserialization</a>, som bl.a. Jackson har hatt mye av.</figcaption></figure><p>Hvordan sørger man for at utviklerne lukter sikkerhetsuglene i kodemosen? At SQL må være parameterisert, eller at serialisering har sine fallgruver? Som mye annet er det øvelse som gjelder, og vi har den tvilsomme fordelen av at vi som bransje gjentar de samme sikkerhetsfeilene om og om igjen. Dermed kan man øve seg på alt som har gått feil før. Her følger noen varianter vi i SpareBank 1 Utvikling har prøvd med stort hell! Først en kort oversikt, så detaljer om hver enkelt, med fordeler og ulemper:</p><ol><li>Natas: Enkel testing av sårbar app</li><li>KWASHC: Fiks en rekke sårbarheter i en webapp</li><li>Hack yourself first: Strukturert workshop</li><li>Bugbounties: Test andres løsninger på lovlig vis</li><li>Online training</li></ol><p>Til slutt er det også et avsnitt om nyttige verktøy for sikkerhetstesting.</p><h3>Natas</h3><p><a href=\"https://overthewire.org/wargames/natas/\">Natas fra Over the wire</a> består av et tredvetalls “capture the flag”-oppgaver (CTF), der man skal utnytte en sårbarhet i oppgaveapplikasjonen for å skaffe seg en nøkkel som man bruker for å få tilgang til neste oppgave.</p><p>Fordeler</p><ul><li>Krever ikke noe oppsett. Det er bare å starte på oppgave 0 og fortsette derfra.</li><li>Fungerer godt som gruppearbeid.</li><li>Dekker svært mange vanlige sårbarhetsklasser, gjerne i flere varianter eller med utilstrekkelige fikser.</li><li>Går over http og ikke https, så forutsetter ikke at man må sette opp sertifikathåndtering i webproxy (se avsnitt om verktøy).</li></ul><p>Ulemper</p><ul><li>Kommer ikke med noen form for forklaring eller introduksjon til sårbarhetene, så det er nok en del av oppgavene som kan være vanskelige å starte på om man står på bar bakke. Man finner fasit for oppgavene om man søker, men da må man ha litt disiplin for ikke å bare lese hele løsningen.</li><li>Ikke fokus på hvordan man bør fikse sårbarhetene.</li></ul><h3>Kantega Web Application Security Hero Challenge (KWASHC)</h3><p><a href=\"https://github.com/kantega/kwashc\">KWASHC</a> er i stor grad utviklet av Kantega i Trondheim (si navnet litt fort!). Hovedfokuset er ikke på å finne sårbarhetene, men å fikse dem i koden. Består av en serverkomponent med oppgaver og scoreboard, og en <a href=\"https://github.com/kantega/kwashc-webapp/\">sårbar bloggtjeneste</a> skrevet i Java.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/796/1*LPMZ2Vc4OvaUc6toGNOt_w.png\" /><figcaption>Mange røde lys. Her trengs en Security Hero!</figcaption></figure><p>Fordeler</p><ul><li>Fokus på sikker koding, og ikke testing.</li><li>Forklarer sårbarhetene, så man har et greit grunnlag for å finne løsninger selv om det er nytt stoff.</li><li>Open source, så du kan tilpasse eller utvide som du vil.</li><li>Scoreboard gjør det underholdende å kjøre i mild konkurranseform, gjerne mellom grupper.</li></ul><p>Ulemper</p><ul><li>Krever litt lokalt oppsett.</li><li>Ikke den aller mest moderne tekniske frontendstacken, med Spring MVC og serverside-rendret jsp. Kanskje du vil modernisere den?</li></ul><h3>Hack yourself first</h3><p><a href=\"https://www.troyhunt.com/\">Troy Hunt</a>, bl.a. kjent for <a href=\"https://haveibeenpwned.com/\">‘; — have i been pwned?</a>, holder en veldig god applikasjonssikkerhetsworkshop kalt <a href=\"https://www.troyhunt.com/workshops/\">Hack yourself first</a>.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FfBFLCP06vyA%3Ffeature%3Doembed&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DfBFLCP06vyA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FfBFLCP06vyA%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/27fbf4aad2a99001fe4a10c9369b5cac/href\">https://medium.com/media/27fbf4aad2a99001fe4a10c9369b5cac/href</a></iframe><p>SpareBank 1 Utvikling har både leid inn Troy for å holde denne workshopen on-site, og sendt enkeltutviklere på <a href=\"https://ndc-security.com/workshop/hack-yourself-first-how-to-go-on-the-cyber-offence/\">fellesworkshops hos NDC Security</a>. Det er en blanding av undervisning og oppgaver over to dager.</p><p>Troy har også mye <a href=\"https://www.pluralsight.com/authors/troy-hunt\">innhold online på Pluralsight</a>, inkludert <a href=\"https://www.pluralsight.com/courses/hack-yourself-first\">Hack yourself first i videoform</a>. Det er nok likevel ikke helt det samme som å delta på en workshop.</p><p>Fordeler</p><ul><li>Nøkkelferdig opplegg fra profesjonell kursholder.</li><li>To fulle dager lar en gå litt i dybden på mange tema. Holder man workshopen internt legger det rette til gode diskusjoner om hvordan man selv bygger løsninger.</li></ul><p>Ulemper</p><ul><li>Koster en del.</li></ul><h3>Bugbounties</h3><p>I år opprettet vi en applikasjonssikkerhetsgruppe for jobbing sammen på <a href=\"https://medium.com/sparebank1-digital/torsdag-er-den-nye-l%C3%B8rdagen-f547e55aadd3\">fagdagen</a>. Der har vi blant annet tenkt å jobbe med bugbounties. Bugbounty-program er uorganisert sikkerhetstesting: Firma registrerer løsningene sine hos tilbydere som <a href=\"https://www.bugcrowd.com/\">Bugcrowd</a> eller <a href=\"https://www.hackerone.com/\">HackerOne</a>, og så kan hver og en av oss sikkerhetsteste dem fritt innenfor de rammene de spesifiserer. Det er en veldig god øvelse på å få se ting fra angriperens perspektiv. -Hva inneholder denne applikasjonen? Hva slags teknologistack finner vi, og hvordan kan vi prøve å misbruke funksjonalitet eller implementasjon?</p><p>HackerOne har forøvrig en flott <a href=\"https://hackerone.com/hacktivity\"><em>Hacktivity</em></a>-side, der fulle rapporter på publiserte sårbarheter ligger. Mye fin inspirasjon.</p><p>Fordeler</p><ul><li>Det blir ikke mer realistisk enn produksjonsløsninger.</li><li>Man får utforske varierte teknologistacker, og får reflektere litt over likheter og forskjeller, og patterns som legger opp til sårbarheter. Da blir det enklere å gjenkjenne dem i egne systemer.</li><li>Det er veldig tilfredsstillende når man finner noe!</li><li>En del av programmene utbetaler penger for funn.</li></ul><p>Ulemper</p><ul><li>Systemene som er del av slike programmer er typisk ganske modne, og det kan være relativt utfordrende.</li><li>I motsetning til opplæringsløsninger og CTF’er er man aldri sikker på om det faktisk er en sårbarhet å finne i den delen av løsningen man pirker på.</li><li>Man må være den første som rapporterer en gitt sårbarhet i en løsning for å bli premiert direkte. Det er likevel tilfredsstillende å finne dem.</li><li>Programmene krever typisk en form for proof-of-concept-angrep som beviser sårbarheten. Avhengig av sårbarheten kan det være omfattende å lage. Se <a href=\"https://hackerone.com/hacktivity\">hacktivity</a> for eksempler.</li></ul><h3>Online training</h3><p>Flere leverandører har opplegg for guidet selvopplæring i applikasjonssikkerhet. SpareBank 1 Utvikling har foreløpig ikke valgt å gå for en slik løsning, men det kan være det passer andre utviklingsorganisasjoner bedre. Av de jeg har prøvd selv, virker <a href=\"https://www.adversary.io/\">Adversary</a> som en av de mer komplette. Du kan teste dem selv, med <a href=\"https://blog.adversary.io/facebook-hack\">denne gjennomgangen av en feil i autorisasjonskontrollen Facebook hadde i 2018</a>.</p><p><a href=\"https://portswigger.net/web-security\">Portswigger Academy</a> er gratis, og har også noen gode labs det er verdt å ta en kikk på.</p><p>Fordeler</p><ul><li>Lav terskel for å komme i gang.</li><li>Dekker typisk bredt.</li></ul><p>Ulemper</p><ul><li>Noe varierende kvalitet og forvirrende plattformer.</li></ul><h3>Verktøy</h3><p>Skal man eksperimentere med websikkerhet er det veldig nyttig å bruke en webproxy, som lar en se og endre på trafikken mellom nettleser og server. Noen alternativer:</p><ul><li><a href=\"https://portswigger.net/\">Burp Suite</a>. Industristandarden. Koster litt i full utgave. Verdens eneste fungerende Java Swing-applikasjon!</li><li><a href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\">OWASP ZAP</a>. Gratis, open source. Den andre Java Swing-applikasjonen.</li><li><a href=\"https://www.charlesproxy.com/\">Charles proxy</a>. Populært på Mac.</li><li><a href=\"https://www.telerik.com/fiddler\">Fiddler</a>. Populært på Windows.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*o5dXD38Iq-r2k7kaOAPBkg.png\" /><figcaption>Burp i aksjon. Hva skjer om jeg endrer det som ser ut som en konto-ID, og sender requesten på nytt? Det er enkelt å finne ut med slike verktøy.</figcaption></figure><p>Heldigvis går de fleste seriøse webløsninger over TLS (https), men det betyr også at webproxyen må terminere TLS-forbindelsen for å klare å lese eller endre på innholdet. For å unngå at nettleseren (med rette) protesterer på sertifikatfeil, forutsetter det at man setter opp nettleseren sin til å stole på CA-sertifikatet som proxyen har generert. De forskjellige proxyleverandørene forklarer hvordan man går fram for å gjøre det, men et konkret tips er å bruke en dedikert nettleser, så slipper man å sende all legitim trafikk gjennom proxyen når man ikke tester. Firefox har sitt eget oppsett av både proxy og sertifikater, mens andre i større grad baserer seg på globale systeminnstillinger.</p><h3>Oppsummering</h3><p>Her var det mye å velge mellom, selv om det ikke er en utfyllende liste. Mange av tilnærmingene utfyller hverandre på en god måte, men hvor skal man begynne? Det kommer mye an på hvor mye man føler man kan, men en mulig rekkefølge å iterere over kan være:</p><ol><li>Om du kan, dra på Hack yourself first. Den har blitt holdt flere ganger i -Norge, for eksempel på <a href=\"https://ndc-security.com/\">NDC Security</a> i Oslo.</li><li>Online training om noen tema, enten i de dedikerte løsningene foreslått over, eller på <a href=\"https://www.pluralsight.com/\">Pluralsight</a>.</li><li>Når man er klar til å eksperimentere litt selv kan må gå over på NATAS eller KWASHC.</li><li>Bugbounties er supert når man er klar til å eksperimentere på virkelige systemer!</li></ol><p>Happy hacking!</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FzwOgFlmzF98sM%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FzwOgFlmzF98sM%2Fgiphy.gif&amp;image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FzwOgFlmzF98sM%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" width=\"435\" height=\"322\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/97a39e4f0cf50845130b6044a22e65db/href\">https://medium.com/media/97a39e4f0cf50845130b6044a22e65db/href</a></iframe><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2ee00019f978\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/sparebank1-digital/er-du-utvikler-gratulerer-med-sikkerhetsjobben-2ee00019f978\">Er du utvikler? Gratulerer med sikkerhetsjobben!</a> was originally published in <a href=\"https://medium.com/sparebank1-digital\">SpareBank 1 Utvikling</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"creator":"Jon Are Rakvåg"}}]}}}